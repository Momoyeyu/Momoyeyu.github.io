<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创新创业思考课题</title>
      <link href="/2023/03/18/%E5%90%8C%E8%A1%8C%E8%AE%A1%E5%88%92-%E4%B8%8E%E5%A4%A7%E5%B8%88%E5%90%8C%E8%A1%8C/"/>
      <url>/2023/03/18/%E5%90%8C%E8%A1%8C%E8%AE%A1%E5%88%92-%E4%B8%8E%E5%A4%A7%E5%B8%88%E5%90%8C%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="同行计划"><a href="#同行计划" class="headerlink" title="同行计划"></a>同行计划</h1><p>假定你面临三体3罗辑的局面，你需要保护人类的思想，并在未来带着这些思想在宇宙中流浪，而且你能够携带的人类伟大思想是有限的，你计划携带哪些思想？</p><h2 id="亚里士多德"><a href="#亚里士多德" class="headerlink" title="亚里士多德"></a>亚里士多德</h2><p><img src="https://iknow-pic.cdn.bcebos.com/6a600c338744ebf846a0b291d5f9d72a6159a74f?x-bce-process%3Dimage%2Fresize%2Cm_lfit%2Cw_600%2Ch_800%2Climit_1%2Fquality%2Cq_85%2Fformat%2Cf_jpg" alt></p><ul><li>对人性和理性保持怀疑，主张法制</li><li>法制不来源于人的理性或思考，而来自历史</li><li>希腊三贤之一</li><li>马克思曾称亚里士多德是古希腊哲学家中最博学的人物</li><li>恩格斯称他是“古代的黑格尔”</li><li>百科全书式的科学家</li></ul><p><img src="https://img0.baidu.com/it/u=3358970226,2407525997&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=375" alt><br><strong>名言：</strong></p><ul><li>吾爱吾师，吾更爱真理。</li><li>人生最终价值在于觉醒和思考的能力，而不只在于生存。</li><li>人类是天生的社会性动物，没有人会愿意孤独的活在这个世界，他的本性要求他，必须要与他人一起生活。</li><li>没有一个人能全面把握真理。</li><li>即使上帝也无法改变过去。</li></ul><p><strong>著作：</strong></p><ul><li>《工具论》</li><li>《物理学》</li><li>《形而上学》</li><li>《伦理学》</li><li>《政治学》</li></ul><h2 id="柏拉图"><a href="#柏拉图" class="headerlink" title="柏拉图"></a>柏拉图</h2><p><img src="https://preview.qiantucdn.com/paixin/24/86/09/13558PICnXqVn2SAcIekn_PIC2018.jpg%21w1024_new_0" alt></p><ul><li>西方客观唯心主义的创始人</li><li>理念世界和现象世界</li><li>柏拉图式爱情学说</li><li>建立完整的教育体系</li><li>希腊三贤之一</li></ul><p><strong>名言：</strong></p><ul><li>在短暂的生命里寻找永恒。</li><li>不知道自己无知，乃是双倍的无知。</li><li>爱是美好带来的欢欣，智慧创造的奇观，神仙赋予的惊奇。缺乏爱的人渴望得到它，拥有爱的人万般珍惜它。</li><li>思维是灵魂的自我谈话</li><li>初期教育应是一种娱乐，这样才更容易发现一个人天生的爱好</li><li>人不仅为自己而生，而且为祖国活着。</li></ul><p><strong>著作：</strong></p><ul><li>《理想国》</li></ul><h2 id="达·芬奇"><a href="#达·芬奇" class="headerlink" title="达·芬奇"></a>达·芬奇</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/32fa828ba61ea8d3fd1fe2786143274e251f95caf23f?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>欧洲文艺复兴时期的杰出代表人物</li><li>与米开朗基罗、拉斐尔并称“文艺复兴后三杰”</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/fd039245d688d43f87948116ec54c51b0ef41ad58db7?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>真理只有一个，它不在宗教中，而是在科学中。</li><li>应当耐心听取他人的意见，认真考虑指责你的人是否有理，如果他有理，你就修正自己的错误，如果他理亏，只当没听见，若他是一个你所敬重的人，那么可以通讨论提出他不正确的地方。</li><li>有天资的人，当他们工作得最少的时候，实际上是他们工作得最多的时候，因为他们是在构思，并把想法酝酿成熟，这些想法随后就通过他们的手表达出来。</li><li>你如果要做一个艺术家，你要牢记：必须开拓你的胸襟，务使心如明镜，能够照见一切事物，一切色彩。</li><li>我不想用画笔捕捉世界，我想改变它！</li></ul><p>著作：</p><ul><li>蒙娜丽莎<br><img src="https://bkimg.cdn.bcebos.com/pic/f703738da977391276bc886af3198618367ae227?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></li><li>最后的晚餐<br><img src="https://bkimg.cdn.bcebos.com/pic/95eef01f3a292df53d442166be315c6034a8733a?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></li><li>哈默手稿</li></ul><h2 id="尼古拉·哥白尼"><a href="#尼古拉·哥白尼" class="headerlink" title="尼古拉·哥白尼"></a>尼古拉·哥白尼</h2><p><img src="https://5b0988e595225.cdn.sohucs.com/images/20171021/d516814197d74d099e73b40c7f597863.jpeg" alt></p><ul><li>文艺复兴时期的巨人</li><li>创立日心说，开创现代天文学</li><li>推翻托勒密学说，将天文学从陈旧科学观和宗教错误神学束缚下解放</li><li>近代科学的飞跃，现代科学的起点</li><li>为伽利略和开普勒的成就奠定基础</li></ul><p><strong>名言：</strong></p><ul><li>人的天职在勇于探索真理。</li><li>在许多问题上我的说法跟前人大不相同，但是我的知识得归功于他们，也归功于那些最先为这门学说开辟道路的人。</li><li>我们必须睁开双眼，面对事实。</li></ul><p><strong>著作：</strong></p><ul><li>《天球运行论》</li></ul><h2 id="弗朗西斯·培根"><a href="#弗朗西斯·培根" class="headerlink" title="弗朗西斯·培根"></a>弗朗西斯·培根</h2><p><img src="https://img.doc.xuehai.net/pic/67f66f61148afe9ee799be03/1-810-jpg_6-1080-0-0-1080.jpg" alt></p><ul><li>实验科学创始人，科学归纳法创始人</li><li>开创了反亚里士多德的技术实践论</li><li>实践观念</li><li>近代自然科学直接或感性的创造者</li><li>经验主义</li></ul><p><strong>名言：</strong></p><ul><li>实践中的失败主要由于不知道原因而发生，正是在这种情况下，人的两种企望：对知识和力量的企望真正相和在一起了。</li><li>掌握知识不是为了争论不休，不是为了藐视别人，不是为利益、荣誉、权力或者达到某种目的，而是为了用于生活。</li><li>研究真理认识真理喝相信真理，乃是人性中最高的美德。</li><li>太过重视行为规则与拘泥形式，以致在事业上坐失良机，那损失是很大的。</li></ul><p><strong>著作：</strong></p><ul><li>《新工具》</li><li>《学术的进步》</li></ul><h2 id="伽利略·伽利雷"><a href="#伽利略·伽利雷" class="headerlink" title="伽利略·伽利雷"></a>伽利略·伽利雷</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/9e3df8dcd100baa1cd11a7139140ae12c8fcc3ce8040?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“观测天文学之父”</li><li>“现代物理学之父”</li><li>“科学方法之父”</li><li>“现代科学之父”</li><li>主张用具体的实验来认识自然规律</li></ul><p><strong>名言：</strong></p><ul><li>数理科学是大自然的语言。</li><li>一切推理都必须从观察与实验得来。</li><li>与其夸大胡说，不如宣布那个聪明的、智巧的、谦逊的警句：“我不知道。”</li><li>科学的真理不应该在古代圣人的蒙着灰尘的书上去找，而应该在实验中和以实验为基础的理论中去找。</li></ul><p><strong>主要成就：</strong></p><ul><li>分析动力学</li><li>日心</li><li>运动学</li><li>观测天文学</li></ul><h2 id="艾萨克·牛顿"><a href="#艾萨克·牛顿" class="headerlink" title="艾萨克·牛顿"></a>艾萨克·牛顿</h2><p><img src="https://n.sinaimg.cn/sinakd20200425ac/444/w750h494/20200425/5b90-isuiksm8304374.jpg" alt></p><ul><li>“近代物理学之父”</li><li>发明反射式望远镜和光的色散原理</li><li>当今最有影响力的科学家</li></ul><p><strong>名言：</strong></p><ul><li>如果说我比别人看的略为远些，那是因为我是站在巨人们的肩膀上。</li><li>我的成就，当归功于精微的思索。</li><li>把简单的事情考虑得很复杂，可以发现新领域；把复杂的现象看得很简单，可以发现新定律。</li></ul><p><strong>著作：</strong></p><ul><li>《自然哲学的数学原理》</li><li>《光学》</li></ul><p><strong>主要成就：</strong></p><ul><li>牛顿三定律</li><li>与莱布尼茨独立发展出了微积分学</li><li>发现二项式定理</li><li>提出光的微粒说</li><li>确定了冷却定律</li></ul><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p><img src="https://img1.baidu.com/it/u=111017342,3278810959&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=693" alt></p><ul><li>提出光量子假说，解决了光电效应问题</li><li>创立了狭义相对论、广义相对论等</li><li>获得诺贝尔物理学奖</li><li>参加反战和平运动</li><li>达达主义</li><li>量子场概念的开创者</li><li>爱因斯坦教育理念</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/8601a18b87d6277fbc7eee5d23381f30e924fc63?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>在科学上，每一条道路都应该走一走。发现一条走不通的道路，就是对于科学的一大贡献。</li><li>人在科学探索的道路上，走过弯路，犯过错误，并不是坏事，更不是什么耻辱，要在实践中勇于承认和改正错误。</li><li>不要试图去做一个成功的人，要努力成为一个有价值的人。</li><li>有两种看待人生的方式， 一种是生活不存在奇迹， 另一种则是， 所有的一切都是奇迹。</li><li>想像力比知识更重要，正因知识是有限的，而想像力概括着世界上的一切，推动着进步，并且是知识进步的源泉。</li><li>我没有什么特殊的天赋，只是拥有无比强烈的好奇心罢了。</li></ul><p><strong>著作：</strong></p><ul><li>《我的世界观》</li><li>《统一场论》</li></ul><p><strong>主要成就：</strong></p><ul><li>狭义相对论</li><li>广义相对论</li><li>光电效应</li><li>能量守恒定律 E=mc²</li><li>宇宙常数</li></ul><h2 id="奥托·冯·俾斯麦"><a href="#奥托·冯·俾斯麦" class="headerlink" title="奥托·冯·俾斯麦"></a>奥托·冯·俾斯麦</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/500fd9f9d72a6059967849982834349b023bbacc?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>建立了世界上最早的工人养老金、健康医疗保险制度、社会保险。</li><li>铁血政策</li><li>列宁评价他说：“俾斯麦依照自己的方式，依照容克的方式完成了历史上进步的事业。”</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/9345d688d43f879433d94fa3d51b0ef41bd53a1c?x-bce-process=image/resize,m_lfit,w_1280,limit_1" alt><br><strong>名言：</strong></p><ul><li>这个时代的重大的问题不是演说和决议所能解决的……这些问题只有铁和血才能解决。</li><li>每个新手都会从自己的教训中吸取经验，聪明人则从专业团队的帮助中获益。</li></ul><h2 id="格奥尔吉·康斯坦丁诺维奇·朱可夫"><a href="#格奥尔吉·康斯坦丁诺维奇·朱可夫" class="headerlink" title="格奥尔吉·康斯坦丁诺维奇·朱可夫"></a>格奥尔吉·康斯坦丁诺维奇·朱可夫</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/c9fcc3cec3fdfc03429427dcdf3f8794a5c226e2?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>苏德战争中指挥斯大林格勒战役、列宁格勒战役、柏林战役</li><li>第二次世界大战中最优秀的将领之一</li></ul><p><strong>名言：</strong></p><ul><li>人员武器军事思想——这是一支军队的三个基本要素。</li><li>一直缺乏战术训练的部队就不得不在作战过程中付出巨大的代价来补课。</li></ul><h2 id="亚当·斯密"><a href="#亚当·斯密" class="headerlink" title="亚当·斯密"></a>亚当·斯密</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/b90e7bec54e736d160b891a391504fc2d46269f5?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>政治哲学、伦理学、经济学主要创立者</li><li>古典经济学的“开山鼻祖”</li></ul><p><strong>名言：</strong></p><ul><li>人天生，并且永远，是自私的动物。</li><li>我们在这个世界上辛苦劳作，来回奔波是为了什么？所有这些贪婪和欲望，所有这些对财富、权力和名声的追求，其目的到底何在呢？归根结底，是为了得到他人的爱和认同。</li><li>一个事业若对社会有益，就应当任其自由、广其竞争，竞争愈自由，愈普遍，那事业就愈有利于社会。</li><li>每个人在追求自身利益时，都会”被一只看不见的手”引导着去达到并非出于其本意的目的</li></ul><p><strong>著作：</strong></p><ul><li>《国富论》</li><li>《道德情操论》</li></ul><h2 id="约翰·梅纳德·凯恩斯"><a href="#约翰·梅纳德·凯恩斯" class="headerlink" title="约翰·梅纳德·凯恩斯"></a>约翰·梅纳德·凯恩斯</h2><p><img src="https://pics6.baidu.com/feed/10dfa9ec8a136327e8311d92b3e335e509fac72d.jpeg@f_auto?token=6da2e3273c0068872303c25852c83cc2" alt></p><ul><li>创立的宏观经济学</li><li>现代归纳逻辑</li></ul><p><strong>名言：</strong></p><ul><li>长远是对当前事务错误的指导。从长远看，我们都已经死了。<br>In the long run, we are all dead.</li><li>经济学家和政治哲学家们的思想，不论它们是在对的时候还是在错的时候，都比一般所设想的要更有力量。的确，世界就是由他们统治着。讲求实际的人自以为不受任何理论的影响，其实他们经常是某个已故的经济学家的俘虏。在空中听取意见的当权的狂人们，他们的狂乱的想法也多半是从若干年前学术界拙劣的作家的作品中提取出来的。我确信，和思想的逐渐侵蚀相比，既得利益的力量是被过分夸大了。诚然，这不是就当前而言，而是指一段时期以后。因为在经济学和政治哲学领域中，在25岁或30岁以后还受新理论影响的人是不多的。因此公职人员、政客甚至煽动者们所能运用的理论不大可能是最新的。但是，不论早晚，不论好坏，危险的东西不是既得利益，而是思想！</li></ul><p><strong>著作：</strong></p><ul><li>《就业、利息与货币通论》</li><li>《论概率》</li></ul><h2 id="伏尔泰"><a href="#伏尔泰" class="headerlink" title="伏尔泰"></a>伏尔泰</h2><p><img src="https://img2.baidu.com/it/u=1192643646,1844647584&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=712" alt></p><ul><li>人的本质是平等的</li><li>尊重人性与人的本能</li><li>理性主义</li><li>自由</li><li>平等</li></ul><p><strong>名言：</strong></p><ul><li>我们所有的人都有缺点和错误，让我们互相原谅彼此的愚蠢，这是自然的第一法则。</li><li>人最宝贵的财富是希望，如果只着眼于当前，我们就不会去播种。</li></ul><h2 id="伊曼努尔·康德"><a href="#伊曼努尔·康德" class="headerlink" title="伊曼努尔·康德"></a>伊曼努尔·康德</h2><p><img src="https://pics4.baidu.com/feed/fc1f4134970a304edc4cc09434352480c8175c72.jpeg?token=b0e98ccf8e3f5aad42f1a8edcc6c68ce" alt></p><ul><li>德国古典哲学创始人</li><li>理性主义</li><li>三大批判<br>1.《纯粹理性批判》<br>2.《实践理性批判》<br>3.《判断力批判》</li></ul><p><strong>名言：</strong></p><ul><li>给我物质，我就用它造出一个宇宙来。</li><li>所谓自由，不是随心所欲，而是自我主宰。</li><li>一个行为的道德性不取决于它的结果，而仅仅取决于该行为背后的意图。</li><li>知识分子是敢于在一切公共场合运用理性的人。</li><li>经验虽然告诉我们某物是如此这般的状况，但并不告诉我们它不能是另外的状况。</li><li>形而上学的真正路径不是跟杂乱无边的经验对象打交道，而是从理性本身出发，并且至于理性本身产生对话，这才是形而上学的根基，不可拔除。</li></ul><h2 id="约翰·塞巴斯蒂安·巴赫"><a href="#约翰·塞巴斯蒂安·巴赫" class="headerlink" title="约翰·塞巴斯蒂安·巴赫"></a>约翰·塞巴斯蒂安·巴赫</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/6d81800a19d8bc3e72d6d678878ba61ea9d345a2?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“西方音乐之父”</li></ul><p><strong>名曲：</strong></p><ul><li>勃兰登堡协奏曲</li><li>马太受难曲</li><li>B小调弥撒曲</li></ul><h2 id="坂本龙一"><a href="#坂本龙一" class="headerlink" title="坂本龙一"></a>坂本龙一</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/eac4b74543a9822624171b7e8582b9014b90eb91?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>法国艺术及文学勋章军官勋位</li><li>第60届奥斯卡金像奖-最佳原创配乐奖</li></ul><p><strong>名言：</strong></p><ul><li>喜欢在大都市里自己默默无闻的感觉，正因为谁都不认识我，某种程度上自己很自由。当然这也是一种孤独，但孤独有时也是自由的代名词。</li><li>艺术很长。而生命短暂。</li></ul><p><strong>著作：</strong></p><ul><li>《圣诞快乐，劳伦斯先生》</li></ul><h2 id="马塞尔·杜尚"><a href="#马塞尔·杜尚" class="headerlink" title="马塞尔·杜尚"></a>马塞尔·杜尚</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/42a98226cffc1e17ed2c203e4b90f603738de92a?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>现代艺术的守护神</li><li>达达主义及超现实主义的代表人物和创始人之一</li><li>马塞尔·杜尚不属于任何流派，因为他一生都在追求自由，真正心灵的自由。</li></ul><p><strong>名言：</strong></p><ul><li>艺术要么是剽窃，要么是革命。<br>“Art is either plagiarism or revolution.”</li><li>我对’艺术’二字没兴趣， 因为我这两个字本身早已失去了信仰。所以我不想用这两个字。今天世界上对’艺术’有太多没必要的钟爱。<br>“I don’t care about the word ‘art’ because it has been so discredited. So I want to get rid of it. There is an unnecessary adoration of ‘art’ today.”</li><li>我的做法是选择一个，无论美丽或者丑陋，都无法吸引我的东西，从而找到视觉上的冷漠。或许，你会说我找到了不少这样的东西。其实，这是很难的，因为你要看个东西看久了，多少它就变得顺眼了。所以一旦它变得顺眼，我就得抛弃它了。</li></ul><h2 id="威廉·莎士比亚"><a href="#威廉·莎士比亚" class="headerlink" title="威廉·莎士比亚"></a>威廉·莎士比亚</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/77c6a7efce1b9d16b7629988fddeb48f8d5464b5?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>“人类文学奥林匹斯山上的宙斯”</li></ul><p><strong>代表作品:</strong></p><ul><li>《哈姆雷特》</li><li>《奥赛罗》</li><li>《李尔王》</li><li>《麦克白》</li><li>《仲夏夜之梦》</li><li>《威尼斯商人》</li><li>《第十二夜》</li><li>《皆大欢喜》</li></ul><h2 id="刘慈欣"><a href="#刘慈欣" class="headerlink" title="刘慈欣"></a>刘慈欣</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/4034970a304e251fd6a6b7cfa986c9177f3e53b7?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt></p><ul><li>中国科幻文学的里程碑</li><li>“中国科幻第一人”</li><li>一个冷漠的宇宙观察者，冷酷的道德评判者，再加上一个冷静的思想者</li></ul><p><strong>著作：</strong></p><ul><li>《三体》三部曲</li><li>《流浪地球》</li><li>《球状闪电》</li></ul><h2 id="孔子"><a href="#孔子" class="headerlink" title="孔子"></a>孔子</h2><p><img src="https://img1.baidu.com/it/u=3542530181,3994172756&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500" alt></p><ul><li>中国古代伟大的思想家、政治家、教育家</li><li>儒家学派创始人</li><li>“大成至圣先师”</li><li>修订《六经》</li><li>创办私学</li></ul><p><img src="https://img1.baidu.com/it/u=2641079357,3822459288&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=723" alt><br><strong>名言：</strong></p><ul><li>言必信，行必果。</li><li>温故而知新。</li><li>士不可以不弘毅，任重而道远。</li><li>吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎。</li><li>君子泰而不骄，小人骄而不泰。</li><li>三人行，必有我师焉，择其善者而从之，择其不善者而改之。</li><li>志士仁人，无求生以害仁，有杀身以成仁。</li><li>后生可畏，焉知来者之不如今也。</li></ul><h2 id="老子"><a href="#老子" class="headerlink" title="老子"></a>老子</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/news/e945bc91a5888881f780ef5e10a3dd2c5757.jpeg" alt></p><ul><li>世界辩证法鼻祖</li><li>无为而治</li><li>物极必反</li></ul><p><strong>名言：</strong></p><ul><li>祸兮，福之所倚；福兮，祸之所伏。</li><li>人法地，地法天，天法道，道法自然。</li><li>祸莫大于不自知；咎莫大于欲得。故知足之足，常足矣。</li><li>天下难事，必作于易；天下大事，必作于细。</li></ul><p><strong>著作：</strong></p><ul><li>《道德经》</li></ul><h2 id="黑格尔"><a href="#黑格尔" class="headerlink" title="黑格尔"></a>黑格尔</h2><p><img src="https://img1.baidu.com/it/u=1781659450,3394536782&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=612" alt></p><ul><li>建立了世界哲学史最为庞大的客观唯心体系</li><li>极大丰富了辩证法</li></ul><p><strong>名言：</strong></p><ul><li>无知者是不自由的，正因和他对立的是一个陌生的世界。</li><li>凡是现实（存在）的就是合理的，凡是合理（存在）的就是现实的。</li><li>切实苦干的人往往不是高谈阔论的，他们惊天动地的事业显示了他们的伟大，可是在筹划重大事业的时候，他们是默不作声的。</li><li>一句哲理在年轻人嘴里说出和在老年人嘴里说出是不一样的。年轻人说的只是这句哲理本身，尽管他可能理解得完全正确。而老年人不只是说了这句哲理，其中还包括了他的全部生活。</li><li>我们能够断言，没有激情，任何伟大的事业都不能完成。</li></ul><h2 id="卡尔·马克思"><a href="#卡尔·马克思" class="headerlink" title="卡尔·马克思"></a>卡尔·马克思</h2><p><img src="https://img1.baidu.com/it/u=2494960820,1208431921&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=1080&amp;h=660" alt></p><ul><li>历史唯物主义</li><li>国际共产主义运动的开创者</li><li>发起社会主义科学</li><li>创建马克思主义</li><li>发现人类社会历史发展的客观规律</li><li>批判观</li></ul><p><strong>名言：</strong></p><ul><li>社会的进步，是人类对美的追求的结晶</li><li>在科学大道上没有平淡的大路可以走，只有在崎岖的小路上攀登而不畏劳苦的人，才有希望到达光辉的顶点。</li><li>青春的光辉，理想的钥匙，生命的意义，乃至人类的生存发展…全部包含在这两个字之中…奋斗！只有奋斗，才能治愈过去的创伤；只有奋斗才是我们民族的希望和光明所在。</li><li>人只有为同时代的人完美，为他们的幸福而工作，自己才能达到完美。</li></ul><h2 id="弗拉基米尔·伊里奇·列宁"><a href="#弗拉基米尔·伊里奇·列宁" class="headerlink" title="弗拉基米尔·伊里奇·列宁"></a>弗拉基米尔·伊里奇·列宁</h2><p><img src="https://bkimg.cdn.bcebos.com/pic/78310a55b319ebc4b74552e65073d8fc1e178a82b80d?x-bce-process=image/resize,m_lfit,w_536,limit_1" alt></p><ul><li>领导十月革命</li><li>缔造世界上第一个社会主义国家</li><li>组织建设共产国际</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/cf1b9d16fdfaaf51f3debe9fe10683eef01f3a29cccb?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt><br><strong>名言：</strong></p><ul><li>患难识朋友。</li><li>宪法，就是一张写着人民权利的纸。</li><li>浪费别人的时间是谋财害命，浪费自己的时间则是慢性自杀。</li><li>在革命事业中，认识到自己的缺点就等于改正了一大半。</li><li>人需要梦想，但是需要人的符合自然的梦想，而不是超自然的梦想。</li><li>任何国家都意味着使用暴力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字典</title>
      <link href="/2023/01/22/Python-%E5%AD%97%E5%85%B8/"/>
      <url>/2023/01/22/Python-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是Python中唯一实现<code>映射关系</code>的内置类型</p><h2 id="1-解决单表代换密码问题"><a href="#1-解决单表代换密码问题" class="headerlink" title="1. 解决单表代换密码问题"></a>1. 解决单表代换密码问题</h2><h3 id="1-1-模拟字典方法"><a href="#1-1-模拟字典方法" class="headerlink" title="1.1 模拟字典方法"></a>1.1 模拟字典方法</h3><blockquote><p><code>以下不是真正的字典，但可以实现类似的功能</code></p><ol><li>通过两个列表对照实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c_table = [<span class="string">&quot;cipher1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>...] <span class="comment"># 密文表</span></span><br><span class="line">d_table = [<span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;plain2&quot;</span>...] <span class="comment"># 明文表</span></span><br><span class="line">cipher = <span class="built_in">input</span>(<span class="string">&quot;input your cipher&quot;</span>) <span class="comment"># 输入密文</span></span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>) <span class="comment"># 密文拆分</span></span><br><span class="line">result = [d_table[c_table.index(each)] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher] <span class="comment"># 通过查找密文下标找到对应下标明文来解密</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 打印结果</span></span><br></pre></td></tr></table></figure></li><li>通过一个列表实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = [<span class="string">&quot;cipher1&quot;</span>, <span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>, <span class="string">&quot;plain2&quot;</span> ...]</span><br><span class="line">cipher = <span class="built_in">input</span>(...) <span class="comment"># 输入密文</span></span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>) <span class="comment"># 密文拆分</span></span><br><span class="line">result = [table[table.index(each) + <span class="number">1</span>] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher] <span class="comment"># 通过查找密文下标，得到其下一位，即对应的明文</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 打印结果</span></span><br></pre></td></tr></table></figure></li></ol><p>这两种方法在处理小量数据的时候和字典效率相差不大，但由于其数据结构本身不是映射关系，实际在处理大量数据时效率远不及字典</p></blockquote><h3 id="1-2-字典方法"><a href="#1-2-字典方法" class="headerlink" title="1.2 字典方法"></a>1.2 字典方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table = &#123;<span class="string">&quot;cipher1&quot;</span>:<span class="string">&quot;plain1&quot;</span>, <span class="string">&quot;cipher2&quot;</span>:<span class="string">&quot;plain2&quot;</span>, <span class="string">&quot;cipher3&quot;</span>:<span class="string">&quot;plain3&quot;</span>...&#125;</span><br><span class="line">cipher = <span class="built_in">input</span>(<span class="string">&quot;input your cipher&quot;</span>)</span><br><span class="line">split_cipher = cipher.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">result = [table[each] <span class="keyword">for</span> each <span class="keyword">in</span> split_cipher]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="2-字典基础用法"><a href="#2-字典基础用法" class="headerlink" title="2. 字典基础用法"></a>2. 字典基础用法</h2><p>Python中，字典内一对数据叫做一个<code>键值对</code>：dic = {“键”:”值”}，一个键对应一个值</p><h3 id="2-1-字典的6种一般声明方法"><a href="#2-1-字典的6种一般声明方法" class="headerlink" title="2.1 字典的6种一般声明方法"></a>2.1 字典的6种一般声明方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;</span><br><span class="line">b = <span class="built_in">dict</span>(alpha=<span class="string">&quot;a&quot;</span>, bravo=<span class="string">&quot;b&quot;</span>...)</span><br><span class="line">c = <span class="built_in">dict</span>([(<span class="string">&quot;alpha&quot;</span>, <span class="string">&quot;a&quot;</span>), (<span class="string">&quot;bravo&quot;</span>, <span class="string">&quot;b&quot;</span>)...])</span><br><span class="line">d = <span class="built_in">dict</span>(&#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;)</span><br><span class="line">e = <span class="built_in">dict</span>(&#123;<span class="string">&quot;alpha&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;bravo&quot;</span>:<span class="string">&quot;b&quot;</span>...&#125;, charlie=<span class="string">&quot;c&quot;</span>...)</span><br><span class="line">f = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;alpha&quot;</span>, <span class="string">&quot;bravo&quot;</span>, <span class="string">&quot;charlie&quot;</span>...], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>...]))</span><br><span class="line">a == b == c == d == e == f <span class="comment"># True # &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-fromkeys声明"><a href="#2-2-fromkeys声明" class="headerlink" title="2.2 fromkeys声明"></a>2.2 fromkeys声明</h3><blockquote><p>fromkeys(iterable, value) 其中value是可选参数，默认为None<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>) <span class="comment"># 键被看作集合，重复的o和y只会存一个</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><br>Output<br>{‘M’: 0, ‘o’: 0, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0}</p></blockquote><h3 id="2-3-修改字典"><a href="#2-3-修改字典" class="headerlink" title="2.3 修改字典"></a>2.3 修改字典</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">dic[<span class="string">&quot;M&quot;</span>] = <span class="number">1</span> <span class="comment"># 改</span></span><br><span class="line">dic[<span class="string">&quot;New&quot;</span>] = <span class="number">2</span> <span class="comment"># 增</span></span><br><span class="line">dic.pop(<span class="string">&quot;o&quot;</span>) <span class="comment"># 删 （pop的返回值是删除的值）</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><p>Output:<br>{‘M’: 0, ‘o’: 0, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0}<br>{‘M’: 1, ‘m’: 0, ‘y’: 0, ‘e’: 0, ‘u’: 0, ‘New’: 1}  </p><p>键被当作下标使用，这也解释了为什么键要被视为集合储存：<code>具有无序性和唯一性</code><br>一个字典中没有两个相等的键，但不同的键可以关联同一个值，<code>键重复了就用新的值覆盖旧的值</code>  </p></blockquote><p><strong>2.3.1 关于删除</strong></p><blockquote><ol><li><p>dic.pop(key, default)<br>若pop的键key不存在dic中，pop会报错，但也可以通过可选参数default来设置报错内容  </p></li><li><p>dic.popitem()<br>在python3.7以后的版本，字典的键值对才有储存顺序，popitem会弹出最后一个加入字典dic的键值对<br>但在python3.7以前的版本，popitem会随机弹出一个键值对  </p></li><li><p>del关键词<br>通过 del dic[‘键’] 也可以删除一个键值对，也可以 del dic 直接删除字典，注意和 dic.clear() 区分  </p></li><li><p>clear()<br>通过 dic.clear() 可以得到空字典，注意和 del dic 区分  </p></li></ol></blockquote><h2 id="3-其他字典函数"><a href="#3-其他字典函数" class="headerlink" title="3. 其他字典函数"></a>3. 其他字典函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">dic.get(key, default=None)</td><td style="text-align:center">查找key对应的value，不存在则返回None</td></tr><tr><td style="text-align:center">dic.setdefault(key, value)</td><td style="text-align:center">查找key的值，若key存在，返回key原本的value；若key不存在，则把键值对key:value添加到dic中</td></tr><tr><td style="text-align:center">dic.keys()</td><td style="text-align:center">返回dic的<code>键的视图对象</code></td></tr><tr><td style="text-align:center">dic.values()</td><td style="text-align:center">返回dic的<code>值的视图对象</code></td></tr><tr><td style="text-align:center">dic.items()</td><td style="text-align:center">返回dic的<code>字典视图对象</code></td></tr></tbody></table></div><h3 id="3-1-关于视图对象"><a href="#3-1-关于视图对象" class="headerlink" title="3.1 关于视图对象"></a>3.1 关于视图对象</h3><p>视图对象是字典的<code>动态</code>视图，字典改变的时候，其视图对象会随之改变</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dic = <span class="built_in">dict</span>.fromkeys(<span class="string">&quot;Momoyeyu&quot;</span>, <span class="number">0</span>)</span><br><span class="line">keys = dic.keys()</span><br><span class="line">values = dic.values()</span><br><span class="line">items = dic.items()</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br><span class="line"><span class="built_in">print</span>(values)</span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line">dic.pop(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items)</span><br></pre></td></tr></table></figure><p>Output:<br>dict_keys([‘M’, ‘o’, ‘m’, ‘y’, ‘e’, ‘u’])<br>dict_values([0, 0, 0, 0, 0, 0])<br>dict_items([(‘M’, 0), (‘o’, 0), (‘m’, 0), (‘y’, 0), (‘e’, 0), (‘u’, 0)])<br>dict_items([(‘o’, 0), (‘m’, 0), (‘y’, 0), (‘e’, 0), (‘u’, 0)])  </p></blockquote><h2 id="4-嵌套字典"><a href="#4-嵌套字典" class="headerlink" title="4. 嵌套字典"></a>4. 嵌套字典</h2><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;Momoyeyu&quot;</span>:&#123;<span class="string">&quot;Chinese&quot;</span>:<span class="number">60</span>, <span class="string">&quot;Math&quot;</span>:<span class="number">50</span>, <span class="string">&quot;English&quot;</span>:<span class="number">40</span>&#125;&#125;</span><br><span class="line">b = &#123;<span class="string">&quot;Momoyeyu&quot;</span>:[<span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&quot;Momoyeyu&quot;</span>][<span class="string">&quot;Math&quot;</span>], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&quot;Momoyeyu&quot;</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>Output:<br>50 50</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-分支和循环</title>
      <link href="/2023/01/20/Python-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/01/20/Python-%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="1-if结构"><a href="#1-if结构" class="headerlink" title="1. if结构"></a>1. if结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><h2 id="2-if-else结构"><a href="#2-if-else结构" class="headerlink" title="2. if-else结构"></a>2. if-else结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_2(s2)</span><br><span class="line">statement_3(s3)</span><br></pre></td></tr></table></figure><h2 id="3-if-elif-elif…-else-结构"><a href="#3-if-elif-elif…-else-结构" class="headerlink" title="3. if-elif-elif…(-else)结构"></a>3. if-elif-elif…(-else)结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_2(s2)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     statement_n(sn)</span></span><br></pre></td></tr></table></figure><h2 id="4-oneline结构"><a href="#4-oneline结构" class="headerlink" title="4. oneline结构"></a>4. oneline结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true_statement <span class="keyword">if</span> condition <span class="keyword">else</span> false_statement</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h2><h3 id="1-1-基本结构"><a href="#1-1-基本结构" class="headerlink" title="1.1 基本结构"></a>1.1 基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><h3 id="1-2-while-break结构"><a href="#1-2-while-break结构" class="headerlink" title="1.2 while-break结构"></a>1.2 while-break结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">    <span class="keyword">if</span> condition_2:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    statement_2(s2)</span><br><span class="line">statement_3(s3)</span><br></pre></td></tr></table></figure><h3 id="1-3-while-else结构"><a href="#1-3-while-else结构" class="headerlink" title="1.3 while-else结构"></a>1.3 while-else结构</h3><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condtion_1:</span><br><span class="line">    statement_1(s1)</span><br><span class="line">    <span class="keyword">if</span> condition_2:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    statment_2(s2)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statment_3(s3)</span><br><span class="line">statement_4(s4)</span><br></pre></td></tr></table></figure><p>仅在循环由condition_1退出时才执行else，由break终止则不执行else</p></blockquote><h3 id="1-4-嵌套结构"><a href="#1-4-嵌套结构" class="headerlink" title="1.4 嵌套结构"></a>1.4 嵌套结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(j, <span class="string">&quot;*&quot;</span>, i, <span class="string">&quot;=&quot;</span>, j*i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 * 1 = 1 </span><br><span class="line">1 * 2 = 2 2 * 2 = 4 </span><br><span class="line">1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 </span><br><span class="line">1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 </span><br><span class="line">1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 </span><br><span class="line">1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 </span><br><span class="line">1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 </span><br><span class="line">1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 </span><br><span class="line">1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 </span><br></pre></td></tr></table></figure><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> identifier <span class="keyword">in</span> iterable</span><br><span class="line">    statement_1(s1)</span><br><span class="line">statement_2(s2)</span><br></pre></td></tr></table></figure><blockquote><p>Translation:<br>identifier: 标识符（变量名）<br>iterable: 可迭代对象  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure><h3 id="2-2-range-函数"><a href="#2-2-range-函数" class="headerlink" title="2.2 range()函数"></a>2.2 range()函数</h3><blockquote><p>range(stop)<br>range(start, stop)<br>range(start, stop, step)  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">            <span class="keyword">if</span> n % m == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(n, <span class="string">&quot;=&quot;</span>, m, <span class="string">&quot;*&quot;</span>, n // m)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n, <span class="string">&quot;is a prime number&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2 is a prime number</span><br><span class="line">3 is a prime number</span><br><span class="line">4 = 2 * 2</span><br><span class="line">5 is a prime number</span><br><span class="line">6 = 2 * 3</span><br><span class="line">7 is a prime number</span><br><span class="line">8 = 2 * 4</span><br><span class="line">9 = 3 * 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-序列</title>
      <link href="/2023/01/20/Python-%E5%BA%8F%E5%88%97/"/>
      <url>/2023/01/20/Python-%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p>Python中，列表、元组和字符串都属于序列</p><h2 id="1-序列的基本运算"><a href="#1-序列的基本运算" class="headerlink" title="1. 序列的基本运算"></a>1. 序列的基本运算</h2><blockquote><p>加法 +<br>乘法 *  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = a + b</span><br><span class="line">d = a * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">[1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="2-序列的判定函数"><a href="#2-序列的判定函数" class="headerlink" title="2. 序列的判定函数"></a>2. 序列的判定函数</h2><h3 id="2-1-关键词’is’-amp-‘is-not’"><a href="#2-1-关键词’is’-amp-‘is-not’" class="headerlink" title="2.1 关键词’is’ &amp; ‘is not’"></a>2.1 关键词’is’ &amp; ‘is not’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a == b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a is b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a <span class="keyword">is</span> b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a == b?</span><br><span class="line">True</span><br><span class="line">a is b?</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>第一次判定的是’a’与’b’的元素值是否相等，而第二次判定的是’a’与’b’是否与同一组数据挂钩<br>放在C语言中，就好比’==’判断变量储存的数值是否相等，而’is’判断他们是否指向同一个内存地址<br>但是在Python中，我们一般认为变量名并不是储存了数据，而是与数据挂钩，同时一般Python也不常用指针的概念<br>这是因为Python对指针做了良好封装，一切都是“对象”，一切对象都有一个“变量”指向它。这个“变量”就是“指针”  </p><blockquote><p>而’is’和’is not’就是用来判断’a’和’b’是否指向了同一个<code>对象</code>，其本质和比较指针是一样的</p></blockquote><h3 id="2-2-id"><a href="#2-2-id" class="headerlink" title="2.2 id()"></a>2.2 id()</h3><blockquote><p>Return the identity of an object.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="built_in">id</span>(c) == <span class="built_in">id</span>(d) <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><br>id()相当于C语言中取地址符，它得到的相当于与变量名挂钩的数据的”身份证”，只要数据存在于内存中，这个值就唯一</p></blockquote><h3 id="2-3-关键词’in’-amp-‘not-in’"><a href="#2-3-关键词’in’-amp-‘not-in’" class="headerlink" title="2.3 关键词’in’ &amp; ‘not in’"></a>2.3 关键词’in’ &amp; ‘not in’</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 in a?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> a <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a not in b?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>) <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> b <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 in a?</span><br><span class="line">True</span><br><span class="line">a not in b?</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="3-关键词’del’"><a href="#3-关键词’del’" class="headerlink" title="3. 关键词’del’"></a>3. 关键词’del’</h2><p>作用：删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x[:]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">del</span> x</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[2, 3, 4, 5]</span><br><span class="line">[4, 5]</span><br><span class="line">[]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:\PycharmProjects\test\main.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    print(x)</span><br><span class="line">NameError: name &#x27;x&#x27; is not defined</span><br></pre></td></tr></table></figure></p><h2 id="4-序列基本函数"><a href="#4-序列基本函数" class="headerlink" title="4. 序列基本函数"></a>4. 序列基本函数</h2><h3 id="4-1-list-amp-tuple-amp-str"><a href="#4-1-list-amp-tuple-amp-str" class="headerlink" title="4.1 list() &amp; tuple() &amp; str()"></a>4.1 list() &amp; tuple() &amp; str()</h3><blockquote><p>list(iterable)<br>tuple(iterable)<br>str(object) # str(object=’’) -&gt; str  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="built_in">list</span>(<span class="string">&quot;Momoyeyu&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;]</span><br><span class="line">(&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;)</span><br><span class="line">Momoyeyu</span><br><span class="line">[&#x27;M&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27;e&#x27;, &#x27;y&#x27;, &#x27;u&#x27;]</span><br></pre></td></tr></table></figure><h3 id="4-2-max-amp-min"><a href="#4-2-max-amp-min" class="headerlink" title="4.2 max() &amp; min()"></a>4.2 max() &amp; min()</h3><blockquote><p>max(iterable, *[, default=obj, key=func])<br>min(iterable, *[, default=obj, key=func])<br>注：可选参数default默认是报错，可以设置内容  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="string">&quot;Momoyeyu&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>([], default = <span class="string">&quot;Empty!&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">M</span><br><span class="line">Empty!</span><br></pre></td></tr></table></figure><h3 id="4-3-len-amp-sum"><a href="#4-3-len-amp-sum" class="headerlink" title="4.3 len() &amp; sum()"></a>4.3 len() &amp; sum()</h3><blockquote><p>len(obj)<br>sum(iterable, /, start=0)<br>注：可选参数start默认是0，可以设置起始值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], start=<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1024</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h3 id="4-4-sorted-amp-reversed"><a href="#4-4-sorted-amp-reversed" class="headerlink" title="4.4 sorted() &amp; reversed()"></a>4.4 sorted() &amp; reversed()</h3><blockquote><p>sorted(iterable, /, *, key=None, reverse=False)<br>reversed(sequence) # Return a reverse iterator over the values of the given sequence.  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>([<span class="string">&quot;Momoyeyu&quot;</span>, <span class="string">&quot;Gger&quot;</span>, <span class="string">&quot;Guitar&quot;</span>], key=<span class="built_in">len</span>, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br><span class="line">[&#x27;Momoyeyu&#x27;, &#x27;Guitar&#x27;, &#x27;Gger&#x27;]</span><br><span class="line">&lt;list_reverseiterator object at 0x000002891CDAFE20&gt;</span><br><span class="line">[6, 8, 0, 0, 1]</span><br></pre></td></tr></table></figure><p>由输出第3行我们注意到，reversed()返回的不是一个列表，根据Python官方文档说明，reversed()返回的是一个<code>迭代器</code></p><h3 id="4-5-all-amp-any"><a href="#4-5-all-amp-any" class="headerlink" title="4.5 all() &amp; any()"></a>4.5 all() &amp; any()</h3><blockquote><p>all(iterable)<br>any(iterable)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="5-关于迭代器-iterator"><a href="#5-关于迭代器-iterator" class="headerlink" title="5. 关于迭代器-iterator"></a>5. 关于迭代器-iterator</h2><h3 id="5-1-enumerate"><a href="#5-1-enumerate" class="headerlink" title="5.1 enumerate()"></a>5.1 enumerate()</h3><blockquote><p>enumerate(iterable, start=0) # 返回一个枚举对象<br>注：可选参数start可以设置起始序号  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kisetsu = [<span class="string">&quot;Haru&quot;</span>, <span class="string">&quot;Natsu&quot;</span>, <span class="string">&quot;Aki&quot;</span>, <span class="string">&quot;Huyu&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">enumerate</span>(Kisetsu))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(Kisetsu)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(Kisetsu, <span class="number">10</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;enumerate object at 0x0000014117E308C0&gt;</span><br><span class="line">[(0, &#x27;Haru&#x27;), (1, &#x27;Natsu&#x27;), (2, &#x27;Aki&#x27;), (3, &#x27;Huyu&#x27;)]</span><br><span class="line">[(10, &#x27;Haru&#x27;), (11, &#x27;Natsu&#x27;), (12, &#x27;Aki&#x27;), (13, &#x27;Huyu&#x27;)]</span><br></pre></td></tr></table></figure><h3 id="5-2-zip"><a href="#5-2-zip" class="headerlink" title="5.2 zip()"></a>5.2 zip()</h3><blockquote><p>zip(*iterables, strict=False) # Return an iterator  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = <span class="built_in">zip</span>(x, y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(z))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;zip object at 0x0000022F43B43040&gt;</span><br><span class="line">[(1, 4), (2, 5), (3, 6)]</span><br></pre></td></tr></table></figure><h3 id="5-3-itertools-zip-longest"><a href="#5-3-itertools-zip-longest" class="headerlink" title="5.3 itertools.zip_longest()"></a>5.3 itertools.zip_longest()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(itertools.zip_longest([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(1, &#x27;M&#x27;), (2, &#x27;o&#x27;), (3, &#x27;m&#x27;)]</span><br><span class="line">[(1, &#x27;M&#x27;), (2, &#x27;o&#x27;), (3, &#x27;m&#x27;), (None, &#x27;o&#x27;), (None, &#x27;y&#x27;), (None, &#x27;e&#x27;), (None, &#x27;y&#x27;), (None, &#x27;u&#x27;)]</span><br></pre></td></tr></table></figure><p>zip()默认进行的时截短运算，但可以从itertools中引用itertools.zip_longest()来进行保长运算</p><h3 id="5-4-map-amp-filter"><a href="#5-4-map-amp-filter" class="headerlink" title="5.4 map() &amp; filter()"></a>5.4 map() &amp; filter()</h3><blockquote><p>map(func, *iterables)<br>注：func指的是一套运算规则，map()会将*iterables中的对象都按照func进行计算然后返回其结果组成的iterator</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&quot;Momoyeyu&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">pow</span>, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[77, 111, 109, 111, 121, 101, 121, 117]</span><br><span class="line">[256, 512, 1024]</span><br></pre></td></tr></table></figure><p>由输出第二行可以看出，对于数据长度不同时，map()与zip()相同，选择了截短运算</p><blockquote><p>filter(function or None, iterable)<br>注：和map()类似，但只将结果为True的元素返回到iterator</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.islower, <span class="string">&quot;G-ger&quot;</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;g&#x27;, &#x27;e&#x27;, &#x27;r&#x27;]</span><br></pre></td></tr></table></figure><h2 id="6-迭代器和可迭代对象-iterator-amp-iterable"><a href="#6-迭代器和可迭代对象-iterator-amp-iterable" class="headerlink" title="6. 迭代器和可迭代对象-iterator &amp; iterable"></a>6. 迭代器和可迭代对象-iterator &amp; iterable</h2><blockquote><p>iterator是一次性的，而iterable可以重复使用</p><p>可参考<a href="https://blog.csdn.net/pythonandaiot/article/details/122312616">迭代器和可迭代对象</a></p></blockquote><h3 id="6-1-iterator"><a href="#6-1-iterator" class="headerlink" title="6.1 iterator"></a>6.1 iterator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = <span class="built_in">iter</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(x):</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(y, <span class="string">&quot;Empty&quot;</span>), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(y, <span class="string">&quot;Empty&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line">&lt;class &#x27;list_iterator&#x27;&gt;</span><br><span class="line">1 2 3 4 5 Empty</span><br></pre></td></tr></table></figure><p>next()函数可以让iterator进行一次迭代，迭代到尽头之后就会报错，可以设置报错内容</p><h3 id="6-2-iterable"><a href="#6-2-iterable" class="headerlink" title="6.2 iterable"></a>6.2 iterable</h3><p>可迭代对象可以理解为可以重复使用的迭代器<br>iterable可以进行迭代，迭代完成后，它又可以被引用，从头进行迭代，因为它的数据还被完整保留着<br>而iterator迭代完成之后，迭代器里的数据就被释放完了，不可再次使用  </p><p>一个迭代器<code>肯定</code>是一个可迭代对象</p><h3 id="6-3-iterator与iterable比较"><a href="#6-3-iterator与iterable比较" class="headerlink" title="6.3 iterator与iterable比较"></a>6.3 iterator与iterable比较</h3><blockquote><p>根据应用场景不同，他们有各自的优劣：<br>iterator: 不会占用太多资源储存数据，他只会由现在的数据迭代计算下一个数据，但这个过程往往是不可逆的，迭代后上一个数据就抛弃了<br>iterable: 可以重复使用，迭代后之前的数据也得到保存，但比较占用资源</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-字符串</title>
      <link href="/2023/01/19/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/01/19/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>关于字符串，主要分为两大块知识：一块是各种字符串相关函数，另一块是format字符串和f-string</p><h2 id="1-字母大小写转换"><a href="#1-字母大小写转换" class="headerlink" title="1. 字母大小写转换"></a>1. 字母大小写转换</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.capitalize()</td><td style="text-align:center">首字母大写，其余小写</td></tr><tr><td style="text-align:center">str.casefold()</td><td style="text-align:center">字母全变为小写，可以支持多种语言</td></tr><tr><td style="text-align:center">str.title()</td><td style="text-align:center">每个单词首字母都大写，其余小写</td></tr><tr><td style="text-align:center">str.swapcase()</td><td style="text-align:center">字母大小写全部和原来相反</td></tr><tr><td style="text-align:center">str.upper()</td><td style="text-align:center">字母全变为大写，英语之外可能不支持</td></tr><tr><td style="text-align:center">str.lower()</td><td style="text-align:center">字母全变为小写</td></tr></tbody></table></div><blockquote><p>注意：<br>这些函数都没有直接改变str指向的字符串，而是按规则生成了一个新的字符串，即str还是与原本的字符串挂钩<br>因此要改变str时：str = str.function()</p></blockquote><h2 id="2-对齐函数"><a href="#2-对齐函数" class="headerlink" title="2. 对齐函数"></a>2. 对齐函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.center(width, fillchar=’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>居中</code></td></tr><tr><td style="text-align:center">str.ljust(width, fillchar’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>左对齐</code></td></tr><tr><td style="text-align:center">str.rjust(width, fillchar’ ‘)</td><td style="text-align:center">width设置总字符数，fillchar设置填充字符，使str<code>右对齐</code></td></tr><tr><td style="text-align:center">str.zfill(width)</td><td style="text-align:center">width设置总字符数，str左侧用0填充，若str是数字字符串，可以支持正负数</td></tr></tbody></table></div><h2 id="3-查找函数"><a href="#3-查找函数" class="headerlink" title="3. 查找函数"></a>3. 查找函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.count(char, start, end)</td><td style="text-align:center">返回str在所选范围char的<code>个数</code>，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.find(char, start, end)</td><td style="text-align:center">返回str在所选范围<code>从左往右</code>第一个为char的<code>下标</code>，找不到则返回-1，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.rfind(char, start, end)</td><td style="text-align:center">返回str在所选范围<code>从右往左</code>第一个为char的<code>下标</code>，找不到则返回-1，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.index()</td><td style="text-align:center">返回str在所选范围<code>从左往右</code>第一个为char的<code>下标</code>，找不到则报错，起止位置为可选参数</td></tr><tr><td style="text-align:center">str.rindex()</td><td style="text-align:center">返回str在所选范围<code>从右往左</code>第一个为char的<code>下标</code>，找不到则报错，起止位置为可选参数</td></tr></tbody></table></div><h2 id="4-转换函数"><a href="#4-转换函数" class="headerlink" title="4. 转换函数"></a>4. 转换函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.expandtabs(num)</td><td style="text-align:center">将str中所有Tab转换为num个空格</td></tr><tr><td style="text-align:center">str.replace(old, new, count=-1)</td><td style="text-align:center">将str中old转换为new，可选参数count设置转换个数，默认-1表示全部转换</td></tr><tr><td style="text-align:center">str.translate(table)</td><td style="text-align:center">table表示一个转换规则，可由maketrans()生成，可以实现table中对应字符的转换</td></tr><tr><td style="text-align:center">str.maketrans(origin, trans, ignorestr)</td><td style="text-align:center">生成一个转换规则，表示将origin中的对象转换为trans中对应的对象，与ignorestr相同的字符串不会被转换</td></tr></tbody></table></div><h2 id="5-判断函数"><a href="#5-判断函数" class="headerlink" title="5. 判断函数"></a>5. 判断函数</h2><blockquote><p>这类函数会根据判断的结果返回bool类型数值</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.startswith(prefix, start, end)</td><td style="text-align:center">判断是否以prefix开头，prefix可以为元组，元组中任意一个元素满足即可，起始位置为可选参数</td></tr><tr><td style="text-align:center">str.endswith(suffix, start, end)</td><td style="text-align:center">判断是否以suffix结尾，suffix可以为元组，元组中任意一个元素满足即可，起始位置为可选参数</td></tr><tr><td style="text-align:center">str.isupper()</td><td style="text-align:center">判断是否全为大写</td></tr><tr><td style="text-align:center">str.islower()</td><td style="text-align:center">判断是否全为小写</td></tr><tr><td style="text-align:center">str.istitle()</td><td style="text-align:center">判断str是否为标题格式</td></tr><tr><td style="text-align:center">str.isalpha()</td><td style="text-align:center">判断是否全为字母</td></tr><tr><td style="text-align:center">str.isascii()</td><td style="text-align:center">判断是否都为ascii</td></tr><tr><td style="text-align:center">str.isspace()</td><td style="text-align:center">判断是否都为空白字符(空格、Tab、换行符等)</td></tr><tr><td style="text-align:center">str.isprintable()</td><td style="text-align:center">判断是否都可以打印</td></tr><tr><td style="text-align:center">str.isdecimal()</td><td style="text-align:center">判断是否数字的一个标准（范围最小）</td></tr><tr><td style="text-align:center">str.isdigit()</td><td style="text-align:center">判断是否数字的一个标准（范围适中）</td></tr><tr><td style="text-align:center">str.isnumeric()</td><td style="text-align:center">判断是否数字的一个标准（范围最大）</td></tr><tr><td style="text-align:center">str.isalnum()</td><td style="text-align:center">判断是否全为字母或数字</td></tr><tr><td style="text-align:center">str.isidentifier()</td><td style="text-align:center">判断str是否为Python的合法标识符</td></tr></tbody></table></div><p><strong>5.1 prefix/suffix为元组的例子</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;她爱Python&quot;</span>.startswith((<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>, <span class="string">&quot;她&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总有人爱Python&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;总有人爱Python&quot;</span></span><br></pre></td></tr></table></figure><br><strong>5.2 isdecimal() &amp; isdigit() &amp; isnumeric() 区别</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="comment"># All: True</span></span><br><span class="line">x = <span class="string">&quot;2²&quot;</span></span><br><span class="line"><span class="comment"># x.isdecimal(): False</span></span><br><span class="line"><span class="comment"># x.isdigit() &amp; x.isnumeric(): True</span></span><br><span class="line">x = <span class="string">&quot;一二三&quot;</span></span><br><span class="line"><span class="comment"># x.isdecimal() &amp; x.isdigit(): False</span></span><br><span class="line"><span class="comment"># x.isnumeric(): True</span></span><br><span class="line">x = <span class="string">&quot;我不是数字&quot;</span></span><br><span class="line"><span class="comment"># All: False</span></span><br></pre></td></tr></table></figure></p><h2 id="6-截取函数"><a href="#6-截取函数" class="headerlink" title="6. 截取函数"></a>6. 截取函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.strip(chars=None)</td><td style="text-align:center">从左右两侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.lstrip(chars=None)</td><td style="text-align:center">从左侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.rstrip(chars=None)</td><td style="text-align:center">从右侧删除选定字符，直到遇到第一个非选定字符时停止；默认None表示空白字符，chars是字符串，<code>会被视为集合</code></td></tr><tr><td style="text-align:center">str.removeprefix(prefix)</td><td style="text-align:center">去除前缀prefix</td></tr><tr><td style="text-align:center">str.removesuffix(suffix)</td><td style="text-align:center">去除后缀suffix</td></tr></tbody></table></div><h2 id="7-拆分与拼接"><a href="#7-拆分与拼接" class="headerlink" title="7. 拆分与拼接"></a>7. 拆分与拼接</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">str.partition(char)</td><td style="text-align:center"><code>从左往右</code>找到第一个为char的字符，以此为结点拆分得到一个三元组</td></tr><tr><td style="text-align:center">str.rpartition(char)</td><td style="text-align:center"><code>从右往左</code>找到第一个为char的字符，以此为结点拆分得到一个三元组</td></tr><tr><td style="text-align:center">str.split(sep=None, maxsplit=-1)</td><td style="text-align:center">将str拆分为多个字符串并返回其组成的列表；sep设置拆分字符，默认为空白字符；maxsplit设置最大分割数，默认-1表示全部拆分</td></tr><tr><td style="text-align:center">str.rsplit(sep=None, maxsplit=-1)</td><td style="text-align:center">从右往左开始拆分，功能与split()相同</td></tr><tr><td style="text-align:center">str.splitlines(save=False)</td><td style="text-align:center">以换行符为拆分字符将str拆分，可识别<code>不同系统的换行符</code>；可选参数save控制是否保留换行符到其前面的子串</td></tr><tr><td style="text-align:center">str.join(iterable)</td><td style="text-align:center">以str为结点连接iterable中各个元素，str可为空字符串</td></tr></tbody></table></div><blockquote><p>7.1 不同系统的换行符</p><blockquote><p>Unix, Linux: \n<br>Max OS: \r<br>Windows: \r\n</p></blockquote><p>7.2 join() 比 + 的优势在于 join() 的<code>处理效率</code>远高于 + </p></blockquote><h2 id="8-format字符串"><a href="#8-format字符串" class="headerlink" title="8. format字符串"></a>8. format字符串</h2><h3 id="8-1-基础用法"><a href="#8-1-基础用法" class="headerlink" title="8.1 基础用法"></a>8.1 基础用法</h3><p>问题来源：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line">month = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是 year 年 month 月&quot;</span>)</span><br><span class="line"><span class="comment"># 现在是 year 年 month 月</span></span><br></pre></td></tr></table></figure><br>类似于c\c++中的转义字符，Python的字符串也需要类似转义字符的存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在是 &#123;&#125; 年 &#123;&#125; 月&quot;</span>.<span class="built_in">format</span>(year, month))</span><br><span class="line"><span class="comment"># 现在是 2023 年 1 月</span></span><br></pre></td></tr></table></figure><br>{}中可以通过写<code>下标</code>选择format()中的数据，且可以<code>重复使用</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;爱&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>))</span><br><span class="line"><span class="comment"># 我爱你</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125;爱&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;我&quot;</span>, <span class="string">&quot;你&quot;</span>))</span><br><span class="line"><span class="comment"># 你爱我</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;mo&quot;</span>, <span class="string">&quot;ye&quot;</span>, <span class="string">&quot;yu&quot;</span>))</span><br><span class="line"><span class="comment"># momoyeyu</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;2&#125;,&#123;1&#125;,&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(*<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="comment"># c,b,a</span></span><br></pre></td></tr></table></figure><br>还可以使用<code>关键字参数</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&#123;name&#125;，我喜欢&#123;fav&#125;&quot;</span>.<span class="built_in">format</span>(name = <span class="string">&quot;墨末夜羽&quot;</span>, fav = <span class="string">&quot;吉他&quot;</span>))</span><br><span class="line"><span class="comment"># 我是墨末夜羽，我喜欢吉他</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我是&#123;fav&#125;，我喜欢&#123;name&#125;&quot;</span>.<span class="built_in">format</span>(name = <span class="string">&quot;墨末夜羽&quot;</span>, fav = <span class="string">&quot;吉他&quot;</span>))</span><br><span class="line"><span class="comment"># 我是吉他，我喜欢墨末夜羽</span></span><br></pre></td></tr></table></figure></p><h3 id="8-2-语法格式"><a href="#8-2-语法格式" class="headerlink" title="8.2 语法格式"></a>8.2 语法格式</h3><blockquote><p>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]<br>fill        ::=  <any character> <code># 填充字符</code><br>align       ::=  “&lt;” | “&gt;” | “=” | “^” <code># 填充位置</code><br>sign        ::=  “+” | “-“ | “ “ <code># 显示符号</code><br>width       ::=  integer <code># 打印宽度</code><br>precision   ::=  integer <code># 浮点数精度</code><br>type        ::=  “b” | “c” | “d” | “e” | “E” | “f” | “F” | “g” | “G” | “n” | “o” | “s” | “x” | “X” | “%” <code># 数据表达方式</code></any></p></blockquote><p>8.2.1 示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;1:^10&#125;&#123;0:&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;   456    123       &#x27; # 居；左对齐</span></span><br><span class="line"><span class="string">&quot;&#123;:08&#125;&#123;:08&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1024</span>,-<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># &#x27;00001024-0001024&#x27; # 填充0；0不影响符号</span></span><br><span class="line"><span class="string">&quot;&#123;a:*&gt;10&#125;|&#123;b:*&lt;10&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="number">120</span>,b=<span class="number">110</span>)</span><br><span class="line"><span class="comment"># &#x27;*******120|110*******&#x27; # 选择*为填充字符</span></span><br><span class="line"><span class="string">&quot;&#123;:+,&#125;||&#123;:-_&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234567</span>,<span class="number">7654321</span>)</span><br><span class="line"><span class="comment"># &#x27;+1,234,567||7_654_321&#x27; # 正数显示正号，每3位用（，）分开；负数显示负号（默认就显示），每3位用（_）分开</span></span><br><span class="line"><span class="string">&quot;&#123;:.2f&#125;||&#123;:.3g&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12.3456</span>,<span class="number">12.345</span>)</span><br><span class="line"><span class="comment"># &#x27;12.35||12.3&#x27; # 小数点后保留2位数；总共保留3位数</span></span><br><span class="line"><span class="string">&quot;&#123;:.4&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Momoyeyu&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;Momo&quot; # 保留前4个字符（对数字不可用）</span></span><br><span class="line"><span class="string">&quot;&#123;0:d&#125;||&#123;0:c&#125;||&#123;0:b&#125;||&#123;0:o&#125;||&#123;0:x&#125;||&#123;0:#b&#125;||&#123;0:#o&#125;||&#123;0:#x&#125;||&#123;0:e&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">127</span>)</span><br><span class="line"><span class="comment"># &#x27;127||\x7f||1111111||177||7f||0b1111111||0o177||0x7f||1.270000e+02&#x27; # 详情看下表</span></span><br></pre></td></tr></table></figure></p><p>8.2.2 关于type</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">以二进制输出</td></tr><tr><td style="text-align:center">#b</td><td style="text-align:center">b的基础上，会在数前标0b，表示这是二进制数</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">以Unicode输出</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">以十进制输出</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">以八进制输出</td></tr><tr><td style="text-align:center">#o</td><td style="text-align:center">o的基础上，会在数前标0o，表示这是八进制数</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">以十六进制输出</td></tr><tr><td style="text-align:center">#x</td><td style="text-align:center">x的基础上，会在数前标0x，表示这是十六进制数</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">以十六进制输出</td></tr><tr><td style="text-align:center">#X</td><td style="text-align:center">X的基础上，后者会在数前标0X，表示这是十六进制数</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">类似于’d’，但会根据语言环境的分隔符插入到恰当位置</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">什么都不填，则对整数默认是’d’，对小数默认精度与所给值一样</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">以科学计数法输出，默认精度6位</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">以科学计数法输出，默认精度6位</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">以定点表示法输出，默认精度6位（非数用’nan’标示，无穷用’inf’标示）</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">以定点表示法输出，默认精度6位（非数用’NAN’标示，无穷用’INF’标示）</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">通用格式，小数以’f’输出，大数以’e’输出</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">通用格式，小数以’F’输出，大数以’E’输出</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">以百分比形式输出，默认精度同f，可通过’.num%’设置精度（num为一个数）</td></tr></tbody></table></div><p>8.2.3 format字符串综合运用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;:&#123;fill&#125;&#123;align&#125;&#123;width&#125;.&#123;prec&#125;&#123;typ&#125;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415</span>, fill=<span class="string">&#x27;+&#x27;</span>, align=<span class="string">&#x27;^&#x27;</span>, width=<span class="number">10</span>, prec=<span class="number">3</span>, typ=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;+++3.14+++&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="9-f-string"><a href="#9-f-string" class="headerlink" title="9. f-string"></a>9. f-string</h2><blockquote><p>也叫f字符串，字符串前加’f’或’F’，其中{}内的变量名可以引用，算式可以计算，内容也可以格式化输出</p></blockquote><p><strong>9.1 示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2023</span></span><br><span class="line"><span class="string">f&quot;现在是 <span class="subst">&#123;year&#125;</span> 年&quot;</span></span><br><span class="line"><span class="comment"># &#x27;现在是 2023 年&#x27;</span></span><br><span class="line"><span class="string">F&quot;1+2=<span class="subst">&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>, 2²=<span class="subst">&#123;<span class="number">2</span>*<span class="number">2</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># &#x27;1+2=3, 2²=4&#x27;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;-<span class="number">110</span>:<span class="number">0</span>=<span class="number">10</span>&#125;</span>||<span class="subst">&#123;<span class="number">3.1415</span>:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># &#x27;-000000110||3.14&#x27;</span></span><br></pre></td></tr></table></figure></p><p><strong>9.2 f-string综合运用</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fill, align, width, prec, typ = <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;<span class="number">3.1415</span>:&#123;fill&#125;</span><span class="subst">&#123;align&#125;</span><span class="subst">&#123;width&#125;</span>.<span class="subst">&#123;prec&#125;</span><span class="subst">&#123;typ&#125;</span>&#125;&quot;</span></span><br><span class="line"><span class="comment"># &#x27;+++3.14+++&#x27;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>f-string的效率比format字符串效率要高，但由于其是Python3.6才产生，考虑到兼容性，format字符串使用会更多</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表与元组</title>
      <link href="/2023/01/17/Python-%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/"/>
      <url>/2023/01/17/Python-%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1c4411e77t">【Python教程】《零基础入门学习Python》最新版（2022年12月26日更新）</a></p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="1-创建列表"><a href="#1-创建列表" class="headerlink" title="1. 创建列表"></a>1. 创建列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">_ = []</span><br></pre></td></tr></table></figure><h2 id="2-访问列表"><a href="#2-访问列表" class="headerlink" title="2. 访问列表"></a>2. 访问列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(mlist[<span class="number">0</span>], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mlist[-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 1 6</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> mlist</span><br><span class="line"><span class="built_in">print</span>(each, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h2 id="3-修改列表"><a href="#3-修改列表" class="headerlink" title="3. 修改列表"></a>3. 修改列表</h2><p><strong>3.1 通过下标索引修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">mlist[<span class="number">1</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><br>结果：mlist = [1, 2, 3, 4, 5]</p><p><strong>3.2 通过切片修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mlist[<span class="number">3</span>:] = [<span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>结果：mlist = [1, 2, 3, 2, 1]</p><p><strong>3.3 通过运算符修改</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">_2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">_ = _1 + _2</span><br><span class="line"><span class="comment"># _ = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><h2 id="4-切片"><a href="#4-切片" class="headerlink" title="4. 切片"></a>4. 切片</h2><h3 id="4-1-切片访问列表"><a href="#4-1-切片访问列表" class="headerlink" title="4.1 切片访问列表"></a>4.1 切片访问列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mlist[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment"># [3, 4]</span></span><br><span class="line">mlist[:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br><span class="line">mlist[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># [3, 4, 5, 6]</span></span><br><span class="line">mlist[:]</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">mlist[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># [1, 3, 5]</span></span><br><span class="line">mlist[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>切片访问语法：<code>列表名[起始下标:停止下标:检索跨度]</code></p><p>注意：切片访问返回的是一个可迭代对象，所以切片可以实现浅拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mlist_copy = mlist[:]</span><br></pre></td></tr></table></figure></p><h3 id="4-2-切片修改列表"><a href="#4-2-切片修改列表" class="headerlink" title="4.2 切片修改列表"></a>4.2 切片修改列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">mlist[<span class="built_in">len</span>(mlist):] = <span class="number">7</span></span><br><span class="line"><span class="comment"># mlist = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">list</span>[<span class="built_in">len</span>(mlist):] = [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># mlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">mlist.append(an element)</td><td style="text-align:center">将<code>一个元素</code>追加到列表mlist末尾</td></tr><tr><td style="text-align:center">mlist.extend(iterable)</td><td style="text-align:center">将<code>迭代结果</code>逐个追加到列表mlist末尾</td></tr><tr><td style="text-align:center">mlist.insert(an index, an element)</td><td style="text-align:center">将该元素<code>插入</code>到列表mlist的指定下标位置</td></tr><tr><td style="text-align:center">mlist.remove(an element)</td><td style="text-align:center">将该元素从列表mlist中<code>删除</code>，若元素不在列表内，则会报错</td></tr><tr><td style="text-align:center">mlist.pop(an index)</td><td style="text-align:center">将该下标对应元素从列表中<code>弹出</code></td></tr><tr><td style="text-align:center">mlist.clear()</td><td style="text-align:center">将列表mlist变为<code>空列表</code></td></tr><tr><td style="text-align:center">mlist.sort(key=None, reverse=False)</td><td style="text-align:center">将列表mlist<code>排序</code>，参数reverse控制是否<code>倒序</code></td></tr><tr><td style="text-align:center">mlist.reverse()</td><td style="text-align:center">将列表<code>倒序</code>排列</td></tr><tr><td style="text-align:center">mlist.count(an element)</td><td style="text-align:center">返回这个元素在列表中的<code>个数</code></td></tr><tr><td style="text-align:center">mlist.index(an element, start index, end index)</td><td style="text-align:center">返回这个元素的<code>下标</code>，若有多个则返回第一个</td></tr><tr><td style="text-align:center">mlist.copy()</td><td style="text-align:center">返回原列表的<code>浅拷贝</code></td></tr><tr><td style="text-align:center">len(mlist)</td><td style="text-align:center">返回值等于列表mlist的<code>长度</code></td></tr></tbody></table></div><p>Translation:</p><ol><li>element: 元素</li><li>index: 下标</li></ol><h2 id="6-嵌套列表"><a href="#6-嵌套列表" class="headerlink" title="6. 嵌套列表"></a>6. 嵌套列表</h2><p>初始化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">A = [<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">    A[i] = [<span class="number">0</span>] * <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><code>注： 不要这样声明嵌套列表：</code>B = [[0] * 3] * 3</p><p>这样声明的列表其实是对同一个[0, 0, 0]引用三次</p><p>即假设 B[0][0] = 1，则B = [[1, 0, 0], [1, 0, 0], [1, 0, 0]]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B[<span class="number">0</span>] <span class="keyword">is</span> B[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><br>访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># [1， 2， 3]</span></span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(j, end=<span class="string">&quot; &quot;</span>)<span class="comment"># 空格结尾</span></span><br><span class="line">    <span class="built_in">print</span>() <span class="comment"># 换行</span></span><br><span class="line"><span class="comment"># 1 2 3</span></span><br><span class="line"><span class="comment"># 4 5 6</span></span><br><span class="line"><span class="comment"># 7 8 9</span></span><br></pre></td></tr></table></figure></p><h2 id="7-列表名与列表"><a href="#7-列表名与列表" class="headerlink" title="7. 列表名与列表"></a>7. 列表名与列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x</span><br><span class="line">x <span class="keyword">is</span> y</span><br><span class="line"><span class="comment"># True 说明x与y表示同一个列表</span></span><br></pre></td></tr></table></figure><p>注：Python中，变量名并不是一个盒子，数据并非储存在变量中，而是变量名与数据挂钩，列表名能够引用其指向的数据</p><h2 id="8-列表拷贝"><a href="#8-列表拷贝" class="headerlink" title="8. 列表拷贝"></a>8. 列表拷贝</h2><p>在Python中，拷贝可以分为浅拷贝和深拷贝</p><p>在嵌套结构中，对其中所嵌套元素，浅拷贝仅拷贝其引用，而深拷贝会将嵌套元素也拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mlist = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="keyword">import</span> copy <span class="comment"># 深拷贝所在库</span></span><br><span class="line">mlist_copy1 = mlist <span class="comment">#浅拷贝</span></span><br><span class="line">mlist_copy2 = copy.copy(mlist) <span class="comment"># 浅拷贝</span></span><br><span class="line">mlist_copy3 = copy.deepcopy(mlist) <span class="comment"># 深拷贝</span></span><br></pre></td></tr></table></figure></p><h2 id="9-列表推导式"><a href="#9-列表推导式" class="headerlink" title="9. 列表推导式"></a>9. 列表推导式</h2><p>语法：</p><p>基本形式：_ = [expression for target in iterable]</p><p>筛选形式：_ = [expression for target in iterable if condition]</p><p>完整形式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ = [expression for target1 in iterable1 if condition1  </span><br><span class="line">                for target2 in iterable2 if condition2  </span><br><span class="line">                                 ...  </span><br><span class="line">                for target3 in iterable3 if condition3]</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_ = []</span><br><span class="line">for target1 in iterable1:</span><br><span class="line">    if condition1:</span><br><span class="line">        for target2 in iterable2:</span><br><span class="line">            if condition2:</span><br><span class="line">                ...</span><br><span class="line">                    _ = expression</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong></p><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">mlist = [i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> mlist]</span><br><span class="line"><span class="comment"># mlist = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mlist = [char * <span class="number">2</span> <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;Momoyeyu&quot;</span>]</span><br><span class="line"><span class="comment"># mlist = [&#x27;MM&#x27;, &#x27;oo&#x27;, &#x27;mm&#x27;, &#x27;oo&#x27;, &#x27;yy&#x27;, &#x27;ee&#x27;, &#x27;yy&#x27;, &#x27;uu&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">diag = [matrix[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>[<span class="built_in">len</span>(matrix)]]</span><br><span class="line"><span class="comment"># diag = [1, 5, 9]</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">          [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">flatten = [col <span class="keyword">for</span> row <span class="keyword">in</span> matrix <span class="keyword">for</span> col <span class="keyword">in</span> row]</span><br><span class="line"><span class="comment"># flatten = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>等价于：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flatten = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">        flatten.append(col)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = [[x, y] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> y % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># _ = [[0, 0], [0, 3], [0, 6], [0, 9], [2, 0], [2, 3], [2, 6], [2, 9], [4, 0], [4, 3], [4, 6], [4, 9], [6, 0], [6, 3], [6, 6], [6, 9], [8, 0], [8, 3], [8, 6], [8, 9]]</span></span><br></pre></td></tr></table></figure>等价于：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_ = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                _.append([x, y])</span><br></pre></td></tr></table></figure></li></ol><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>许多部分与列表相似，因此不多赘述，没有提到的部分基本都可以参考列表进行操作</p><h2 id="1-创建与访问元组"><a href="#1-创建与访问元组" class="headerlink" title="1. 创建与访问元组"></a>1. 创建与访问元组</h2><p>创建：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">_2 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">_1 == _2 <span class="comment"># True</span></span><br><span class="line">_1 <span class="keyword">is</span> _2 <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><p>注：建立元表可以省略小括号，但一定需要加逗号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="built_in">type</span>(x) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">y = <span class="number">1</span>,</span><br><span class="line"><span class="built_in">type</span>(y) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问：与访问列表基本一致</p><h2 id="2-元组的修改"><a href="#2-元组的修改" class="headerlink" title="2. 元组的修改"></a>2. 元组的修改</h2><p><strong><code>元组不可修改，指的是元组中每个元素的指向永远不变，但元素指向的数据可以发生改变</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> , <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">_[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;&lt;pyshell#9&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     _[0] = 0</span></span><br><span class="line"><span class="comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">_[<span class="number">4</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># _ = (1, 2, 3, 4, [1, 2, 3, 4])</span></span><br></pre></td></tr></table></figure><h2 id="3-解包操作"><a href="#3-解包操作" class="headerlink" title="3. 解包操作"></a>3. 解包操作</h2><p>列表，元组，字符串都可以使用解包操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x, y, z = t</span><br><span class="line"><span class="comment"># x = 1; y = 2; z = 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="string">&quot;Momoyeyu&quot;</span></span><br><span class="line"><span class="comment"># Error 左侧变量名和右侧元素数量不等</span></span><br><span class="line">x, y, *z = <span class="string">&quot;Momoyeyu&quot;</span></span><br><span class="line"><span class="comment"># x = M; y = o; z = &quot;moyeyu&quot;</span></span><br></pre></td></tr></table></figure><p>Python的<code>多重赋值</code>本质就是先将值包装为元组，再解包与各个变量名挂钩<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><br>等价于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x, y = _</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法摘录</title>
      <link href="/2023/01/13/markdown%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/"/>
      <url>/2023/01/13/markdown%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考资料：</p><blockquote><p><a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a><br><a href="https://www.fomal.cc/posts/2013454d.html">Markdown语法与外挂标签写法汇总</a></p></blockquote><!-- # 快捷键*[注释]: Shift + Alt + f 自动美化表格|   功能   |  快捷键  || :------: | :------: ||   加粗   | Ctrl + B ||   斜体   | Ctrl + I ||   引用   | Ctrl + Q || 插入链接 | Ctrl + L || 插入代码 | Ctrl + K || 插入图片 | Ctrl + G || 提升标题 | Ctrl + H || 有序列表 | Ctrl + O || 无序列表 | Ctrl + U ||   横线   | Ctrl + R ||   撤销   | Ctrl + Z ||   重做   | Ctrl + Y | --> |# Markdown语法摘录## 1. s文字样式> 源码示例<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> （快捷键：Ctrl + i）</span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗**</span> （快捷键：Ctrl + b）</span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*斜体加粗*</span>**</span></span><br><span class="line"></span><br><span class="line"><span class="code">`高亮`</span></span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><blockquote><p>效果示例</p><p><em>斜体</em></p><p><strong>加粗</strong></p><p><strong><em>斜体加粗</em></strong></p><p><code>高亮</code></p><p><del>删除线</del></p><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2></blockquote><h3 id="源码示例"><a href="#源码示例" class="headerlink" title="源码示例"></a>源码示例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line"><span class="quote">&gt; 引用2</span></span><br><span class="line"><span class="quote">&gt; &gt; 引用2.1</span></span><br><span class="line"><span class="quote">&gt; 引用3</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 引用4</span></span><br></pre></td></tr></table></figure><h3 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h3><blockquote><p>引用1<br>引用2</p><blockquote><p>引用2.1<br>引用3</p></blockquote><p>引用4</p></blockquote><h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h2><h3 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h3><p>使用 *，+，- 表示无序列表。<br>注意：符号后面一定要有一个空格，起到缩进的作用。</p><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表文字</span><br><span class="line"><span class="bullet">-</span> 列表文字</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 列表文字</span><br><span class="line"><span class="bullet">*</span> 列表文字</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 列表文字</span><br><span class="line"><span class="bullet">+</span> 列表文字</span><br></pre></td></tr></table></figure><br>效果示例</p><ul><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li></ul><ul><li>列表文字</li><li>列表文字</li></ul></blockquote><h3 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h3><p>注：有序列表的序列顺序即使输入错误也会自动修正（例如第三行的4）</p><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> content1</span><br><span class="line"><span class="bullet">2.</span> content2</span><br><span class="line"><span class="bullet">4.</span> content3</span><br></pre></td></tr></table></figure></p><p>效果示例</p><ol><li>content1</li><li>content2</li><li>content3</li></ol></blockquote><p>PS：数字后加点号有时会无意创建列表，因此点号的输入方式为斜杠加点号：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\.</span><br></pre></td></tr></table></figure></p><h2 id="4-特殊符号"><a href="#4-特殊符号" class="headerlink" title="4. 特殊符号"></a>4. 特殊符号</h2><p>按字符输出语法符号时，需要加斜杠：<br><img src="https://img-blog.csdn.net/20180802162507298?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNjE2MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br>PS：图片引自<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p><h2 id="5-缩进"><a href="#5-缩进" class="headerlink" title="5. 缩进"></a>5. 缩进</h2><blockquote><p>源码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content0，无缩进</span><br><span class="line">&amp;nbsp;content1，缩进1/2字符</span><br><span class="line">&amp;ensp;content2，缩进1字符</span><br><span class="line">&amp;emsp;content3，缩进2字符（1个中文字符）</span><br></pre></td></tr></table></figure></p><p>效果示例<br>content0，无缩进<br>&nbsp;content1，缩进1/2字符<br>&ensp;content2，缩进1字符<br>&emsp;content3，缩进2字符（1个中文字符）</p></blockquote><h2 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h2><h3 id="6-1-本地图片"><a href="#6-1-本地图片" class="headerlink" title="6.1 本地图片"></a>6.1 本地图片</h3><p><img src="/img/nijika.png" alt="示例图片" style="zoom:50%;"></p><blockquote><p>代码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/nijika.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>img src=”文件相对位置”</li><li>alt=”图片名称”</li><li>style=”zoom:图片大小百分比;”</li></ul><h3 id="6-2-在线图片"><a href="#6-2-在线图片" class="headerlink" title="6.2 在线图片"></a>6.2 在线图片</h3><p><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><blockquote><p>代码示例<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>![图片名称]</li><li>(网址)</li></ul><h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h2><p>表格第一行是表头，第二行用杠（这个符号：- ）来生成表格，杠左右加冒号（英文格式的）用来控制这一列对齐位置，<strong>第二行要有杠才能生成表格</strong></p><ul><li>源码示例<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|                 A |        B         | C                 | D              |</span><br><span class="line">| ----------------: | :--------------: | :---------------- | -------------- |</span><br><span class="line">| 我是右对其的内容: | :我是居中的内容: | :我是左对齐的内容 | 我是默认的内容 |</span><br><span class="line">|             A内容 |      B内容       | C内容             | D内容          |</span><br></pre></td></tr></table></figure></li></ul><ul><li>效果示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:center">B</th><th style="text-align:left">C</th><th>D</th></tr></thead><tbody><tr><td style="text-align:right">我是右对其的内容:</td><td style="text-align:center">:我是居中的内容:</td><td style="text-align:left">:我是左对齐的内容</td><td>我是默认的内容</td></tr><tr><td style="text-align:right">A内容</td><td style="text-align:center">B内容</td><td style="text-align:left">C内容</td><td>D内容</td></tr></tbody></table></div><p>表头默认加粗居中，内容默认左对齐</p><p>使用 Alt + Shift + f 可以自动美化源码中的表格的文本</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown, Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇测试博客</title>
      <link href="/2023/01/13/%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/13/%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通过-Markdown-amp-VScode-写博客"><a href="#通过-Markdown-amp-VScode-写博客" class="headerlink" title=" 通过 Markdown &amp; VScode 写博客 "></a><strong> 通过 Markdown &amp; VScode 写博客 </strong></h1><p>这是一篇关于 Markdown &amp; VScode 的测试文章</p><h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2><p>这是正文<br>VScode中直接换行，实际不会换行，但不同的渲染器可能处理结果不同，有的会换行</p><p>想要在段落内换行可以在一行末尾打两个空格实现，比如这一行<br>这是和上一行同一段落但手动换行的第二行</p><p>VScode中连用两次换行可以分割段落（即两端中间空一行即表示分段落）</p><p>加粗方法：左右各加两个星号：<strong>加粗了</strong> ，也可以用快捷键 <strong>Ctrl + b</strong> 控制加粗</p><p>斜体方法：左右各加一个星号：<em>变斜了</em>，也可以用快捷键 <strong>Ctrl + i</strong> 控制斜体</p><p>注意：星号前最好加个空格，否则可能无法识别格式</p><ol><li>数字+点+空格</li><li>可以自动生成后续行的数字和点<ol><li>Tab生成二级列表<ol><li>再Tab生成三级列表（和Python通过缩进区分层级类似）</li></ol></li></ol></li><li>这是一级列表的第三行，即使VScode中自己序号的数字写错了，序号也会被自动修正（实际上我写的是 “4. “）</li></ol><p>想要生成两个列表，中间要加入文字切开</p><ol><li>这是另一个列表</li></ol><p>让我们试试加入一些图片：</p><p>可以直接复制图片，然后用 <strong>Ctrl + Alt + v</strong> 来粘贴，比如这只随手抓的にじか：</p><p><img src="/img/nijika.png" alt></p><p>除此之外，也可以将图片存进文章的文件夹然后用图片的格式：<strong>! + [] + (图片文件相对位置或图片网址)</strong> 来插入图片</p><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><p>可以用两个$来包括公式，这个格式可以连按两次 Ctrl + m 呼出</p><script type="math/tex; mode=display">\lim_{x \to \infin}\frac{sin(x)}{x}=1</script><p>也可以在一段文字中用 Ctrl + m 插入 $\lim_{x \to \infin}\frac{sin(x)}{x}=1$ 公式</p><h2 id="试试使用表格"><a href="#试试使用表格" class="headerlink" title="试试使用表格"></a>试试使用表格</h2><p>通过符号（这个符号：|）可以建立表格：</p><p>表格第一行是表头，第二行用杠（这个符号：- ）来生成表格，杠左右加冒号（英文格式的）用来控制这一列对齐位置，<strong>第二行要有杠才能生成表格</strong></p><p>例：</p><div class="table-container"><table><thead><tr><th style="text-align:right">A</th><th style="text-align:center">B</th><th style="text-align:left">C</th><th>D</th></tr></thead><tbody><tr><td style="text-align:right">我是右对其的内容:</td><td style="text-align:center">:我是居中的内容:</td><td style="text-align:left">:我是左对齐的内容</td><td>我是默认的内容</td></tr><tr><td style="text-align:right">A内容</td><td style="text-align:center">B内容</td><td style="text-align:left">C内容</td><td>D内容</td></tr></tbody></table></div><p>表头默认加粗居中，内容默认左对齐</p><p>使用 Alt + Shift + f 可以自动美化VScode中的表格的文本</p><h2 id="尝试贴个链接："><a href="#尝试贴个链接：" class="headerlink" title="尝试贴个链接："></a>尝试贴个链接：</h2><p>可以直接复制一个链接，然后选中你想要的文字，用 Ctrl + v 粘贴，链接就会与所选中文字绑定：</p><p>这是我的博客的<a href="https://momoyeyu.github.io/">链接</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>VScode也可以写代码的：</p><p>方法：上下各用三个小撇号 <strong>（这个符号：` ）</strong> 包围代码块，还可以在上层的小撇号后标明语言类型，可以使代码高亮</p><p>我们随便拿两行javascript来试试:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Javascript syntax highlighting&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(s);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown, VScode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>setInterval(() => {  let create_time = Math.round(new Date('2023-01-10 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (number(time[2])>7)){    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp" title="距离百年老店也就差不到一百年~"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript" title="这个点了应该去睡觉啦，熬夜对身体不好哦"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);</22)>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
